// Copyright 2019 Karl Stenerud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// Generated by github.com/kstenerud/go-concise-encoding/codegen
  // DO NOT EDIT THIS FILE. Contents will be overwritten.

package rules

import (
	"fmt"
	"github.com/kstenerud/go-concise-encoding/events"
)

func (_this *BeginDocumentRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *BeginDocumentRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *BeginDocumentRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *BeginDocumentRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *BeginDocumentRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *BeginDocumentRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *BeginDocumentRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *BeginDocumentRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *BeginDocumentRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *BeginDocumentRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *BeginDocumentRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *BeginDocumentRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *BeginDocumentRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *BeginDocumentRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *BeginDocumentRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *BeginDocumentRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *BeginDocumentRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *BeginDocumentRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *BeginDocumentRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *BeginDocumentRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *BeginDocumentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *BeginDocumentRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *EndDocumentRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *EndDocumentRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *EndDocumentRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *EndDocumentRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *EndDocumentRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *EndDocumentRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *EndDocumentRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *EndDocumentRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *EndDocumentRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *EndDocumentRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *EndDocumentRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *EndDocumentRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *EndDocumentRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *EndDocumentRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *EndDocumentRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *EndDocumentRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *EndDocumentRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *EndDocumentRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *EndDocumentRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *EndDocumentRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *EndDocumentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *EndDocumentRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *TerminalRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *TerminalRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *TerminalRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *TerminalRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *TerminalRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *TerminalRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *TerminalRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *TerminalRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *TerminalRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *TerminalRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *TerminalRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *TerminalRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *TerminalRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *TerminalRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *TerminalRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *TerminalRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *TerminalRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *TerminalRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *TerminalRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *TerminalRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *TerminalRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *TerminalRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *TerminalRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *VersionRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *VersionRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *VersionRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *VersionRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *VersionRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *VersionRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *VersionRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *VersionRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *VersionRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *VersionRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *VersionRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *VersionRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *VersionRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *VersionRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *VersionRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *VersionRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *VersionRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *VersionRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *VersionRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *VersionRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *VersionRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *VersionRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *TopLevelRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *TopLevelRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *TopLevelRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *TopLevelRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *TopLevelRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *TopLevelRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *TopLevelRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *NARule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *NARule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *NARule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *NARule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *NARule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *NARule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *NARule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *NARule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *NARule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *NARule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *NARule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *NARule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ListRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ListRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ListRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ListRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ListRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MapKeyRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MapKeyRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MapKeyRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MapKeyRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MapKeyRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *MapKeyRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MapKeyRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MapKeyRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MapKeyRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *MapKeyRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *MapKeyRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MapKeyRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MapValueRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MapValueRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MapValueRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MapValueRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MapValueRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MapValueRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupKeyRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupKeyRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupKeyRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupKeyRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkupKeyRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *MarkupKeyRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkupKeyRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkupKeyRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkupKeyRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *MarkupKeyRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *MarkupKeyRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupKeyRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupValueRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupValueRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupValueRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupValueRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkupValueRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupValueRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupContentsRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupContentsRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupContentsRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupContentsRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkupContentsRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *MarkupContentsRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *MarkupContentsRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkupContentsRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkupContentsRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *MarkupContentsRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkupContentsRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *MarkupContentsRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *MarkupContentsRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *MarkupContentsRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupContentsRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *CommentRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *CommentRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *CommentRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *CommentRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *CommentRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *CommentRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *CommentRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *CommentRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *CommentRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *CommentRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *CommentRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *CommentRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *CommentRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *CommentRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *CommentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *CommentRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ArrayRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ArrayRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ArrayRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *ArrayRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ArrayRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ArrayRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *ArrayRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *ArrayRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *ArrayRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ArrayRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ArrayRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ArrayRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ArrayRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ArrayRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *ArrayRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ArrayRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ArrayRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *ArrayRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ArrayRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *ArrayRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *ArrayRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *ArrayRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ArrayChunkRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ArrayChunkRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ArrayChunkRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *ArrayChunkRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ArrayChunkRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ArrayChunkRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *ArrayChunkRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *ArrayChunkRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *ArrayChunkRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ArrayChunkRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ArrayChunkRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ArrayChunkRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ArrayChunkRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ArrayChunkRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *ArrayChunkRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ArrayChunkRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ArrayChunkRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *ArrayChunkRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ArrayChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *ArrayChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *ArrayChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *ArrayChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *StringRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *StringRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *StringRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *StringChunkRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringChunkRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringChunkRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringChunkRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringChunkRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringChunkRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringChunkRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringChunkRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringChunkRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringChunkRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringChunkRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringChunkRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringChunkRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringChunkRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *StringChunkRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringChunkRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringChunkRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *StringChunkRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *StringBuilderRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringBuilderRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringBuilderRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringBuilderRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringBuilderRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringBuilderRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringBuilderRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringBuilderRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringBuilderRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringBuilderRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringBuilderRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringBuilderRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringBuilderRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringBuilderRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *StringBuilderRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringBuilderRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringBuilderRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *StringBuilderRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringBuilderRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringBuilderRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringBuilderRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringBuilderRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *StringBuilderChunkRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringBuilderChunkRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringBuilderChunkRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringBuilderChunkRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringBuilderChunkRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringBuilderChunkRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringBuilderChunkRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringBuilderChunkRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *StringBuilderChunkRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringBuilderChunkRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringBuilderChunkRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringBuilderChunkRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringBuilderChunkRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringBuilderChunkRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *StringBuilderChunkRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringBuilderChunkRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringBuilderChunkRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *StringBuilderChunkRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringBuilderChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringBuilderChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringBuilderChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringBuilderChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkedObjectKeyableRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkedObjectKeyableRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkedObjectKeyableRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkedObjectKeyableRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkedObjectKeyableRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *MarkedObjectKeyableRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkedObjectKeyableRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkedObjectKeyableRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkedObjectKeyableRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkedObjectKeyableRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkedObjectKeyableRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *MarkedObjectKeyableRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkedObjectKeyableRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *MarkedObjectKeyableRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *MarkedObjectKeyableRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *MarkedObjectKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkedObjectKeyableRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ConstantKeyableRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ConstantKeyableRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ConstantKeyableRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ConstantKeyableRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ConstantKeyableRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *ConstantKeyableRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ConstantKeyableRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ConstantKeyableRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ConstantKeyableRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ConstantKeyableRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ConstantKeyableRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *ConstantKeyableRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ConstantKeyableRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ConstantKeyableRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *ConstantKeyableRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ConstantKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ConstantKeyableRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ConstantAnyTypeRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ConstantAnyTypeRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ConstantAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ConstantAnyTypeRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ConstantAnyTypeRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ConstantAnyTypeRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ConstantAnyTypeRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ConstantAnyTypeRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *ConstantAnyTypeRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ConstantAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ConstantAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *RIDReferenceRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *RIDReferenceRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *RIDReferenceRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *RIDReferenceRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *RIDReferenceRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *RIDReferenceRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *RIDReferenceRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *RIDReferenceRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *RIDReferenceRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *RIDReferenceRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *RIDReferenceRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *RIDReferenceRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *RIDReferenceRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *RIDReferenceRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *RIDReferenceRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *RIDReferenceRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *RIDReferenceRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *RIDReferenceRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *RIDCatRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *RIDCatRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *RIDCatRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *RIDCatRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *RIDCatRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *RIDCatRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *RIDCatRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *RIDCatRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *RIDCatRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *RIDCatRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *RIDCatRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *RIDCatRule) OnRelationship(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Relationship", _this))
}
func (_this *RIDCatRule) OnMarker(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *RIDCatRule) OnReference(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *RIDCatRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *RIDCatRule) OnConstant(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *RIDCatRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *RIDCatRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *SubjectRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *SubjectRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *SubjectRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *SubjectRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *SubjectRule) OnKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *SubjectRule) OnNonKeyableObject(ctx *Context, objType string) {
	panic(fmt.Errorf("%v does not allow %s", _this, objType))
}
func (_this *SubjectRule) OnMarkup(ctx *Context, identifier []byte) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *SubjectRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *SubjectRule) OnRIDReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow RIDReference", _this))
}
func (_this *SubjectRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *SubjectRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
