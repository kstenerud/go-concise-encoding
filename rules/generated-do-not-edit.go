// Copyright 2019 Karl Stenerud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// Generated by github.com/kstenerud/go-concise-encoding/codegen
  // DO NOT EDIT
  // IF THIS LINE SHOWS UP IN THE GIT DIFF AFTER GO FMT, THIS FILE HAS BEEN EDITED

package rules

import (
	"fmt"
	"math/big"

	"github.com/kstenerud/go-concise-encoding/events"

	"github.com/cockroachdb/apd/v2"
	"github.com/kstenerud/go-compact-float"
)

func (_this *BeginDocumentRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *BeginDocumentRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *BeginDocumentRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *BeginDocumentRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *BeginDocumentRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *BeginDocumentRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *BeginDocumentRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *BeginDocumentRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *BeginDocumentRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *BeginDocumentRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *BeginDocumentRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *BeginDocumentRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *BeginDocumentRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *BeginDocumentRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *BeginDocumentRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *BeginDocumentRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *BeginDocumentRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *BeginDocumentRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *BeginDocumentRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *BeginDocumentRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *BeginDocumentRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *BeginDocumentRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *BeginDocumentRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *BeginDocumentRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *BeginDocumentRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *BeginDocumentRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *BeginDocumentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *BeginDocumentRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *EndDocumentRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *EndDocumentRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *EndDocumentRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *EndDocumentRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *EndDocumentRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *EndDocumentRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *EndDocumentRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *EndDocumentRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *EndDocumentRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *EndDocumentRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *EndDocumentRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *EndDocumentRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *EndDocumentRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *EndDocumentRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *EndDocumentRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *EndDocumentRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *EndDocumentRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *EndDocumentRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *EndDocumentRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *EndDocumentRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *EndDocumentRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *EndDocumentRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *EndDocumentRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *EndDocumentRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *EndDocumentRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *EndDocumentRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *EndDocumentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *EndDocumentRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *TerminalRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *TerminalRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *TerminalRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *TerminalRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *TerminalRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *TerminalRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *TerminalRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *TerminalRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *TerminalRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *TerminalRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *TerminalRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *TerminalRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *TerminalRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *TerminalRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *TerminalRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *TerminalRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *TerminalRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *TerminalRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *TerminalRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *TerminalRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *TerminalRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *TerminalRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *TerminalRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *TerminalRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *TerminalRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *TerminalRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *TerminalRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *TerminalRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *TerminalRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *VersionRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *VersionRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *VersionRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *VersionRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *VersionRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *VersionRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *VersionRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *VersionRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *VersionRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *VersionRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *VersionRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *VersionRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *VersionRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *VersionRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *VersionRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *VersionRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *VersionRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *VersionRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *VersionRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *VersionRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *VersionRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *VersionRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *VersionRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *VersionRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *VersionRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *VersionRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *VersionRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *VersionRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *TopLevelRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *TopLevelRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *TopLevelRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *TopLevelRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *TopLevelRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *TopLevelRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *NARule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *NARule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *NARule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *NARule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *NARule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *NARule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *NARule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ListRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ListRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ListRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ListRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ListRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MapKeyRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MapKeyRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MapKeyRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MapKeyRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MapKeyRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MapKeyRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MapKeyRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MapKeyRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MapKeyRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MapKeyRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MapValueRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MapValueRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MapValueRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MapValueRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MapValueRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MapValueRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupNameRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupNameRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupNameRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupNameRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkupNameRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MarkupNameRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkupNameRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkupNameRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkupNameRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *MarkupNameRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkupNameRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkupNameRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupNameRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupKeyRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupKeyRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupKeyRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupKeyRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkupKeyRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MarkupKeyRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkupKeyRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkupKeyRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkupKeyRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupKeyRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupValueRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupValueRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupValueRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupValueRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkupValueRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupValueRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkupContentsRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkupContentsRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkupContentsRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkupContentsRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkupContentsRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *MarkupContentsRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MarkupContentsRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *MarkupContentsRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *MarkupContentsRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *MarkupContentsRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *MarkupContentsRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *MarkupContentsRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *MarkupContentsRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *MarkupContentsRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkupContentsRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkupContentsRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *MarkupContentsRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkupContentsRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *MarkupContentsRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *MarkupContentsRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkupContentsRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *CommentRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *CommentRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *CommentRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *CommentRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *CommentRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *CommentRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *CommentRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *CommentRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *CommentRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *CommentRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *CommentRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *CommentRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *CommentRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *CommentRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *CommentRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *CommentRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *CommentRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *CommentRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *CommentRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *CommentRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *CommentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *CommentRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MetaKeyRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MetaKeyRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MetaKeyRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MetaKeyRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MetaKeyRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MetaKeyRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MetaKeyRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MetaKeyRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MetaKeyRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MetaKeyRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MetaValueRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MetaValueRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MetaValueRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MetaValueRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MetaValueRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MetaValueRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MetaCompletionRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MetaCompletionRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MetaCompletionRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *MetaCompletionRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MetaCompletionRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MetaCompletionRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MetaCompletionRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ArrayRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ArrayRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ArrayRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *ArrayRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ArrayRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ArrayRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *ArrayRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *ArrayRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *ArrayRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *ArrayRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *ArrayRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *ArrayRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *ArrayRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *ArrayRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *ArrayRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *ArrayRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ArrayRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ArrayRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ArrayRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *ArrayRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ArrayRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ArrayRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ArrayRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ArrayRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ArrayRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *ArrayRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *ArrayRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *ArrayRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ArrayChunkRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ArrayChunkRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ArrayChunkRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *ArrayChunkRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ArrayChunkRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ArrayChunkRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *ArrayChunkRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *ArrayChunkRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *ArrayChunkRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *ArrayChunkRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *ArrayChunkRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *ArrayChunkRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *ArrayChunkRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *ArrayChunkRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *ArrayChunkRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *ArrayChunkRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ArrayChunkRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ArrayChunkRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ArrayChunkRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *ArrayChunkRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ArrayChunkRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ArrayChunkRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ArrayChunkRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ArrayChunkRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ArrayChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *ArrayChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *ArrayChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *ArrayChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *StringRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *StringRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *StringRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *StringRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *StringRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *StringRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *StringRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *StringRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *StringRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *StringRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *StringRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *StringChunkRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringChunkRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringChunkRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringChunkRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringChunkRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringChunkRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringChunkRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *StringChunkRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *StringChunkRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *StringChunkRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *StringChunkRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *StringChunkRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *StringChunkRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *StringChunkRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *StringChunkRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *StringChunkRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringChunkRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringChunkRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringChunkRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *StringChunkRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringChunkRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringChunkRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringChunkRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringChunkRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *StringBuilderRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringBuilderRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringBuilderRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringBuilderRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringBuilderRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringBuilderRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringBuilderRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *StringBuilderRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *StringBuilderRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *StringBuilderRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *StringBuilderRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *StringBuilderRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *StringBuilderRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *StringBuilderRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *StringBuilderRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *StringBuilderRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringBuilderRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringBuilderRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringBuilderRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *StringBuilderRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringBuilderRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringBuilderRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringBuilderRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringBuilderRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringBuilderRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringBuilderRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringBuilderRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringBuilderRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *StringBuilderChunkRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *StringBuilderChunkRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *StringBuilderChunkRule) OnChildContainerEnded(ctx *Context, cType DataType) {
	panic(fmt.Errorf("%v does not allow ChildContainerEnded", _this))
}
func (_this *StringBuilderChunkRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *StringBuilderChunkRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *StringBuilderChunkRule) OnPadding(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Padding", _this))
}
func (_this *StringBuilderChunkRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *StringBuilderChunkRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *StringBuilderChunkRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *StringBuilderChunkRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *StringBuilderChunkRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *StringBuilderChunkRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *StringBuilderChunkRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *StringBuilderChunkRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *StringBuilderChunkRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *StringBuilderChunkRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *StringBuilderChunkRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *StringBuilderChunkRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *StringBuilderChunkRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *StringBuilderChunkRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *StringBuilderChunkRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *StringBuilderChunkRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *StringBuilderChunkRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *StringBuilderChunkRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *StringBuilderChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	panic(fmt.Errorf("%v does not allow Array", _this))
}
func (_this *StringBuilderChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	panic(fmt.Errorf("%v does not allow StringlikeArray", _this))
}
func (_this *StringBuilderChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	panic(fmt.Errorf("%v does not allow ArrayBegin", _this))
}
func (_this *StringBuilderChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkerIDKeyableRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkerIDKeyableRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkerIDKeyableRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkerIDKeyableRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkerIDKeyableRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *MarkerIDKeyableRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MarkerIDKeyableRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *MarkerIDKeyableRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *MarkerIDKeyableRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *MarkerIDKeyableRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *MarkerIDKeyableRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkerIDKeyableRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkerIDKeyableRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkerIDKeyableRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *MarkerIDKeyableRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkerIDKeyableRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkerIDKeyableRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkerIDKeyableRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *MarkerIDKeyableRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *MarkerIDKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkerIDKeyableRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkerIDAnyTypeRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkerIDAnyTypeRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkerIDAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkerIDAnyTypeRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkerIDAnyTypeRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *MarkerIDAnyTypeRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MarkerIDAnyTypeRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *MarkerIDAnyTypeRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *MarkerIDAnyTypeRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *MarkerIDAnyTypeRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *MarkerIDAnyTypeRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkerIDAnyTypeRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkerIDAnyTypeRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkerIDAnyTypeRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *MarkerIDAnyTypeRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkerIDAnyTypeRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkerIDAnyTypeRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkerIDAnyTypeRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *MarkerIDAnyTypeRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *MarkerIDAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkerIDAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkedObjectKeyableRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkedObjectKeyableRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkedObjectKeyableRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkedObjectKeyableRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkedObjectKeyableRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *MarkedObjectKeyableRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *MarkedObjectKeyableRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *MarkedObjectKeyableRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *MarkedObjectKeyableRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *MarkedObjectKeyableRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkedObjectKeyableRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkedObjectKeyableRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkedObjectKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkedObjectKeyableRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *MarkedObjectAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ReferenceKeyableRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ReferenceKeyableRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ReferenceKeyableRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ReferenceKeyableRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ReferenceKeyableRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *ReferenceKeyableRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *ReferenceKeyableRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *ReferenceKeyableRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *ReferenceKeyableRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *ReferenceKeyableRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *ReferenceKeyableRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ReferenceKeyableRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ReferenceKeyableRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ReferenceKeyableRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *ReferenceKeyableRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ReferenceKeyableRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ReferenceKeyableRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ReferenceKeyableRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ReferenceKeyableRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ReferenceKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ReferenceKeyableRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ReferenceAnyTypeRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ReferenceAnyTypeRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ReferenceAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ReferenceAnyTypeRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ReferenceAnyTypeRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *ReferenceAnyTypeRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *ReferenceAnyTypeRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *ReferenceAnyTypeRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *ReferenceAnyTypeRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *ReferenceAnyTypeRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *ReferenceAnyTypeRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ReferenceAnyTypeRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ReferenceAnyTypeRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ReferenceAnyTypeRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *ReferenceAnyTypeRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ReferenceAnyTypeRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ReferenceAnyTypeRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ReferenceAnyTypeRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *ReferenceAnyTypeRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ReferenceAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ReferenceAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ConstantKeyableRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ConstantKeyableRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ConstantKeyableRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ConstantKeyableRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *ConstantKeyableRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *ConstantKeyableRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *ConstantKeyableRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *ConstantKeyableRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *ConstantKeyableRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *ConstantKeyableRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ConstantKeyableRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ConstantKeyableRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ConstantKeyableRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ConstantKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ConstantKeyableRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *ConstantAnyTypeRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *ConstantAnyTypeRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *ConstantAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *ConstantAnyTypeRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *ConstantAnyTypeRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *ConstantAnyTypeRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *ConstantAnyTypeRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *ConstantAnyTypeRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *ConstantAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *ConstantAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *TLReferenceRIDRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *TLReferenceRIDRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *TLReferenceRIDRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *TLReferenceRIDRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *TLReferenceRIDRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *TLReferenceRIDRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *TLReferenceRIDRule) OnInt(ctx *Context, value int64) {
	panic(fmt.Errorf("%v does not allow Int", _this))
}
func (_this *TLReferenceRIDRule) OnPositiveInt(ctx *Context, value uint64) {
	panic(fmt.Errorf("%v does not allow PositiveInt", _this))
}
func (_this *TLReferenceRIDRule) OnBigInt(ctx *Context, value *big.Int) {
	panic(fmt.Errorf("%v does not allow BigInt", _this))
}
func (_this *TLReferenceRIDRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *TLReferenceRIDRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *TLReferenceRIDRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *TLReferenceRIDRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *TLReferenceRIDRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *TLReferenceRIDRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *TLReferenceRIDRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *TLReferenceRIDRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *TLReferenceRIDRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *TLReferenceRIDRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *TLReferenceRIDRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *TLReferenceRIDRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *TLReferenceRIDRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *TLReferenceRIDRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *TLReferenceRIDRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
func (_this *RIDCatRule) OnBeginDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow BeginDocument", _this))
}
func (_this *RIDCatRule) OnEndDocument(ctx *Context) {
	panic(fmt.Errorf("%v does not allow EndDocument", _this))
}
func (_this *RIDCatRule) OnVersion(ctx *Context, version uint64) {
	panic(fmt.Errorf("%v does not allow Version", _this))
}
func (_this *RIDCatRule) OnNA(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NA", _this))
}
func (_this *RIDCatRule) OnKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow KeyableObject", _this))
}
func (_this *RIDCatRule) OnNonKeyableObject(ctx *Context) {
	panic(fmt.Errorf("%v does not allow NonKeyableObject", _this))
}
func (_this *RIDCatRule) OnFloat(ctx *Context, value float64) {
	panic(fmt.Errorf("%v does not allow Float", _this))
}
func (_this *RIDCatRule) OnBigFloat(ctx *Context, value *big.Float) {
	panic(fmt.Errorf("%v does not allow BigFloat", _this))
}
func (_this *RIDCatRule) OnDecimalFloat(ctx *Context, value compact_float.DFloat) {
	panic(fmt.Errorf("%v does not allow DecimalFloat", _this))
}
func (_this *RIDCatRule) OnBigDecimalFloat(ctx *Context, value *apd.Decimal) {
	panic(fmt.Errorf("%v does not allow BigDecimalFloat", _this))
}
func (_this *RIDCatRule) OnList(ctx *Context) {
	panic(fmt.Errorf("%v does not allow List", _this))
}
func (_this *RIDCatRule) OnMap(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Map", _this))
}
func (_this *RIDCatRule) OnMarkup(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Markup", _this))
}
func (_this *RIDCatRule) OnMetadata(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Metadata", _this))
}
func (_this *RIDCatRule) OnComment(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Comment", _this))
}
func (_this *RIDCatRule) OnEnd(ctx *Context) {
	panic(fmt.Errorf("%v does not allow End", _this))
}
func (_this *RIDCatRule) OnMarker(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Marker", _this))
}
func (_this *RIDCatRule) OnReference(ctx *Context) {
	panic(fmt.Errorf("%v does not allow Reference", _this))
}
func (_this *RIDCatRule) OnConstant(ctx *Context, name []byte, explicitValue bool) {
	panic(fmt.Errorf("%v does not allow Constant", _this))
}
func (_this *RIDCatRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	panic(fmt.Errorf("%v does not allow ArrayChunk", _this))
}
func (_this *RIDCatRule) OnArrayData(ctx *Context, data []byte) {
	panic(fmt.Errorf("%v does not allow ArrayData", _this))
}
