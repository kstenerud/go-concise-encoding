// Copyright 2022 Karl Stenerud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// Generated by github.com/kstenerud/go-concise-encoding/codegen
  // DO NOT EDIT THIS FILE. Contents will be overwritten.

package rules

import (
	"fmt"
	"strings"
	"github.com/kstenerud/go-concise-encoding/ce/events"
)

type DataType uint64

const (
	DataTypeNull DataType = 1 << iota
	DataTypeNan
	DataTypeBool
	DataTypeInt
	DataTypeFloat
	DataTypeUID
	DataTypeTime
	DataTypeList
	DataTypeMap
	DataTypeRecordType
	DataTypeRecord
	DataTypeEdge
	DataTypeNode
	DataTypeString
	DataTypeMedia
	DataTypeArrayBit
	DataTypeArrayUint8
	DataTypeArrayUint16
	DataTypeArrayUint32
	DataTypeArrayUint64
	DataTypeArrayInt8
	DataTypeArrayInt16
	DataTypeArrayInt32
	DataTypeArrayInt64
	DataTypeArrayFloat16
	DataTypeArrayFloat32
	DataTypeArrayFloat64
	DataTypeArrayUID
	DataTypeCustomText
	DataTypeCustomBinary
	DataTypeMarker
	DataTypeLocalReference
	DataTypeResourceID
	DataTypeRemoteReference
	DataTypeComment
	DataTypePadding
	DataTypeInvalid = 0x0
	AllowAny = DataTypeNull | DataTypeNan | DataTypeBool | DataTypeInt | DataTypeFloat | DataTypeUID | DataTypeTime | DataTypeList | DataTypeMap | DataTypeRecordType | DataTypeRecord | DataTypeEdge | DataTypeNode | DataTypeString | DataTypeMedia | DataTypeArrayBit | DataTypeArrayUint8 | DataTypeArrayUint16 | DataTypeArrayUint32 | DataTypeArrayUint64 | DataTypeArrayInt8 | DataTypeArrayInt16 | DataTypeArrayInt32 | DataTypeArrayInt64 | DataTypeArrayFloat16 | DataTypeArrayFloat32 | DataTypeArrayFloat64 | DataTypeArrayUID | DataTypeCustomText | DataTypeCustomBinary | DataTypeMarker | DataTypeLocalReference | DataTypeResourceID | DataTypeRemoteReference | DataTypeComment | DataTypePadding
	AllowNonNull = DataTypeNan | DataTypeBool | DataTypeInt | DataTypeFloat | DataTypeUID | DataTypeTime | DataTypeList | DataTypeMap | DataTypeRecordType | DataTypeRecord | DataTypeEdge | DataTypeNode | DataTypeString | DataTypeMedia | DataTypeArrayBit | DataTypeArrayUint8 | DataTypeArrayUint16 | DataTypeArrayUint32 | DataTypeArrayUint64 | DataTypeArrayInt8 | DataTypeArrayInt16 | DataTypeArrayInt32 | DataTypeArrayInt64 | DataTypeArrayFloat16 | DataTypeArrayFloat32 | DataTypeArrayFloat64 | DataTypeArrayUID | DataTypeCustomText | DataTypeCustomBinary | DataTypeMarker | DataTypeLocalReference | DataTypeResourceID | DataTypeRemoteReference | DataTypeComment | DataTypePadding
	AllowKeyable = DataTypeBool | DataTypeInt | DataTypeFloat | DataTypeUID | DataTypeTime | DataTypeString | DataTypeMarker | DataTypeLocalReference | DataTypeResourceID | DataTypeComment | DataTypePadding
	AllowMarkable = DataTypeNull | DataTypeNan | DataTypeBool | DataTypeInt | DataTypeFloat | DataTypeUID | DataTypeTime | DataTypeList | DataTypeMap | DataTypeRecord | DataTypeEdge | DataTypeNode | DataTypeString | DataTypeMedia | DataTypeArrayBit | DataTypeArrayUint8 | DataTypeArrayUint16 | DataTypeArrayUint32 | DataTypeArrayUint64 | DataTypeArrayInt8 | DataTypeArrayInt16 | DataTypeArrayInt32 | DataTypeArrayInt64 | DataTypeArrayFloat16 | DataTypeArrayFloat32 | DataTypeArrayFloat64 | DataTypeArrayUID | DataTypeCustomText | DataTypeCustomBinary | DataTypeResourceID | DataTypePadding
	AllowString = DataTypeString
	AllowResourceID = DataTypeResourceID
)

func (_this DataType) String() string {
	asString := ""
	if _this == 0 {
		asString = datatypeNames[_this]
	} else {
		isFirst := true
		builder := strings.Builder{}
		for i := DataType(1); i <= DataTypePadding; i <<= 1 {
			if _this&i != 0 {
				if isFirst {
					isFirst = false
				} else {
					builder.WriteString(" | ")
				}
				builder.WriteString(datatypeNames[i])
			}
		}
		asString = builder.String()
	}
	if asString == "" {
		asString = fmt.Sprintf("%d", _this)
	}
	return asString
}

var datatypeNames = map[DataType]string{

	DataTypeNull: "DataTypeNull",
	DataTypeNan: "DataTypeNan",
	DataTypeBool: "DataTypeBool",
	DataTypeInt: "DataTypeInt",
	DataTypeFloat: "DataTypeFloat",
	DataTypeUID: "DataTypeUID",
	DataTypeTime: "DataTypeTime",
	DataTypeList: "DataTypeList",
	DataTypeMap: "DataTypeMap",
	DataTypeRecordType: "DataTypeRecordType",
	DataTypeRecord: "DataTypeRecord",
	DataTypeEdge: "DataTypeEdge",
	DataTypeNode: "DataTypeNode",
	DataTypeString: "DataTypeString",
	DataTypeMedia: "DataTypeMedia",
	DataTypeArrayBit: "DataTypeArrayBit",
	DataTypeArrayUint8: "DataTypeArrayUint8",
	DataTypeArrayUint16: "DataTypeArrayUint16",
	DataTypeArrayUint32: "DataTypeArrayUint32",
	DataTypeArrayUint64: "DataTypeArrayUint64",
	DataTypeArrayInt8: "DataTypeArrayInt8",
	DataTypeArrayInt16: "DataTypeArrayInt16",
	DataTypeArrayInt32: "DataTypeArrayInt32",
	DataTypeArrayInt64: "DataTypeArrayInt64",
	DataTypeArrayFloat16: "DataTypeArrayFloat16",
	DataTypeArrayFloat32: "DataTypeArrayFloat32",
	DataTypeArrayFloat64: "DataTypeArrayFloat64",
	DataTypeArrayUID: "DataTypeArrayUID",
	DataTypeCustomText: "DataTypeCustomText",
	DataTypeCustomBinary: "DataTypeCustomBinary",
	DataTypeMarker: "DataTypeMarker",
	DataTypeLocalReference: "DataTypeLocalReference",
	DataTypeResourceID: "DataTypeResourceID",
	DataTypeRemoteReference: "DataTypeRemoteReference",
	DataTypeComment: "DataTypeComment",
	DataTypePadding: "DataTypePadding",
}
func (_this *TopLevelRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *TopLevelRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *TopLevelRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *TopLevelRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *TopLevelRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *TopLevelRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *TopLevelRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *TopLevelRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *TopLevelRule) OnMarker(ctx *Context, identifier []byte) {
	ctx.BeginMarkerAnyType(identifier, AllowAny)
}
func (_this *TopLevelRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	ctx.BeginArrayAnyType(arrayType)
}
func (_this *ListRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	/* Nothing to do */
}
func (_this *ListRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *ListRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *ListRule) OnNull(ctx *Context) {
	/* Nothing to do */
}
func (_this *ListRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	/* Nothing to do */
}
func (_this *ListRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	/* Nothing to do */
}
func (_this *ListRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *ListRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *ListRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *ListRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *ListRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *ListRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *ListRule) OnEnd(ctx *Context) {
	ctx.EndContainer(true)
}
func (_this *ListRule) OnMarker(ctx *Context, identifier []byte) {
	ctx.BeginMarkerAnyType(identifier, AllowAny)
}
func (_this *ListRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	ctx.LocalReferenceAnyType(identifier)
}
func (_this *ListRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	ctx.ValidateFullArrayAnyType(arrayType, elementCount, data)
}
func (_this *ListRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	ctx.ValidateFullArrayStringlike(arrayType, data)
}
func (_this *ListRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	ctx.BeginArrayAnyType(arrayType)
}
func (_this *MapKeyRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *MapKeyRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *MapKeyRule) OnEnd(ctx *Context) {
	ctx.EndContainer(true)
}
func (_this *MapValueRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *MapValueRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *MapValueRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *MapValueRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *MapValueRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *MapValueRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *MapValueRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *MapValueRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *MapValueRule) OnMarker(ctx *Context, identifier []byte) {
	ctx.BeginMarkerAnyType(identifier, AllowAny)
}
func (_this *MapValueRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	ctx.BeginArrayAnyType(arrayType)
}
func (_this *RecordTypeRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *RecordTypeRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *RecordRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	/* Nothing to do */
}
func (_this *RecordRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *RecordRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *RecordRule) OnNull(ctx *Context) {
	/* Nothing to do */
}
func (_this *RecordRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	/* Nothing to do */
}
func (_this *RecordRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	/* Nothing to do */
}
func (_this *RecordRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *RecordRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *RecordRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *RecordRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *RecordRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *RecordRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *RecordRule) OnEnd(ctx *Context) {
	ctx.EndContainer(true)
}
func (_this *RecordRule) OnMarker(ctx *Context, identifier []byte) {
	ctx.BeginMarkerAnyType(identifier, AllowAny)
}
func (_this *RecordRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	ctx.LocalReferenceAnyType(identifier)
}
func (_this *RecordRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	ctx.ValidateFullArrayAnyType(arrayType, elementCount, data)
}
func (_this *RecordRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	ctx.ValidateFullArrayStringlike(arrayType, data)
}
func (_this *RecordRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	ctx.BeginArrayAnyType(arrayType)
}
func (_this *MarkedObjectKeyableRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *MarkedObjectAnyTypeRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeSourceRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeSourceRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeSourceRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *EdgeSourceRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *EdgeSourceRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *EdgeSourceRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *EdgeSourceRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *EdgeSourceRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *EdgeDescriptionRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeDescriptionRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeDescriptionRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *EdgeDescriptionRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *EdgeDescriptionRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *EdgeDescriptionRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *EdgeDescriptionRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *EdgeDescriptionRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *EdgeDestinationRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	/* Nothing to do */
}
func (_this *EdgeDestinationRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeDestinationRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *EdgeDestinationRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	/* Nothing to do */
}
func (_this *EdgeDestinationRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	/* Nothing to do */
}
func (_this *EdgeDestinationRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *EdgeDestinationRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *EdgeDestinationRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *EdgeDestinationRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *EdgeDestinationRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *EdgeDestinationRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *EdgeDestinationRule) OnEnd(ctx *Context) {
	ctx.EndContainer(true)
}
func (_this *EdgeDestinationRule) OnMarker(ctx *Context, identifier []byte) {
	ctx.BeginMarkerAnyType(identifier, AllowAny)
}
func (_this *EdgeDestinationRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	ctx.LocalReferenceAnyType(identifier)
}
func (_this *EdgeDestinationRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	ctx.ValidateFullArrayAnyType(arrayType, elementCount, data)
}
func (_this *EdgeDestinationRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	ctx.ValidateFullArrayStringlike(arrayType, data)
}
func (_this *EdgeDestinationRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	ctx.BeginArrayAnyType(arrayType)
}
func (_this *NodeRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *NodeRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *NodeRule) OnList(ctx *Context) {
	ctx.BeginList()
}
func (_this *NodeRule) OnMap(ctx *Context) {
	ctx.BeginMap()
}
func (_this *NodeRule) OnRecordType(ctx *Context, identifier []byte) {
	ctx.BeginRecordType(identifier)
}
func (_this *NodeRule) OnRecord(ctx *Context, identifier []byte) {
	ctx.BeginRecord(identifier)
}
func (_this *NodeRule) OnEdge(ctx *Context) {
	ctx.BeginEdge()
}
func (_this *NodeRule) OnNode(ctx *Context) {
	ctx.BeginNode()
}
func (_this *AwaitEndRule) OnPadding(ctx *Context) {
	/* Nothing to do */
}
func (_this *AwaitEndRule) OnComment(ctx *Context) {
	/* Nothing to do */
}
func (_this *AwaitEndRule) OnEnd(ctx *Context) {
	ctx.EndContainer(true)
}
func (_this *BeginDocumentRule) OnEndDocument(ctx *Context) {
	wrongType("begin document", "end document")
}
func (_this *BeginDocumentRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("begin document", "child end")
}
func (_this *BeginDocumentRule) OnVersion(ctx *Context, version uint64) {
	wrongType("begin document", "version")
}
func (_this *BeginDocumentRule) OnPadding(ctx *Context) {
	wrongType("begin document", "padding")
}
func (_this *BeginDocumentRule) OnComment(ctx *Context) {
	wrongType("begin document", "comment")
}
func (_this *BeginDocumentRule) OnNull(ctx *Context) {
	wrongType("begin document", "Null")
}
func (_this *BeginDocumentRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("begin document", objType)
}
func (_this *BeginDocumentRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("begin document", objType)
}
func (_this *BeginDocumentRule) OnList(ctx *Context) {
	wrongType("begin document", "list")
}
func (_this *BeginDocumentRule) OnMap(ctx *Context) {
	wrongType("begin document", "map")
}
func (_this *BeginDocumentRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("begin document", "recordType")
}
func (_this *BeginDocumentRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("begin document", "record")
}
func (_this *BeginDocumentRule) OnEdge(ctx *Context) {
	wrongType("begin document", "edge")
}
func (_this *BeginDocumentRule) OnNode(ctx *Context) {
	wrongType("begin document", "node")
}
func (_this *BeginDocumentRule) OnEnd(ctx *Context) {
	wrongType("begin document", "end container")
}
func (_this *BeginDocumentRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("begin document", "marker")
}
func (_this *BeginDocumentRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("begin document", "LocalReference")
}
func (_this *BeginDocumentRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("begin document", "array")
}
func (_this *BeginDocumentRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("begin document", "array")
}
func (_this *BeginDocumentRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("begin document", "array begin")
}
func (_this *BeginDocumentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("begin document", "array chunk")
}
func (_this *BeginDocumentRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("begin document", "array data")
}
func (_this *EndDocumentRule) OnBeginDocument(ctx *Context) {
	wrongType("end document", "begin document")
}
func (_this *EndDocumentRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("end document", "child end")
}
func (_this *EndDocumentRule) OnVersion(ctx *Context, version uint64) {
	wrongType("end document", "version")
}
func (_this *EndDocumentRule) OnPadding(ctx *Context) {
	wrongType("end document", "padding")
}
func (_this *EndDocumentRule) OnComment(ctx *Context) {
	wrongType("end document", "comment")
}
func (_this *EndDocumentRule) OnNull(ctx *Context) {
	wrongType("end document", "Null")
}
func (_this *EndDocumentRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("end document", objType)
}
func (_this *EndDocumentRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("end document", objType)
}
func (_this *EndDocumentRule) OnList(ctx *Context) {
	wrongType("end document", "list")
}
func (_this *EndDocumentRule) OnMap(ctx *Context) {
	wrongType("end document", "map")
}
func (_this *EndDocumentRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("end document", "recordType")
}
func (_this *EndDocumentRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("end document", "record")
}
func (_this *EndDocumentRule) OnEdge(ctx *Context) {
	wrongType("end document", "edge")
}
func (_this *EndDocumentRule) OnNode(ctx *Context) {
	wrongType("end document", "node")
}
func (_this *EndDocumentRule) OnEnd(ctx *Context) {
	wrongType("end document", "end container")
}
func (_this *EndDocumentRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("end document", "marker")
}
func (_this *EndDocumentRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("end document", "LocalReference")
}
func (_this *EndDocumentRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("end document", "array")
}
func (_this *EndDocumentRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("end document", "array")
}
func (_this *EndDocumentRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("end document", "array begin")
}
func (_this *EndDocumentRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("end document", "array chunk")
}
func (_this *EndDocumentRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("end document", "array data")
}
func (_this *TerminalRule) OnBeginDocument(ctx *Context) {
	wrongType("terminal", "begin document")
}
func (_this *TerminalRule) OnEndDocument(ctx *Context) {
	wrongType("terminal", "end document")
}
func (_this *TerminalRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("terminal", "child end")
}
func (_this *TerminalRule) OnVersion(ctx *Context, version uint64) {
	wrongType("terminal", "version")
}
func (_this *TerminalRule) OnPadding(ctx *Context) {
	wrongType("terminal", "padding")
}
func (_this *TerminalRule) OnComment(ctx *Context) {
	wrongType("terminal", "comment")
}
func (_this *TerminalRule) OnNull(ctx *Context) {
	wrongType("terminal", "Null")
}
func (_this *TerminalRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("terminal", objType)
}
func (_this *TerminalRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("terminal", objType)
}
func (_this *TerminalRule) OnList(ctx *Context) {
	wrongType("terminal", "list")
}
func (_this *TerminalRule) OnMap(ctx *Context) {
	wrongType("terminal", "map")
}
func (_this *TerminalRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("terminal", "recordType")
}
func (_this *TerminalRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("terminal", "record")
}
func (_this *TerminalRule) OnEdge(ctx *Context) {
	wrongType("terminal", "edge")
}
func (_this *TerminalRule) OnNode(ctx *Context) {
	wrongType("terminal", "node")
}
func (_this *TerminalRule) OnEnd(ctx *Context) {
	wrongType("terminal", "end container")
}
func (_this *TerminalRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("terminal", "marker")
}
func (_this *TerminalRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("terminal", "LocalReference")
}
func (_this *TerminalRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("terminal", "array")
}
func (_this *TerminalRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("terminal", "array")
}
func (_this *TerminalRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("terminal", "array begin")
}
func (_this *TerminalRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("terminal", "array chunk")
}
func (_this *TerminalRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("terminal", "array data")
}
func (_this *VersionRule) OnBeginDocument(ctx *Context) {
	wrongType("version", "begin document")
}
func (_this *VersionRule) OnEndDocument(ctx *Context) {
	wrongType("version", "end document")
}
func (_this *VersionRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("version", "child end")
}
func (_this *VersionRule) OnPadding(ctx *Context) {
	wrongType("version", "padding")
}
func (_this *VersionRule) OnComment(ctx *Context) {
	wrongType("version", "comment")
}
func (_this *VersionRule) OnNull(ctx *Context) {
	wrongType("version", "Null")
}
func (_this *VersionRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("version", objType)
}
func (_this *VersionRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("version", objType)
}
func (_this *VersionRule) OnList(ctx *Context) {
	wrongType("version", "list")
}
func (_this *VersionRule) OnMap(ctx *Context) {
	wrongType("version", "map")
}
func (_this *VersionRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("version", "recordType")
}
func (_this *VersionRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("version", "record")
}
func (_this *VersionRule) OnEdge(ctx *Context) {
	wrongType("version", "edge")
}
func (_this *VersionRule) OnNode(ctx *Context) {
	wrongType("version", "node")
}
func (_this *VersionRule) OnEnd(ctx *Context) {
	wrongType("version", "end container")
}
func (_this *VersionRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("version", "marker")
}
func (_this *VersionRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("version", "LocalReference")
}
func (_this *VersionRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("version", "array")
}
func (_this *VersionRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("version", "array")
}
func (_this *VersionRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("version", "array begin")
}
func (_this *VersionRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("version", "array chunk")
}
func (_this *VersionRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("version", "array data")
}
func (_this *TopLevelRule) OnBeginDocument(ctx *Context) {
	wrongType("top level", "begin document")
}
func (_this *TopLevelRule) OnEndDocument(ctx *Context) {
	wrongType("top level", "end document")
}
func (_this *TopLevelRule) OnVersion(ctx *Context, version uint64) {
	wrongType("top level", "version")
}
func (_this *TopLevelRule) OnEnd(ctx *Context) {
	wrongType("top level", "end container")
}
func (_this *TopLevelRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("top level", "LocalReference")
}
func (_this *TopLevelRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("top level", "array chunk")
}
func (_this *TopLevelRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("top level", "array data")
}
func (_this *ListRule) OnBeginDocument(ctx *Context) {
	wrongType("list", "begin document")
}
func (_this *ListRule) OnEndDocument(ctx *Context) {
	wrongType("list", "end document")
}
func (_this *ListRule) OnVersion(ctx *Context, version uint64) {
	wrongType("list", "version")
}
func (_this *ListRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("list", "array chunk")
}
func (_this *ListRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("list", "array data")
}
func (_this *MapKeyRule) OnBeginDocument(ctx *Context) {
	wrongType("map key", "begin document")
}
func (_this *MapKeyRule) OnEndDocument(ctx *Context) {
	wrongType("map key", "end document")
}
func (_this *MapKeyRule) OnVersion(ctx *Context, version uint64) {
	wrongType("map key", "version")
}
func (_this *MapKeyRule) OnNull(ctx *Context) {
	wrongType("map key", "Null")
}
func (_this *MapKeyRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("map key", objType)
}
func (_this *MapKeyRule) OnList(ctx *Context) {
	wrongType("map key", "list")
}
func (_this *MapKeyRule) OnMap(ctx *Context) {
	wrongType("map key", "map")
}
func (_this *MapKeyRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("map key", "recordType")
}
func (_this *MapKeyRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("map key", "record")
}
func (_this *MapKeyRule) OnEdge(ctx *Context) {
	wrongType("map key", "edge")
}
func (_this *MapKeyRule) OnNode(ctx *Context) {
	wrongType("map key", "node")
}
func (_this *MapKeyRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("map key", "array chunk")
}
func (_this *MapKeyRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("map key", "array data")
}
func (_this *MapValueRule) OnBeginDocument(ctx *Context) {
	wrongType("map value", "begin document")
}
func (_this *MapValueRule) OnEndDocument(ctx *Context) {
	wrongType("map value", "end document")
}
func (_this *MapValueRule) OnVersion(ctx *Context, version uint64) {
	wrongType("map value", "version")
}
func (_this *MapValueRule) OnEnd(ctx *Context) {
	wrongType("map value", "end container")
}
func (_this *MapValueRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("map value", "array chunk")
}
func (_this *MapValueRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("map value", "array data")
}
func (_this *RecordTypeRule) OnBeginDocument(ctx *Context) {
	wrongType("recordType", "begin document")
}
func (_this *RecordTypeRule) OnEndDocument(ctx *Context) {
	wrongType("recordType", "end document")
}
func (_this *RecordTypeRule) OnVersion(ctx *Context, version uint64) {
	wrongType("recordType", "version")
}
func (_this *RecordTypeRule) OnNull(ctx *Context) {
	wrongType("recordType", "Null")
}
func (_this *RecordTypeRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("recordType", objType)
}
func (_this *RecordTypeRule) OnList(ctx *Context) {
	wrongType("recordType", "list")
}
func (_this *RecordTypeRule) OnMap(ctx *Context) {
	wrongType("recordType", "map")
}
func (_this *RecordTypeRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("recordType", "recordType")
}
func (_this *RecordTypeRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("recordType", "record")
}
func (_this *RecordTypeRule) OnEdge(ctx *Context) {
	wrongType("recordType", "edge")
}
func (_this *RecordTypeRule) OnNode(ctx *Context) {
	wrongType("recordType", "node")
}
func (_this *RecordTypeRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("recordType", "marker")
}
func (_this *RecordTypeRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("recordType", "LocalReference")
}
func (_this *RecordTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("recordType", "array chunk")
}
func (_this *RecordTypeRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("recordType", "array data")
}
func (_this *RecordRule) OnBeginDocument(ctx *Context) {
	wrongType("record", "begin document")
}
func (_this *RecordRule) OnEndDocument(ctx *Context) {
	wrongType("record", "end document")
}
func (_this *RecordRule) OnVersion(ctx *Context, version uint64) {
	wrongType("record", "version")
}
func (_this *RecordRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("record", "array chunk")
}
func (_this *RecordRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("record", "array data")
}
func (_this *ArrayRule) OnBeginDocument(ctx *Context) {
	wrongType("array", "begin document")
}
func (_this *ArrayRule) OnEndDocument(ctx *Context) {
	wrongType("array", "end document")
}
func (_this *ArrayRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("array", "child end")
}
func (_this *ArrayRule) OnVersion(ctx *Context, version uint64) {
	wrongType("array", "version")
}
func (_this *ArrayRule) OnPadding(ctx *Context) {
	wrongType("array", "padding")
}
func (_this *ArrayRule) OnNull(ctx *Context) {
	wrongType("array", "Null")
}
func (_this *ArrayRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("array", objType)
}
func (_this *ArrayRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("array", objType)
}
func (_this *ArrayRule) OnList(ctx *Context) {
	wrongType("array", "list")
}
func (_this *ArrayRule) OnMap(ctx *Context) {
	wrongType("array", "map")
}
func (_this *ArrayRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("array", "recordType")
}
func (_this *ArrayRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("array", "record")
}
func (_this *ArrayRule) OnEdge(ctx *Context) {
	wrongType("array", "edge")
}
func (_this *ArrayRule) OnNode(ctx *Context) {
	wrongType("array", "node")
}
func (_this *ArrayRule) OnEnd(ctx *Context) {
	wrongType("array", "end container")
}
func (_this *ArrayRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("array", "marker")
}
func (_this *ArrayRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("array", "LocalReference")
}
func (_this *ArrayRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("array", "array")
}
func (_this *ArrayRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("array", "array")
}
func (_this *ArrayRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("array", "array begin")
}
func (_this *ArrayRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("array", "array data")
}
func (_this *ArrayChunkRule) OnBeginDocument(ctx *Context) {
	wrongType("array chunk", "begin document")
}
func (_this *ArrayChunkRule) OnEndDocument(ctx *Context) {
	wrongType("array chunk", "end document")
}
func (_this *ArrayChunkRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("array chunk", "child end")
}
func (_this *ArrayChunkRule) OnVersion(ctx *Context, version uint64) {
	wrongType("array chunk", "version")
}
func (_this *ArrayChunkRule) OnPadding(ctx *Context) {
	wrongType("array chunk", "padding")
}
func (_this *ArrayChunkRule) OnComment(ctx *Context) {
	wrongType("array chunk", "comment")
}
func (_this *ArrayChunkRule) OnNull(ctx *Context) {
	wrongType("array chunk", "Null")
}
func (_this *ArrayChunkRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("array chunk", objType)
}
func (_this *ArrayChunkRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("array chunk", objType)
}
func (_this *ArrayChunkRule) OnList(ctx *Context) {
	wrongType("array chunk", "list")
}
func (_this *ArrayChunkRule) OnMap(ctx *Context) {
	wrongType("array chunk", "map")
}
func (_this *ArrayChunkRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("array chunk", "recordType")
}
func (_this *ArrayChunkRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("array chunk", "record")
}
func (_this *ArrayChunkRule) OnEdge(ctx *Context) {
	wrongType("array chunk", "edge")
}
func (_this *ArrayChunkRule) OnNode(ctx *Context) {
	wrongType("array chunk", "node")
}
func (_this *ArrayChunkRule) OnEnd(ctx *Context) {
	wrongType("array chunk", "end container")
}
func (_this *ArrayChunkRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("array chunk", "marker")
}
func (_this *ArrayChunkRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("array chunk", "LocalReference")
}
func (_this *ArrayChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("array chunk", "array")
}
func (_this *ArrayChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("array chunk", "array")
}
func (_this *ArrayChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("array chunk", "array begin")
}
func (_this *ArrayChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("array chunk", "array chunk")
}
func (_this *StringRule) OnBeginDocument(ctx *Context) {
	wrongType("string", "begin document")
}
func (_this *StringRule) OnEndDocument(ctx *Context) {
	wrongType("string", "end document")
}
func (_this *StringRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("string", "child end")
}
func (_this *StringRule) OnVersion(ctx *Context, version uint64) {
	wrongType("string", "version")
}
func (_this *StringRule) OnPadding(ctx *Context) {
	wrongType("string", "padding")
}
func (_this *StringRule) OnComment(ctx *Context) {
	wrongType("string", "comment")
}
func (_this *StringRule) OnNull(ctx *Context) {
	wrongType("string", "Null")
}
func (_this *StringRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("string", objType)
}
func (_this *StringRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("string", objType)
}
func (_this *StringRule) OnList(ctx *Context) {
	wrongType("string", "list")
}
func (_this *StringRule) OnMap(ctx *Context) {
	wrongType("string", "map")
}
func (_this *StringRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("string", "recordType")
}
func (_this *StringRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("string", "record")
}
func (_this *StringRule) OnEdge(ctx *Context) {
	wrongType("string", "edge")
}
func (_this *StringRule) OnNode(ctx *Context) {
	wrongType("string", "node")
}
func (_this *StringRule) OnEnd(ctx *Context) {
	wrongType("string", "end container")
}
func (_this *StringRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("string", "marker")
}
func (_this *StringRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("string", "LocalReference")
}
func (_this *StringRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("string", "array")
}
func (_this *StringRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("string", "array")
}
func (_this *StringRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("string", "array begin")
}
func (_this *StringRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("string", "array data")
}
func (_this *StringChunkRule) OnBeginDocument(ctx *Context) {
	wrongType("string chunk", "begin document")
}
func (_this *StringChunkRule) OnEndDocument(ctx *Context) {
	wrongType("string chunk", "end document")
}
func (_this *StringChunkRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("string chunk", "child end")
}
func (_this *StringChunkRule) OnVersion(ctx *Context, version uint64) {
	wrongType("string chunk", "version")
}
func (_this *StringChunkRule) OnPadding(ctx *Context) {
	wrongType("string chunk", "padding")
}
func (_this *StringChunkRule) OnComment(ctx *Context) {
	wrongType("string chunk", "comment")
}
func (_this *StringChunkRule) OnNull(ctx *Context) {
	wrongType("string chunk", "Null")
}
func (_this *StringChunkRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("string chunk", objType)
}
func (_this *StringChunkRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("string chunk", objType)
}
func (_this *StringChunkRule) OnList(ctx *Context) {
	wrongType("string chunk", "list")
}
func (_this *StringChunkRule) OnMap(ctx *Context) {
	wrongType("string chunk", "map")
}
func (_this *StringChunkRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("string chunk", "recordType")
}
func (_this *StringChunkRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("string chunk", "record")
}
func (_this *StringChunkRule) OnEdge(ctx *Context) {
	wrongType("string chunk", "edge")
}
func (_this *StringChunkRule) OnNode(ctx *Context) {
	wrongType("string chunk", "node")
}
func (_this *StringChunkRule) OnEnd(ctx *Context) {
	wrongType("string chunk", "end container")
}
func (_this *StringChunkRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("string chunk", "marker")
}
func (_this *StringChunkRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("string chunk", "LocalReference")
}
func (_this *StringChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("string chunk", "array")
}
func (_this *StringChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("string chunk", "array")
}
func (_this *StringChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("string chunk", "array begin")
}
func (_this *StringChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("string chunk", "array chunk")
}
func (_this *StringBuilderRule) OnBeginDocument(ctx *Context) {
	wrongType("string", "begin document")
}
func (_this *StringBuilderRule) OnEndDocument(ctx *Context) {
	wrongType("string", "end document")
}
func (_this *StringBuilderRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("string", "child end")
}
func (_this *StringBuilderRule) OnVersion(ctx *Context, version uint64) {
	wrongType("string", "version")
}
func (_this *StringBuilderRule) OnPadding(ctx *Context) {
	wrongType("string", "padding")
}
func (_this *StringBuilderRule) OnComment(ctx *Context) {
	wrongType("string", "comment")
}
func (_this *StringBuilderRule) OnNull(ctx *Context) {
	wrongType("string", "Null")
}
func (_this *StringBuilderRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("string", objType)
}
func (_this *StringBuilderRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("string", objType)
}
func (_this *StringBuilderRule) OnList(ctx *Context) {
	wrongType("string", "list")
}
func (_this *StringBuilderRule) OnMap(ctx *Context) {
	wrongType("string", "map")
}
func (_this *StringBuilderRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("string", "recordType")
}
func (_this *StringBuilderRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("string", "record")
}
func (_this *StringBuilderRule) OnEdge(ctx *Context) {
	wrongType("string", "edge")
}
func (_this *StringBuilderRule) OnNode(ctx *Context) {
	wrongType("string", "node")
}
func (_this *StringBuilderRule) OnEnd(ctx *Context) {
	wrongType("string", "end container")
}
func (_this *StringBuilderRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("string", "marker")
}
func (_this *StringBuilderRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("string", "LocalReference")
}
func (_this *StringBuilderRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("string", "array")
}
func (_this *StringBuilderRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("string", "array")
}
func (_this *StringBuilderRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("string", "array begin")
}
func (_this *StringBuilderRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("string", "array data")
}
func (_this *StringBuilderChunkRule) OnBeginDocument(ctx *Context) {
	wrongType("string chunk", "begin document")
}
func (_this *StringBuilderChunkRule) OnEndDocument(ctx *Context) {
	wrongType("string chunk", "end document")
}
func (_this *StringBuilderChunkRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("string chunk", "child end")
}
func (_this *StringBuilderChunkRule) OnVersion(ctx *Context, version uint64) {
	wrongType("string chunk", "version")
}
func (_this *StringBuilderChunkRule) OnPadding(ctx *Context) {
	wrongType("string chunk", "padding")
}
func (_this *StringBuilderChunkRule) OnComment(ctx *Context) {
	wrongType("string chunk", "comment")
}
func (_this *StringBuilderChunkRule) OnNull(ctx *Context) {
	wrongType("string chunk", "Null")
}
func (_this *StringBuilderChunkRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("string chunk", objType)
}
func (_this *StringBuilderChunkRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("string chunk", objType)
}
func (_this *StringBuilderChunkRule) OnList(ctx *Context) {
	wrongType("string chunk", "list")
}
func (_this *StringBuilderChunkRule) OnMap(ctx *Context) {
	wrongType("string chunk", "map")
}
func (_this *StringBuilderChunkRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("string chunk", "recordType")
}
func (_this *StringBuilderChunkRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("string chunk", "record")
}
func (_this *StringBuilderChunkRule) OnEdge(ctx *Context) {
	wrongType("string chunk", "edge")
}
func (_this *StringBuilderChunkRule) OnNode(ctx *Context) {
	wrongType("string chunk", "node")
}
func (_this *StringBuilderChunkRule) OnEnd(ctx *Context) {
	wrongType("string chunk", "end container")
}
func (_this *StringBuilderChunkRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("string chunk", "marker")
}
func (_this *StringBuilderChunkRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("string chunk", "LocalReference")
}
func (_this *StringBuilderChunkRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("string chunk", "array")
}
func (_this *StringBuilderChunkRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("string chunk", "array")
}
func (_this *StringBuilderChunkRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("string chunk", "array begin")
}
func (_this *StringBuilderChunkRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("string chunk", "array chunk")
}
func (_this *MarkedObjectKeyableRule) OnBeginDocument(ctx *Context) {
	wrongType("marked object", "begin document")
}
func (_this *MarkedObjectKeyableRule) OnEndDocument(ctx *Context) {
	wrongType("marked object", "end document")
}
func (_this *MarkedObjectKeyableRule) OnVersion(ctx *Context, version uint64) {
	wrongType("marked object", "version")
}
func (_this *MarkedObjectKeyableRule) OnComment(ctx *Context) {
	wrongType("marked object", "comment")
}
func (_this *MarkedObjectKeyableRule) OnNull(ctx *Context) {
	wrongType("marked object", "Null")
}
func (_this *MarkedObjectKeyableRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("marked object", objType)
}
func (_this *MarkedObjectKeyableRule) OnList(ctx *Context) {
	wrongType("marked object", "list")
}
func (_this *MarkedObjectKeyableRule) OnMap(ctx *Context) {
	wrongType("marked object", "map")
}
func (_this *MarkedObjectKeyableRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("marked object", "recordType")
}
func (_this *MarkedObjectKeyableRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("marked object", "record")
}
func (_this *MarkedObjectKeyableRule) OnEdge(ctx *Context) {
	wrongType("marked object", "edge")
}
func (_this *MarkedObjectKeyableRule) OnNode(ctx *Context) {
	wrongType("marked object", "node")
}
func (_this *MarkedObjectKeyableRule) OnEnd(ctx *Context) {
	wrongType("marked object", "end container")
}
func (_this *MarkedObjectKeyableRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("marked object", "marker")
}
func (_this *MarkedObjectKeyableRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("marked object", "LocalReference")
}
func (_this *MarkedObjectKeyableRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("marked object", "array chunk")
}
func (_this *MarkedObjectKeyableRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("marked object", "array data")
}
func (_this *MarkedObjectAnyTypeRule) OnBeginDocument(ctx *Context) {
	wrongType("marked object", "begin document")
}
func (_this *MarkedObjectAnyTypeRule) OnEndDocument(ctx *Context) {
	wrongType("marked object", "end document")
}
func (_this *MarkedObjectAnyTypeRule) OnVersion(ctx *Context, version uint64) {
	wrongType("marked object", "version")
}
func (_this *MarkedObjectAnyTypeRule) OnComment(ctx *Context) {
	wrongType("marked object", "comment")
}
func (_this *MarkedObjectAnyTypeRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("marked object", "recordType")
}
func (_this *MarkedObjectAnyTypeRule) OnEnd(ctx *Context) {
	wrongType("marked object", "end container")
}
func (_this *MarkedObjectAnyTypeRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("marked object", "marker")
}
func (_this *MarkedObjectAnyTypeRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("marked object", "LocalReference")
}
func (_this *MarkedObjectAnyTypeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("marked object", "array chunk")
}
func (_this *MarkedObjectAnyTypeRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("marked object", "array data")
}
func (_this *EdgeSourceRule) OnBeginDocument(ctx *Context) {
	wrongType("edge source", "begin document")
}
func (_this *EdgeSourceRule) OnEndDocument(ctx *Context) {
	wrongType("edge source", "end document")
}
func (_this *EdgeSourceRule) OnVersion(ctx *Context, version uint64) {
	wrongType("edge source", "version")
}
func (_this *EdgeSourceRule) OnNull(ctx *Context) {
	wrongType("edge source", "Null")
}
func (_this *EdgeSourceRule) OnEnd(ctx *Context) {
	wrongType("edge source", "end container")
}
func (_this *EdgeSourceRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("edge source", "array chunk")
}
func (_this *EdgeSourceRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("edge source", "array data")
}
func (_this *EdgeDescriptionRule) OnBeginDocument(ctx *Context) {
	wrongType("edge description", "begin document")
}
func (_this *EdgeDescriptionRule) OnEndDocument(ctx *Context) {
	wrongType("edge description", "end document")
}
func (_this *EdgeDescriptionRule) OnVersion(ctx *Context, version uint64) {
	wrongType("edge description", "version")
}
func (_this *EdgeDescriptionRule) OnEnd(ctx *Context) {
	wrongType("edge description", "end container")
}
func (_this *EdgeDescriptionRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("edge description", "array chunk")
}
func (_this *EdgeDescriptionRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("edge description", "array data")
}
func (_this *EdgeDestinationRule) OnBeginDocument(ctx *Context) {
	wrongType("edge destination", "begin document")
}
func (_this *EdgeDestinationRule) OnEndDocument(ctx *Context) {
	wrongType("edge destination", "end document")
}
func (_this *EdgeDestinationRule) OnVersion(ctx *Context, version uint64) {
	wrongType("edge destination", "version")
}
func (_this *EdgeDestinationRule) OnNull(ctx *Context) {
	wrongType("edge destination", "Null")
}
func (_this *EdgeDestinationRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("edge destination", "array chunk")
}
func (_this *EdgeDestinationRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("edge destination", "array data")
}
func (_this *NodeRule) OnBeginDocument(ctx *Context) {
	wrongType("node", "begin document")
}
func (_this *NodeRule) OnEndDocument(ctx *Context) {
	wrongType("node", "end document")
}
func (_this *NodeRule) OnVersion(ctx *Context, version uint64) {
	wrongType("node", "version")
}
func (_this *NodeRule) OnEnd(ctx *Context) {
	wrongType("node", "end container")
}
func (_this *NodeRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("node", "array chunk")
}
func (_this *NodeRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("node", "array data")
}
func (_this *AwaitEndRule) OnBeginDocument(ctx *Context) {
	wrongType("awaitEnd", "begin document")
}
func (_this *AwaitEndRule) OnEndDocument(ctx *Context) {
	wrongType("awaitEnd", "end document")
}
func (_this *AwaitEndRule) OnChildContainerEnded(ctx *Context, containerType DataType) {
	wrongType("awaitEnd", "child end")
}
func (_this *AwaitEndRule) OnVersion(ctx *Context, version uint64) {
	wrongType("awaitEnd", "version")
}
func (_this *AwaitEndRule) OnNull(ctx *Context) {
	wrongType("awaitEnd", "Null")
}
func (_this *AwaitEndRule) OnKeyableObject(ctx *Context, objType DataType, key interface{}) {
	wrongType("awaitEnd", objType)
}
func (_this *AwaitEndRule) OnNonKeyableObject(ctx *Context, objType DataType) {
	wrongType("awaitEnd", objType)
}
func (_this *AwaitEndRule) OnList(ctx *Context) {
	wrongType("awaitEnd", "list")
}
func (_this *AwaitEndRule) OnMap(ctx *Context) {
	wrongType("awaitEnd", "map")
}
func (_this *AwaitEndRule) OnRecordType(ctx *Context, identifier []byte) {
	wrongType("awaitEnd", "recordType")
}
func (_this *AwaitEndRule) OnRecord(ctx *Context, identifier []byte) {
	wrongType("awaitEnd", "record")
}
func (_this *AwaitEndRule) OnEdge(ctx *Context) {
	wrongType("awaitEnd", "edge")
}
func (_this *AwaitEndRule) OnNode(ctx *Context) {
	wrongType("awaitEnd", "node")
}
func (_this *AwaitEndRule) OnMarker(ctx *Context, identifier []byte) {
	wrongType("awaitEnd", "marker")
}
func (_this *AwaitEndRule) OnReferenceLocal(ctx *Context, identifier []byte) {
	wrongType("awaitEnd", "LocalReference")
}
func (_this *AwaitEndRule) OnArray(ctx *Context, arrayType events.ArrayType, elementCount uint64, data []uint8) {
	wrongType("awaitEnd", "array")
}
func (_this *AwaitEndRule) OnStringlikeArray(ctx *Context, arrayType events.ArrayType, data string) {
	wrongType("awaitEnd", "array")
}
func (_this *AwaitEndRule) OnArrayBegin(ctx *Context, arrayType events.ArrayType) {
	wrongType("awaitEnd", "array begin")
}
func (_this *AwaitEndRule) OnArrayChunk(ctx *Context, length uint64, moreChunksFollow bool) {
	wrongType("awaitEnd", "array chunk")
}
func (_this *AwaitEndRule) OnArrayData(ctx *Context, data []byte) {
	wrongType("awaitEnd", "array data")
}
