// Copyright 2019 Karl Stenerud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

package common

import (
	"fmt"
	"io"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/kstenerud/go-concise-encoding/ce"
	"github.com/kstenerud/go-concise-encoding/configuration"
	"github.com/kstenerud/go-concise-encoding/test/test_runner"
	"github.com/kstenerud/go-concise-encoding/version"
)

func GenerateGoFile(filePath string, imports []*Import,
	writeFunc func(writer io.Writer)) {
	filePath = generateFilePath(filePath, "go")
	_, packageName := filepath.Split(path.Dir(filePath))

	defer func() {
		if e := recover(); e != nil {
			switch err := e.(type) {
			case error:
				panic(fmt.Errorf("error while generating %v: %w", filePath, err))
			default:
				panic(fmt.Errorf("error while generating %v: %v", filePath, err))
			}
		}
	}()

	writer, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	PanicIfError(err, "could not open %s", filePath)
	defer writer.Close()

	_, err = fmt.Fprint(writer, golangHeader)
	PanicIfError(err, "")

	_, err = fmt.Fprintf(writer, "package %v\n\n", packageName)
	PanicIfError(err, "")

	if len(imports) > 0 {
		_, err = fmt.Fprintf(writer, "import (\n")
		PanicIfError(err, "")
		for _, imp := range imports {
			_, err = fmt.Fprintf(writer, "\t%v\n", imp)
			PanicIfError(err, "")
		}
		_, err = fmt.Fprintf(writer, ")\n\n")
		PanicIfError(err, "")
	}
	writeFunc(writer)
}

func GenerateTestFile(filePath string, tests ...*test_runner.UnitTest) {
	filePath = generateFilePath(filePath, "cte")

	defer func() {
		if e := recover(); e != nil {
			switch err := e.(type) {
			case error:
				panic(fmt.Errorf("error while generating %v: %w", filePath, err))
			default:
				panic(fmt.Errorf("error while generating %v: %v", filePath, err))
			}
		}
	}()

	ceVersion := version.ConciseEncodingVersion
	suite := &test_runner.TestSuite{
		Type: test_runner.TestSuiteType{
			Identifier: "ce-test",
			Version:    1,
		},
		CEVersion: &ceVersion,
		Tests:     tests,
	}

	config := configuration.DefaultCTEMarshalerConfiguration()
	config.Iterator.FieldNameStyle = configuration.FieldNameSnakeCase
	config.Encoder.DefaultNumericFormats.Array.Uint8 = configuration.CTEEncodingFormatHexadecimalZeroFilled
	config.DebugPanics = true
	document, err := ce.MarshalToCTEDocument(suite, &config)
	if err != nil {
		panic(err)
	}

	comment := "// GENERATED FILE, DO NOT EDIT!\n// Generated by https://github.com/kstenerud/go-concise-encoding/tree/master/codegen\n"
	commentedDocument := make([]byte, 0, len(document)+len(comment))
	commentedDocument = append(commentedDocument, document[:3]...)
	commentedDocument = append(commentedDocument, comment...)
	commentedDocument = append(commentedDocument, document[3:]...)

	writer, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	PanicIfError(err, "could not open %s", filePath)
	defer writer.Close()
	writer.Write(commentedDocument)
}

func PanicIfError(err error, format string, args ...interface{}) {
	if err != nil {
		if len(format) > 0 {
			msg := fmt.Sprintf(format, args...)
			panic(fmt.Errorf("%v: %w", msg, err))
		} else {
			panic(err)
		}
	}
}

type Import struct {
	As     string
	Import string
}

func (_this *Import) String() string {
	if len(_this.As) != 0 {
		return fmt.Sprintf("%v \"%v\"", _this.As, _this.Import)
	} else {
		return fmt.Sprintf("\"%v\"", _this.Import)
	}
}

func generateFilePath(filePath string, extension string) string {
	extension = "." + extension
	if !strings.HasSuffix(filePath, extension) {
		filePath = path.Join(filePath, defaultGeneratedCodeFileName+extension)
	}
	ensureDirExists(path.Dir(filePath))
	return filePath
}

func ensureDirExists(dirPath string) {
	if _, err := os.Stat(dirPath); os.IsNotExist(err) {
		err = os.MkdirAll(dirPath, 0o644)
		PanicIfError(err, "could not create directory %s", dirPath)
	}
}

const defaultGeneratedCodeFileName = "generated-do-not-edit"

var golangHeader = `// Copyright 2022 Karl Stenerud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// Generated by github.com/kstenerud/go-concise-encoding/codegen
  // DO NOT EDIT THIS FILE. Contents will be overwritten.

`
