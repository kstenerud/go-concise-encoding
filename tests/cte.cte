c0
// Basic CTE test cases
{
    "options" = {
        "failFast" = false  // If true, halt tests on first error
    }

    "ceTests" = [

        // ====================================================================

        {
            "name" = "something"
            "cte" = "\.%%%%
c0 |u8x /* foo */ 1 2 3|
            %%%%"
            "events" = ["v 0" "au8b" "com t  foo " "ac 3 f" "ad 1 2 3"]
            "from"   = ["t"]
            "to"     = ["e"]
        }

        // ====================================================================

    ]

    // ========================================================================
    // ========================================================================

    "cteTests" = [
        {
            "name" = "Version specifier"
            "decodeMustSucceed" = [
                {"source"="c0 1"           "events"=["v 0" "n 1"]}
                {"source"="c0\n1"          "events"=["v 0" "n 1"]}
                {"source"="c0\t1"          "events"=["v 0" "n 1"]}
                {"source"="c0\r\n1"        "events"=["v 0" "n 1"]}
                {"source"="\r\n\t  c0 1"   "events"=["v 0" "n 1"]}
                {"source"="c0 \r\n\t   1"  "events"=["v 0" "n 1"]}
            ]
            "decodeMustFail" = [
                "c0{}"  // Missing whitespace
                "c2 1"  // Future version number
                "c-1 1" // Bad version number
                "ca 1"  // Bad version number
                "d0 1"  // Bad first char
            ]
        }

        // ====================================================================

        {
            "name" = "Null"
            "decodeMustSucceed" = [
                {"source"="c0 null"  "events"=["v 0" "null"]}
                {"source"="c0 Null"  "events"=["v 0" "null"]}
                {"source"="c0 null"  "events"=["v 0" "null"]}
            ]
            "decodeMustFail" = [
                "c0 nulled"
                "c0 -null"
            ]
        }

        // ====================================================================

        {
            "name" = "Boolean"
            "decodeMustSucceed" = [
                {"source"="c0 true"   "events"=["v 0" "tt"]}
                {"source"="c0 True"   "events"=["v 0" "tt"]}
                {"source"="c0 TRUE"   "events"=["v 0" "tt"]}
                {"source"="c0 false"  "events"=["v 0" "ff"]}
                {"source"="c0 False"  "events"=["v 0" "ff"]}
                {"source"="c0 FALSE"  "events"=["v 0" "ff"]}
            ]
            "decodeMustFail" = [
                "c0 t"
                "c0 truer"
                "c0 -true"
                "c0 f"
                "c0 falser"
                "c0 -false"
            ]
        }

        // ====================================================================

        {
            "name" = "Decimal Integer"
            "decodeMustSucceed" = [
                {"source"="c0 0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0"                "events"=["v 0" "n -0"]}
                {"source"="c0 123"               "events"=["v 0" "n 123"]}
                {"source"="c0 9412504234235366"  "events"=["v 0" "n 9412504234235366"]}
                {"source"="c0 -49523"            "events"=["v 0" "n -49523"]}
                {"source"="c0 10000000000000000000000000000"        "events"=["v 0" "n 10000000000000000000000000000"]}
                {"source"="c0 -10000000000000000000000000000"       "events"=["v 0" "n -10000000000000000000000000000"]}
                {"source"="c0 100_00_0_00000000000_00000000_000_0"  "events"=["v 0" "n 10000000000000000000000000000"]}
                {"source"="c0 -4_9_5__2___3"     "events"=["v 0" "n -49523"]}
            ]
            "decodeMustFail" = [
                "c0 1f"  // Non-decimal digit
                "c0 -1f" // Non-decimal digit
                "c0 _1"  // Whitespace is not between digits
                "c0 1_"  // Whitespace is not between digits
                "c0 -_1" // Whitespace is not between digits
                "c0 -1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Binary Integer"
            "decodeMustSucceed" = [
                {"source"="c0 0b0"              "events"=["v 0" "n 0"]}
                {"source"="c0 -0b0"             "events"=["v 0" "n -0"]}
                {"source"="c0 0b1"              "events"=["v 0" "n 1"]}
                {"source"="c0 -0b101"           "events"=["v 0" "n -5"]}
                {"source"="c0 0b0010100"        "events"=["v 0" "n 20"]}
                {"source"="c0 -0b1_0_0"         "events"=["v 0" "n -4"]}
                {"source"="c0 0b0_0_1__010__1"  "events"=["v 0" "n 21"]}
                {
                    "source" = "c0 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    "events" = ["v 0" "n 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
                {
                    "source" = "c0 -0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    "events" = ["v 0" "n -0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
                {
                    "source" = "c0 0b100000000000000_000000000000_000000000000000000000000_000000000000000000000_0000000000000000000000000000000000000000_0"
                    "events" = ["v 0" "n 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
                {
                    "source" = "c0 -0b100000000000000_000000000000_000000000000000000000000_000000000000000000000_0000000000000000000000000000000000000000_0"
                    "events" = ["v 0" "n -0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
            ]
            "decodeMustFail" = [
                "c0 0b12"  // Non-binary digit
                "c0 -0b12" // Non-binary digit
                "c0 _0b1"  // Bad whitespace placement
                "c0 -_0b1" // Bad whitespace placement
                "c0 0_b1"  // Bad whitespace placement
                "c0 -0_b1" // Bad whitespace placement
                "c0 0b_1"  // Whitespace is not between digits
                "c0 0b1_"  // Whitespace is not between digits
                "c0 -0b_1" // Whitespace is not between digits
                "c0 -0b1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Octal Integer"
            "decodeMustSucceed" = [
                {"source"="c0 0o0"         "events"=["v 0" "n 0"]}
                {"source"="c0 -0o0"        "events"=["v 0" "n -0"]}
                {"source"="c0 0o1"         "events"=["v 0" "n 1"]}
                {"source"="c0 0o7"         "events"=["v 0" "n 7"]}
                {"source"="c0 -0o51"       "events"=["v 0" "n -0o51"]}
                {"source"="c0 0o644"       "events"=["v 0" "n 0o644"]}
                {"source"="c0 -0o777"      "events"=["v 0" "n -0o777"]}
                {"source"="c0 0o1000000000000000000000000000000000000000000000"  "events"=["v 0" "n 0o1000000000000000000000000000000000000000000000"]}
                {"source"="c0 -0o1000000000000000000000000000000000000000000000"  "events"=["v 0" "n -0o1000000000000000000000000000000000000000000000"]}
                {"source"="c0 0o1000000_0000000000_00000000000_000000000000_000000"  "events"=["v 0" "n 0o1000000000000000000000000000000000000000000000"]}
                {"source"="c0 0o7__7___7"  "events"=["v 0" "n 0o777"]}
            ]
            "decodeMustFail" = [
                "c0 0o19"  // Non-octal digit
                "c0 -0o19" // Non-octal digit
                "c0 _0o1"  // Bad whitespace placement
                "c0 -_0o1" // Bad whitespace placement
                "c0 0_o1"  // Bad whitespace placement
                "c0 -0_o1" // Bad whitespace placement
                "c0 0o_1"  // Whitespace is not between digits
                "c0 0o1_"  // Whitespace is not between digits
                "c0 -0o_1" // Whitespace is not between digits
                "c0 -0o1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Hexadecimal Integer"
            "decodeMustSucceed" = [
                {"source"="c0 0x0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0x1"                  "events"=["v 0" "n 1"]}
                {"source"="c0 0xf"                  "events"=["v 0" "n 15"]}
                {"source"="c0 -0xd4"                "events"=["v 0" "n -0xd4"]}
                {"source"="c0 0xfedcba9876543210"   "events"=["v 0" "n 0xfedcba9876543210"]}
                {"source"="c0 -0xFEDCBA9876543210"  "events"=["v 0" "n -0xfedcba9876543210"]}
                {"source"="c0 0x1000000000000000000000000000000000000000000000"  "events"=["v 0" "n 0x1000000000000000000000000000000000000000000000"]}
                {"source"="c0 -0x1000000000000000000000000000000000000000000000"  "events"=["v 0" "n -0x1000000000000000000000000000000000000000000000"]}
                {"source"="c0 0x100000000_000000_00000_000__000_0000000000000_0000000"  "events"=["v 0" "n 0x1000000000000000000000000000000000000000000000"]}
                {"source"="c0 0x8_8__5_a_f__d"  "events"=["v 0" "n 0x885afd"]}
            ]
            "decodeMustFail" = [
                "c0 0x1g"  // Non-hex digit
                "c0 -0x1g" // Non-hex digit
                "c0 _0x1"  // Bad whitespace placement
                "c0 -_0x1" // Bad whitespace placement
                "c0 0_x1"  // Bad whitespace placement
                "c0 -0_x1" // Bad whitespace placement
                "c0 0x_1"  // Whitespace is not between digits
                "c0 0x1_"  // Whitespace is not between digits
                "c0 -0x_1" // Whitespace is not between digits
                "c0 -0x1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Decimal Float"
            "decodeMustSucceed" = [
                {"source"="c0 0.0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0.0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0,0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0,0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 1,1"                  "events"=["v 0" "n 1.1"]}
                {"source"="c0 0.1"                  "events"=["v 0" "n 0.1"]}
                {"source"="c0 0,1"                  "events"=["v 0" "n 0.1"]}
                {"source"="c0 4.7234634"            "events"=["v 0" "n 4.7234634"]}
                {"source"="c0 -9.6534634727167134523472782456223624582452671345134745694657786776"  "events"=["v 0" "n -9.6534634727167134523472782456223624582452671345134745694657786776"]}
                {"source"="c0 -9,6534634727167134523472782456223624582452671345134745694657786776"  "events"=["v 0" "n -9.6534634727167134523472782456223624582452671345134745694657786776"]}

                {"source"="c0 inf"                  "events"=["v 0" "n inf"]}
                {"source"="c0 -inf"                 "events"=["v 0" "n -inf"]}
                {"source"="c0 nan"                  "events"=["v 0" "n nan"]}
                {"source"="c0 snan"                 "events"=["v 0" "n snan"]}

                {"source"="c0 1.53476e80"           "events"=["v 0" "n 1.53476e80"]}
                {"source"="c0 1.53476e93983456"     "events"=["v 0" "n 1.53476e93983456"]}
                {"source"="c0 1.53476e+93983456"    "events"=["v 0" "n 1.53476e93983456"]}
                {"source"="c0 1.53476e-93983456"    "events"=["v 0" "n 1.53476e-93983456"]}
                {"source"="c0 1.53476E93983456"     "events"=["v 0" "n 1.53476e93983456"]}
                {"source"="c0 1.53476E+93983456"    "events"=["v 0" "n 1.53476e93983456"]}
                {"source"="c0 1.53476E-93983456"    "events"=["v 0" "n 1.53476e-93983456"]}
                {"source"="c0 -1.53476e93983456"    "events"=["v 0" "n -1.53476e93983456"]}
                {"source"="c0 -1.53476e+93983456"   "events"=["v 0" "n -1.53476e93983456"]}
                {"source"="c0 -1.53476e-93983456"   "events"=["v 0" "n -1.53476e-93983456"]}
                {"source"="c0 -1.53476E93983456"    "events"=["v 0" "n -1.53476e93983456"]}
                {"source"="c0 -1.53476E+93983456"   "events"=["v 0" "n -1.53476e93983456"]}
                {"source"="c0 -1.53476E-93983456"   "events"=["v 0" "n -1.53476e-93983456"]}
                {"source"="c0 -1,53476E-93983456"   "events"=["v 0" "n -1.53476e-93983456"]}

                {"source"="c0 1e80"           "events"=["v 0" "n 1e80"]}
                {"source"="c0 1E80"           "events"=["v 0" "n 1E80"]}
                {"source"="c0 -1e80"          "events"=["v 0" "n -1e80"]}
                {"source"="c0 -1E80"          "events"=["v 0" "n -1E80"]}
                {"source"="c0 1e+80"           "events"=["v 0" "n 1e80"]}
                {"source"="c0 1E+80"           "events"=["v 0" "n 1E80"]}
                {"source"="c0 -1e+80"           "events"=["v 0" "n -1e80"]}
                {"source"="c0 -1E+80"           "events"=["v 0" "n -1E80"]}
                {"source"="c0 1e-80"           "events"=["v 0" "n 1e-80"]}
                {"source"="c0 1E-80"           "events"=["v 0" "n 1E-80"]}
                {"source"="c0 -1e-80"           "events"=["v 0" "n -1e-80"]}
                {"source"="c0 -1E-80"           "events"=["v 0" "n -1E-80"]}

                {"source"="c0 0.1500000000000000000000000000000000000000000000000001e+10000"   "events"=["v 0" "n 0.1500000000000000000000000000000000000000000000000001e+10000"]}
                {"source"="c0 0.1500000000000000000000000000000000000000000000000001e-10000"   "events"=["v 0" "n 0.1500000000000000000000000000000000000000000000000001e-10000"]}
                {"source"="c0 -0.1500000000000000000000000000000000000000000000000001e+10000"  "events"=["v 0" "n -0.1500000000000000000000000000000000000000000000000001e+10000"]}
                {"source"="c0 -0.1500000000000000000000000000000000000000000000000001e-10000"  "events"=["v 0" "n -0.1500000000000000000000000000000000000000000000000001e-10000"]}
                {"source"="c0 -0,1500000000000000000000000000000000000000000000000001e-10000"  "events"=["v 0" "n -0.1500000000000000000000000000000000000000000000000001e-10000"]}
            ]
            "decodeMustFail" = [
                "c0 1."      // Missing right digit
                "c0 1,"      // Missing right digit
                "c0 .1"      // Missing left digit
                "c0 ,1"      // Missing left digit
                "c0 _1.1"    // Bad whitespace placement
                "c0 1_.1"    // Bad whitespace placement
                "c0 1._1"    // Bad whitespace placement
                "c0 1.1_"    // Bad whitespace placement
                "c0 _1,1"    // Bad whitespace placement
                "c0 1_,1"    // Bad whitespace placement
                "c0 1,_1"    // Bad whitespace placement
                "c0 1,1_"    // Bad whitespace placement
                "c0 1.1.1"   // Too many radices
                "c0 1,1.1"   // Too many radices
                "c0 1.1,1"   // Too many radices
                "c0 1,1,1"   // Too many radices
                "c0 1.1e1e2" // Too many exponent markers
                "c0 1,1e1e2" // Too many exponent markers
                "c0 1.a"     // Not a digit
                "c0 1,a"     // Not a digit
            ]
        }

        // ====================================================================

        {
            "name" = "Hexadecimal Float"
            "decodeMustSucceed" = [
                {"source"="c0 0x0.0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0.0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0x0,0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0,0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0x1,1"                  "events"=["v 0" "n 0x1.1p0"]}
                {"source"="c0 0x0.1"                  "events"=["v 0" "n 0x0.1p0"]}
                {"source"="c0 0x0,1"                  "events"=["v 0" "n 0x0.1p0"]}
                {"source"="c0 0x4.7f3cc34"            "events"=["v 0" "n 0x4.7f3cc34p0"]}
                {"source"="c0 -0x1.65346e47aa16713452c47278245e22362458d4526713a513474c694657786776"  "events"=["v 0" "n -0x1.65346e47aa16713452c47278245e22362458d4526713a513474c694657786776p0"]}
                {"source"="c0 -0xf,65346e47aa16713452c47278245e22362458d4526713a513474c694657786776"  "events"=["v 0" "n -0xf.65346e47aa16713452c47278245e22362458d4526713a513474c694657786776p0"]}

                {"source"="c0 0x0.0p0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0.0p0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0x0.0p+0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0.0p+0"                "events"=["v 0" "n -0"]}
                {"source"="c0 0x0.0p-0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0.0p-0"                "events"=["v 0" "n -0"]}
                {"source"="c0 0xf.1p10"                 "events"=["v 0" "n 0xf.1p10"]}
                {"source"="c0 -0xf.1p10"                "events"=["v 0" "n -0xf.1p10"]}
                {"source"="c0 0xf.1p+10"                "events"=["v 0" "n 0xf.1p10"]}
                {"source"="c0 -0xf.1p+10"               "events"=["v 0" "n -0xf.1p10"]}
                {"source"="c0 0xf.1p-10"                "events"=["v 0" "n 0xf.1p-10"]}
                {"source"="c0 -0xf.1p-10"               "events"=["v 0" "n -0xf.1p-10"]}

                {"source"="c0 0x0p0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0p0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0x0p+0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0p+0"                "events"=["v 0" "n -0"]}
                {"source"="c0 0x0p-0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0x0p-0"                "events"=["v 0" "n -0"]}
                {"source"="c0 0xfp10"                 "events"=["v 0" "n 0xfp10"]}
                {"source"="c0 -0xfp10"                "events"=["v 0" "n -0xfp10"]}
                {"source"="c0 0xfp+10"                "events"=["v 0" "n 0xfp10"]}
                {"source"="c0 -0xfp+10"               "events"=["v 0" "n -0xfp10"]}
                {"source"="c0 0xfp-10"                "events"=["v 0" "n 0xfp-10"]}
                {"source"="c0 -0xfp-10"               "events"=["v 0" "n -0xfp-10"]}

                {"source"="c0 0X0P0"                  "events"=["v 0" "n 0"]}
                {"source"="c0 -0X0P0"                 "events"=["v 0" "n -0"]}
                {"source"="c0 0X0P+0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0X0P+0"                "events"=["v 0" "n -0"]}
                {"source"="c0 0X0P-0"                 "events"=["v 0" "n 0"]}
                {"source"="c0 -0X0P-0"                "events"=["v 0" "n -0"]}
                {"source"="c0 0XFP10"                 "events"=["v 0" "n 0xfp10"]}
                {"source"="c0 -0XFP10"                "events"=["v 0" "n -0xfp10"]}
                {"source"="c0 0XFP+10"                "events"=["v 0" "n 0xfp10"]}
                {"source"="c0 -0XFP+10"               "events"=["v 0" "n -0xfp10"]}
                {"source"="c0 0XFP-10"                "events"=["v 0" "n 0xfp-10"]}
                {"source"="c0 -0XFP-10"               "events"=["v 0" "n -0xfp-10"]}

                {"source"="c0 0xc.4_45__3p8"            "events"=["v 0" "n 0xc.4453p8"]}

                // Coefficient too big for float64
                {"source"="c0 0x1.54fffe2ac00592375b427ap100" "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap100"]}
                {"source"="c0 -0x1.54fffe2ac00592375b427ap100" "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap100"]}
                {"source"="c0 0x1.54fffe2ac00592375b427ap-100" "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap-100"]}
                {"source"="c0 -0x1.54fffe2ac00592375b427ap-100" "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap-100"]}

                // Exponent too big for float64
                {"source"="c0 0x1.8p10000"             "events"=["v 0" "n 0x1.8p10000"]}
                {"source"="c0 -0x1.8p10000"            "events"=["v 0" "n -0x1.8p10000"]}
                {"source"="c0 0x1.8p-10000"            "events"=["v 0" "n 0x1.8p-10000"]}
                {"source"="c0 -0x1.8p-10000"           "events"=["v 0" "n -0x1.8p-10000"]}

                // Everything too big for float64
                {"source"="c0 0x1.54fffe2ac00592375b427ap10000"    "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap10000"]}
                {"source"="c0 -0x1.54fffe2ac00592375b427ap10000"   "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap10000"]}
                {"source"="c0 0x1.54fffe2ac00592375b427ap-10000"   "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap-10000"]}
                {"source"="c0 -0x1.54fffe2ac00592375b427ap-10000"  "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap-10000"]}
            ]
            "decodeMustFail" = [
                "c0 0x1."      // Missing right digit
                "c0 0x1,"      // Missing right digit
                "c0 0x.1"      // Missing left digit
                "c0 0x,1"      // Missing left digit
                "c0 _0x1.1"    // Bad whitespace placement
                "c0 0x1_.1"    // Bad whitespace placement
                "c0 0x1._1"    // Bad whitespace placement
                "c0 0x1.1_"    // Bad whitespace placement
                "c0 _0x1,1"    // Bad whitespace placement
                "c0 0x1_,1"    // Bad whitespace placement
                "c0 0x1,_1"    // Bad whitespace placement
                "c0 0x1,1_"    // Bad whitespace placement
                "c0 0x_1.1"    // Bad whitespace placement
                "c0 0_x1.1"    // Bad whitespace placement
                "c0 0x1.1.1"   // Too many radices
                "c0 0x1,1.1"   // Too many radices
                "c0 0x1.1,1"   // Too many radices
                "c0 0x1,1,1"   // Too many radices
                "c0 0x1.1p1p2" // Too many exponent markers
                "c0 0x1,1p1p2" // Too many exponent markers
                "c0 0x1.l"     // Not a digit
                "c0 0x1,l"     // Not a digit
            ]
        }

        // ====================================================================

        {
            "name" = "UID"
            "decodeMustSucceed" = [
                {"source"="c0 00000000-0000-0000-0000-000000000000"  "events"=["v 0" "uid 00000000-0000-0000-0000-000000000000"]}
                {"source"="c0 123456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 123456af-0000-0000-0000-000000000000"]}
                {"source"="c0 223456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 223456af-0000-0000-0000-000000000000"]}
                {"source"="c0 323456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 323456af-0000-0000-0000-000000000000"]}
                {"source"="c0 423456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 423456af-0000-0000-0000-000000000000"]}
                {"source"="c0 523456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 523456af-0000-0000-0000-000000000000"]}
                {"source"="c0 623456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 623456af-0000-0000-0000-000000000000"]}
                {"source"="c0 723456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 723456af-0000-0000-0000-000000000000"]}
                {"source"="c0 823456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 823456af-0000-0000-0000-000000000000"]}
                {"source"="c0 923456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid 923456af-0000-0000-0000-000000000000"]}
                {"source"="c0 a23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid a23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 b23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid b23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 c23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid c23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 d23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid d23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 e23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid e23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 f23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid f23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 A23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid a23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 B23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid b23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 C23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid c23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 D23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid d23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 E23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid e23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 F23456af-0000-0000-0000-000000000000"  "events"=["v 0" "uid f23456af-0000-0000-0000-000000000000"]}
                {"source"="c0 fbdcba98-7654-3210-aaaa-bbbbbbbbbbbb"  "events"=["v 0" "uid fbdcba98-7654-3210-aaaa-bbbbbbbbbbbb"]}
            ]
            "decodeMustFail" = [
                "fbdcba98-7654-3210-aaaa-bbbbbbbbbbb"    // Too short
                "fbdcba98-7654-3210-aaaa-bbbbbbbbbbbbb"  // Too long
                "fbdcba987654-3210-aaaa-bbbbbbbbbbbb"    // Malformed
                "fbdcba98-76543210-aaaa-bbbbbbbbbbbb"    // Malformed
                "fbdcba98-7654-3210aaaa-bbbbbbbbbbbb"    // Malformed
                "fbdcba98-7654-3210-aaaabbbbbbbbbbbb"    // Malformed
                "fbdcba9876543210aaaabbbbbbbbbbbb"       // Malformed
                "fbdcba98-7654-3210-aaaa-bbbbbbbbgbbb"   // Bad chars
                "-fbdcba98-7654-3210-aaaa-bbbbbbbbbbbb"  // Negative UID is not a thing
            ]
        }

        // ====================================================================

        {
            "name" = "Date"
            "decodeMustSucceed" = [
                {"source"="c0 2000-01-01"      "events"=["v 0" "t 2000-01-01"]}
                {"source"="c0 -2000-01-01"     "events"=["v 0" "t -2000-01-01"]}
                {"source"="c0 2000-1-1"        "events"=["v 0" "t 2000-01-01"]}
                {"source"="c0 9412351-12-31"   "events"=["v 0" "t 9412351-12-31"]}
                {"source"="c0 -9412351-12-31"  "events"=["v 0" "t -9412351-12-31"]}
                {"source"="c0 1-01-01"         "events"=["v 0" "t 1-01-01"]}
                {"source"="c0 -1-01-01"        "events"=["v 0" "t -1-01-01"]}
            ]
            "decodeMustFail" = [
                "c0 0-01-01"     // Year 0 is invalid
                "c0 -0-01-01"    // Year -0 is invalid
                "c0 2000-0-01"   // Month 0 is invalid
                "c0 2000-13-01"  // Month 13 is invalid
                "c0 2000-01-0"   // Day 0 is invalid
                "c0 2000-01-32"  // Day 32 is invalid
                "c0 2000-001-01" // Too many digits
                "c0 2000-01-001" // Too many digits
                "c0 2000-01-0a"  // Bad digits
                "c0 2000-0b-01"  // Bad digits
                "c0 2000-01-"    // Incomplete
                "c0 2000-01"     // Incomplete
            ]
        }

        // ====================================================================

        {
            "name" = "Time"
            "decodeMustSucceed" = [
                {"source"="c0 0:00:00"                          "events"=["v 0" "t 0:00:00"]}
                {"source"="c0 00:00:00"                         "events"=["v 0" "t 0:00:00"]}
                {"source"="c0 1:45:00"                          "events"=["v 0" "t 1:45:00"]}
                {"source"="c0 01:45:00"                         "events"=["v 0" "t 1:45:00"]}
                {"source"="c0 23:59:59"                         "events"=["v 0" "t 23:59:59"]}
                {"source"="c0 23:59:60"                         "events"=["v 0" "t 23:59:60"]}

                {"source"="c0 0:00:00.000000000"                "events"=["v 0" "t 0:00:00"]}
                {"source"="c0 0:00:00.000000001"                "events"=["v 0" "t 0:00:00.000000001"]}
                {"source"="c0 0:00:00.00000001"                 "events"=["v 0" "t 0:00:00.00000001"]}
                {"source"="c0 0:00:00.0000001"                  "events"=["v 0" "t 0:00:00.0000001"]}
                {"source"="c0 0:00:00.000001"                   "events"=["v 0" "t 0:00:00.000001"]}
                {"source"="c0 0:00:00.00001"                    "events"=["v 0" "t 0:00:00.00001"]}
                {"source"="c0 0:00:00.0001"                     "events"=["v 0" "t 0:00:00.0001"]}
                {"source"="c0 0:00:00.001"                      "events"=["v 0" "t 0:00:00.001"]}
                {"source"="c0 0:00:00.01"                       "events"=["v 0" "t 0:00:00.01"]}
                {"source"="c0 0:00:00.1"                        "events"=["v 0" "t 0:00:00.1"]}
                {"source"="c0 0:00:00.100000000"                "events"=["v 0" "t 0:00:00.1"]}
                {"source"="c0 23:59:60.000000000"               "events"=["v 0" "t 23:59:60"]}
                {"source"="c0 23:59:60,000000000"               "events"=["v 0" "t 23:59:60"]}
                {"source"="c0 23:59:60.999999999"               "events"=["v 0" "t 23:59:60.999999999"]}
                {"source"="c0 23:59:60,999999999"               "events"=["v 0" "t 23:59:60.999999999"]}

                {"source"="c0 23:59:59.101"                     "events"=["v 0" "t 23:59:59.101"]}

                {"source"="c0 10:00:01.93/America/Los_Angeles"  "events"=["v 0" "t 10:00:01.93/America/Los_Angeles"]}
                {
                    "source" = "c0 20:00:00/Etc/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"
                    "events" = ["v 0" "t 20:00:00/Etc/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"]
                }

                {"source"="c0 10:00:01.93/89.92/1.10"           "events"=["v 0" "t 10:00:01.93/89.92/1.10"]}
                {"source"="c0 10:00:01.93/89,90/1.1"            "events"=["v 0" "t 10:00:01.93/89.90/1.1"]}
                {"source"="c0 10:00:01.93/89.9/1,10"            "events"=["v 0" "t 10:00:01.93/89.9/1.10"]}
                {"source"="c0 10:00:01.93/0/0"                  "events"=["v 0" "t 10:00:01.93/0/0"]}
                {"source"="c0 10:00:01.93/00/00.00"             "events"=["v 0" "t 10:00:01.93/0/0"]}
                {"source"="c0 10:00:01.93/1/1"                  "events"=["v 0" "t 10:00:01.93/1/1"]}
                {"source"="c0 10:00:01.93/90/-180"              "events"=["v 0" "t 10:00:01.93/90/-180"]}
                {"source"="c0 10:00:01.93/-90/180"              "events"=["v 0" "t 10:00:01.93/-90/180"]}
                {"source"="c0 10:00:01.93+0000"                 "events"=["v 0" "t 10:00:01.93"]}
                {"source"="c0 10:00:01.93+0001"                 "events"=["v 0" "t 10:00:01.93+0001"]}
                {"source"="c0 10:00:01.93-0030"                 "events"=["v 0" "t 10:00:01.93-0030"]}
                {"source"="c0 10:00:01.93-1259"                 "events"=["v 0" "t 10:00:01.93-1259"]}
                {"source"="c0 10:00:01.93-2359"                 "events"=["v 0" "t 10:00:01.93-2359"]}
                {"source"="c0 10:00:01.93+2359"                 "events"=["v 0" "t 10:00:01.93+2359"]}
            ]
            "decodeMustFail" = [
                "c0 012:00:00"           // Too many hour digits
                "c0 12:000:00"           // Too many minute digits
                "c0 12:00:000"           // Too many second digits
                "c0 12:00:00.0000000000" // Too many subsecond digits
                "c0 12:00:00,0000000000" // Too many subsecond digits

                "c0 24:00:00"            // Hour too high
                "c0 23:60:00"            // Minute too high
                "c0 23:00:61"            // Second too high

                "c0 2a:00:00"            // Invalid hour digit
                "c0 20:0a:00"            // Invalid minute digit
                "c0 20:00:0a"            // Invalid second digit
                "c0 20:00:00.00a"        // Invalid subsecond digit
                "c0 20:00:00,00a"        // Invalid subsecond digit

                "c0 20:00:00/"           // Missing timezone after marker

                "c0 20:00:00/Etc/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234" // Max area/location length is 127

                "c0 20:00:00/0/"         // Missing longitude
                "c0 20:00:00/90.01/0"    // Latitude max is 90
                "c0 20:00:00/-90.01/0"   // Latitude min is -90
                "c0 20:00:00/0/180.01"   // Longitude max is 180
                "c0 20:00:00/0/-180.01"  // Longitude min is -180
                "c0 20:00:00/0/0.011"    // Too much precision
                "c0 20:00:00/0.011/0"    // Too much precision
                "c0 20:00:00/0a/0"       // Invalid character
                "c0 20:00:00/0/0a"       // Invalid character

                "c0 20:00:00+0"          // Not enough digits
                "c0 20:00:00-0"          // Not enough digits
                "c0 20:00:00+00"         // Not enough digits
                "c0 20:00:00-00"         // Not enough digits
                "c0 20:00:00+000"        // Not enough digits
                "c0 20:00:00-000"        // Not enough digits
                "c0 20:00:00+00000"      // Too many digits
                "c0 20:00:00-00000"      // Too many digits
                "c0 20:00:00+2400"       // Too high
                "c0 20:00:00-2400"       // Too low
                "c0 20:00:00+230a"       // Invalid digits
                "c0 20:00:00-230a"       // Invalid digits
            ]
        }


        // ====================================================================

        {
            "name" = "Timestamp"
            "decodeMustSucceed" = [
                {"source"="c0 2000-01-01/9:31:44.901554/Z"                 "events"=["v 0" "t 2000-01-01/9:31:44.901554/Z"]}
                {"source"="c0 02000-01-01/9:31:44.901554/Z"                "events"=["v 0" "t 2000-01-01/9:31:44.901554/Z"]}
                {"source"="c0 -02000-01-01/9:31:44.901554/Z"               "events"=["v 0" "t -2000-01-01/9:31:44.901554/Z"]}
                {"source"="c0 2020-01-15/13:41:00.000599"                  "events"=["v 0" "t 2020-01-15/13:41:00.000599"]}
                {"source"="c0 2020-01-15/10:00:01.93/89.92/1.10"           "events"=["v 0" "t 2020-01-15/10:00:01.93/89.92/1.10"]}
                {"source"="c0 2020-01-15/10:00:01.93/89.92/-1.10"          "events"=["v 0" "t 2020-01-15/10:00:01.93/89.92/-1.10"]}
                {"source"="c0 2020-01-15/10:00:01.93/-89.92/1.10"          "events"=["v 0" "t 2020-01-15/10:00:01.93/-89.92/1.10"]}
                {"source"="c0 2020-01-15/10:00:01.93/-89.92/-1.10"         "events"=["v 0" "t 2020-01-15/10:00:01.93/-89.92/-1.10"]}
                {"source"="c0 2000-01-01/9:31:44.901554212/Europe/Prague"  "events"=["v 0" "t 2000-01-01/9:31:44.901554212/Europe/Prague"]}
                {"source"="c0 2000-01-01/9:31:44.9+0100"                   "events"=["v 0" "t 2000-01-01/9:31:44.9+0100"]}
            ]
            "decodeMustFail" = [
                "c0 0-01-01/9:31:44.901554"            // Year 0 is invalid
                "c0 0000-01-01/9:31:44.901554"         // Year 0 is invalid
                "c0 2000-00-01/9:31:44.901554"         // Month 0 is invalid
                "c0 2000-13-01/9:31:44.901554"         // Month 13 is invalid
                "c0 2000-01-00/9:31:44.901554"         // Day 0 is invalid
                "c0 2000-01-32/9:31:44.901554"         // Day 32 is invalid
                "c0 2000-01-01/24:31:44.901554"        // Hour 24 is invalid
                "c0 2000-01-01/9:60:44.901554"         // Minute 60 is invalid
                "c0 2000-01-01/9:31:61.901554"         // Second 61 is invalid
                "c0 2000-01-01/9:31:44.-901554"        // Subseconds cannot be negative
                "c0 2000-01-01/9:31:44.9015549343"     // Subseconds too long
                "c0 2000-01-01/9:31:44.901554/91/0"    // Latitude 91 is invalid
                "c0 2000-01-01/9:31:44.901554/-91/0"   // Latitude -91 is invalid
                "c0 2000-01-01/9:31:44.901554/0/181"   // Longitude 181 is invalid
                "c0 2000-01-01/9:31:44.901554/0/-181"  // Longitude -181 is invalid
                "c0 2000-01-01/9:31:44.901554+2400"    // Offset 2400 is invalid
                "c0 2000-01-01/9:31:44.901554-2400"    // Offset -2400 is invalid
            ]
        }

        // ====================================================================

        {
            "name" = "String"
            "decodeMustSucceed" = [
                {"source"="\.~ c0 "test test"~"            "events"=["v 0" "s test test"]}
                {"source"="\.~ c0 ""~"                     "events"=["v 0" "s "]}               // Empty string
                {"source"="\.~ c0 "test/*test"~"           "events"=["v 0" "s test/*test"]}     // Comment initiator inside a string
                {"source"="\.~ c0 "test*/test"~"           "events"=["v 0" "s test*/test"]}     // Comment terminator inside a string
                {"source"="\.~ c0 "test\ttest"~"           "events"=["v 0" "s test\19test"]}    // Escaped tab
                {"source"="\.~ c0 "test\rtest"~"           "events"=["v 0" "s test\1dtest"]}    // Escaped CR
                {"source"="\.~ c0 "test\"test"~"           "events"=["v 0" "s \.~ test"test~"]} // Escaped quote
                {"source"="\.~ c0 "test\\test"~"           "events"=["v 0" "s \.~ test\test~"]} // Escaped backslash
                {"source"="\.~ c0 "test\/test"~"           "events"=["v 0" "s \.~ test/test~"]} // Escaped slash
                {"source"="\.~ c0 "test\*test"~"           "events"=["v 0" "s \.~ test*test~"]} // Escaped star
                {"source"="\.~ c0 "test\<test"~"           "events"=["v 0" "s \.~ test<test~"]} // Escaped lt
                {"source"="\.~ c0 "test\>test"~"           "events"=["v 0" "s \.~ test>test~"]} // Escaped gt
                {"source"="\.~ c0 "test\|test"~"           "events"=["v 0" "s \.~ test|test~"]} // Escaped pipe
                {"source"="\.~ c0 "test\_test"~"           "events"=["v 0" "s test\2a0test"]}   // Escaped non-breaking space
                {"source"="\.~ c0 "test\-test"~"           "events"=["v 0" "s test\2adtest"]}   // Escaped soft hyphen
                {"source"="\.~ c0 "test\1atest"~"          "events"=["v 0" "s test\ntest"]}     // Escaped 1-digit codepoint
                {"source"="\.~ c0 "test\2f7test"~"         "events"=["v 0" "s test÷test"]}      // Escaped 2-digit codepoint
                {"source"="\.~ c0 "test\317dtest"~"        "events"=["v 0" "s testŽtest"]}      // Escaped 3-digit codepoint
                {"source"="\.~ c0 "test\42021test"~"       "events"=["v 0" "s test‡test"]}      // Escaped 4-digit codepoint
                {"source"="\.~ c0 "test\51f43atest"~"      "events"=["v 0" "s test🐺test"]}     // Escaped 5-digit codepoint
                {"source"="\.~ c0 "test\6000020test"~"     "events"=["v 0" "s test test"]}      // Escaped 6-digit codepoint
                {"source"="\.~ c0 "test\70000020test"~"    "events"=["v 0" "s test test"]}      // Escaped 7-digit codepoint
                {"source"="\.~ c0 "test\800000020test"~"   "events"=["v 0" "s test test"]}      // Escaped 8-digit codepoint
                {"source"="\.~ c0 "test\9000000020test"~"  "events"=["v 0" "s test test"]}      // Escaped 9-digit codepoint
                {"source"="\.~ c0 "test\ntest"~"           "events"=["v 0" "s \.~ test
test~"]}  // Escaped newline
                {"source"="\.~ c0 "test\
test"~"  "events"=["v 0" "s testtest"]}  // Continuation
            ]
            "decodeMustFail" = [
                "\.~ c0 "test\1gtest"~"    // Invalid codepoint digit
                "\.~ c0 "test\xtest"~"     // Invalid escape character
                "\.~ c0 "test test~"       // Unterminated quotes
                "\.~ c0 test test~"        // Missing quotes
                "\.~ c0 "test\"~"          // Unterminated escape
                "\.~ c0 "test\1"~"         // Unterminated codepoint
                "\.~ c0 "test\21"~"        // Unterminated codepoint
                "\.~ c0 "test\301"~"       // Unterminated codepoint
                "\.~ c0 "test\4001"~"      // Unterminated codepoint
                "\.~ c0 "test\50001"~"     // Unterminated codepoint
                "\.~ c0 "test\600001"~"    // Unterminated codepoint
                "\.~ c0 "test\7000001"~"   // Unterminated codepoint
                "\.~ c0 "test\80000001"~"  // Unterminated codepoint
                "\.~ c0 "test\900000001"~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            // Resource IDs have the same capabilities and restrictions as strings.
            "name" = "Resource ID"
            "decodeMustSucceed" = [
                {"source"="\.~ c0 @"http://x.com/a/b#1"~"   "events"=["v 0" "rid http://x.com/a/b#1"]}
                {"source"="\.~ c0 @""~"                     "events"=["v 0" "rid "]}               // Empty string
                {"source"="\.~ c0 @"test/*test"~"           "events"=["v 0" "rid test/*test"]}     // Comment initiator inside a string
                {"source"="\.~ c0 @"test*/test"~"           "events"=["v 0" "rid test*/test"]}     // Comment terminator inside a string
                {"source"="\.~ c0 @"test\ttest"~"           "events"=["v 0" "rid test\19test"]}    // Escaped tab
                {"source"="\.~ c0 @"test\rtest"~"           "events"=["v 0" "rid test\1dtest"]}    // Escaped CR
                {"source"="\.~ c0 @"test\"test"~"           "events"=["v 0" "rid \.~ test"test~"]} // Escaped quote
                {"source"="\.~ c0 @"test\\test"~"           "events"=["v 0" "rid \.~ test\test~"]} // Escaped backslash
                {"source"="\.~ c0 @"test\/test"~"           "events"=["v 0" "rid \.~ test/test~"]} // Escaped slash
                {"source"="\.~ c0 @"test\*test"~"           "events"=["v 0" "rid \.~ test*test~"]} // Escaped star
                {"source"="\.~ c0 @"test\<test"~"           "events"=["v 0" "rid \.~ test<test~"]} // Escaped lt
                {"source"="\.~ c0 @"test\>test"~"           "events"=["v 0" "rid \.~ test>test~"]} // Escaped gt
                {"source"="\.~ c0 @"test\|test"~"           "events"=["v 0" "rid \.~ test|test~"]} // Escaped pipe
                {"source"="\.~ c0 @"test\_test"~"           "events"=["v 0" "rid test\2a0test"]}   // Escaped non-breaking space
                {"source"="\.~ c0 @"test\-test"~"           "events"=["v 0" "rid test\2adtest"]}   // Escaped soft hyphen
                {"source"="\.~ c0 @"test\1atest"~"          "events"=["v 0" "rid test\ntest"]}     // Escaped 1-digit codepoint
                {"source"="\.~ c0 @"test\2f7test"~"         "events"=["v 0" "rid test÷test"]}      // Escaped 2-digit codepoint
                {"source"="\.~ c0 @"test\317dtest"~"        "events"=["v 0" "rid testŽtest"]}      // Escaped 3-digit codepoint
                {"source"="\.~ c0 @"test\42021test"~"       "events"=["v 0" "rid test‡test"]}      // Escaped 4-digit codepoint
                {"source"="\.~ c0 @"test\51f43atest"~"      "events"=["v 0" "rid test🐺test"]}     // Escaped 5-digit codepoint
                {"source"="\.~ c0 @"test\6000020test"~"     "events"=["v 0" "rid test test"]}      // Escaped 6-digit codepoint
                {"source"="\.~ c0 @"test\70000020test"~"    "events"=["v 0" "rid test test"]}      // Escaped 7-digit codepoint
                {"source"="\.~ c0 @"test\800000020test"~"   "events"=["v 0" "rid test test"]}      // Escaped 8-digit codepoint
                {"source"="\.~ c0 @"test\9000000020test"~"  "events"=["v 0" "rid test test"]}      // Escaped 9-digit codepoint
                {"source"="\.~ c0 @"test\ntest"~"           "events"=["v 0" "rid \.~ test
test~"]}  // Escaped newline
                {"source"="\.~ c0 @"test\
test"~"  "events"=["v 0" "rid testtest"]}  // Continuation
            ]
            "decodeMustFail" = [
                "\.~ c0 @"test\1gtest"~"    // Invalid codepoint digit
                "\.~ c0 @"test\xtest"~"     // Invalid escape character
                "\.~ c0 @"test test~"       // Unterminated quotes
                "\.~ c0 @test test~"        // Missing quotes
                "\.~ c0 @"test\"~"          // Unterminated escape
                "\.~ c0 @"test\1"~"         // Unterminated codepoint
                "\.~ c0 @"test\21"~"        // Unterminated codepoint
                "\.~ c0 @"test\301"~"       // Unterminated codepoint
                "\.~ c0 @"test\4001"~"      // Unterminated codepoint
                "\.~ c0 @"test\50001"~"     // Unterminated codepoint
                "\.~ c0 @"test\600001"~"    // Unterminated codepoint
                "\.~ c0 @"test\7000001"~"   // Unterminated codepoint
                "\.~ c0 @"test\80000001"~"  // Unterminated codepoint
                "\.~ c0 @"test\900000001"~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            // Custom text has the same capabilities and restrictions as strings.
            "name" = "Custom Text"
            "decodeMustSucceed" = [
                {"source"="\.~ c0 |ct something(123)|~"       "events"=["v 0" "ct something(123)"]}
                {"source"="\.~ c0 |ct |~"                     "events"=["v 0" "ct "]}               // Empty string
                {"source"="\.~ c0 |ct test/*test|~"           "events"=["v 0" "ct test/*test"]}     // Comment initiator inside a string
                {"source"="\.~ c0 |ct test*/test|~"           "events"=["v 0" "ct test*/test"]}     // Comment terminator inside a string
                {"source"="\.~ c0 |ct test\ttest|~"           "events"=["v 0" "ct test\19test"]}    // Escaped tab
                {"source"="\.~ c0 |ct test\rtest|~"           "events"=["v 0" "ct test\1dtest"]}    // Escaped CR
                {"source"="\.~ c0 |ct test\"test|~"           "events"=["v 0" "ct \.~ test"test~"]} // Escaped quote
                {"source"="\.~ c0 |ct test\\test|~"           "events"=["v 0" "ct \.~ test\test~"]} // Escaped backslash
                {"source"="\.~ c0 |ct test\/test|~"           "events"=["v 0" "ct \.~ test/test~"]} // Escaped slash
                {"source"="\.~ c0 |ct test\*test|~"           "events"=["v 0" "ct \.~ test*test~"]} // Escaped star
                {"source"="\.~ c0 |ct test\<test|~"           "events"=["v 0" "ct \.~ test<test~"]} // Escaped lt
                {"source"="\.~ c0 |ct test\>test|~"           "events"=["v 0" "ct \.~ test>test~"]} // Escaped gt
                {"source"="\.~ c0 |ct test\|test|~"           "events"=["v 0" "ct \.~ test|test~"]} // Escaped pipe
                {"source"="\.~ c0 |ct test\_test|~"           "events"=["v 0" "ct test\2a0test"]}   // Escaped non-breaking space
                {"source"="\.~ c0 |ct test\-test|~"           "events"=["v 0" "ct test\2adtest"]}   // Escaped soft hyphen
                {"source"="\.~ c0 |ct test\1atest|~"          "events"=["v 0" "ct test\ntest"]}     // Escaped 1-digit codepoint
                {"source"="\.~ c0 |ct test\2f7test|~"         "events"=["v 0" "ct test÷test"]}      // Escaped 2-digit codepoint
                {"source"="\.~ c0 |ct test\317dtest|~"        "events"=["v 0" "ct testŽtest"]}      // Escaped 3-digit codepoint
                {"source"="\.~ c0 |ct test\42021test|~"       "events"=["v 0" "ct test‡test"]}      // Escaped 4-digit codepoint
                {"source"="\.~ c0 |ct test\51f43atest|~"      "events"=["v 0" "ct test🐺test"]}     // Escaped 5-digit codepoint
                {"source"="\.~ c0 |ct test\6000020test|~"     "events"=["v 0" "ct test test"]}      // Escaped 6-digit codepoint
                {"source"="\.~ c0 |ct test\70000020test|~"    "events"=["v 0" "ct test test"]}      // Escaped 7-digit codepoint
                {"source"="\.~ c0 |ct test\800000020test|~"   "events"=["v 0" "ct test test"]}      // Escaped 8-digit codepoint
                {"source"="\.~ c0 |ct test\9000000020test|~"  "events"=["v 0" "ct test test"]}      // Escaped 9-digit codepoint
                {"source"="\.~ c0 |ct test\ntest|~"           "events"=["v 0" "ct \.~ test
test~"]}  // Escaped newline
                {"source"="\.~ c0 |ct test\
test|~"  "events"=["v 0" "ct testtest"]}  // Continuation
            ]
            "decodeMustFail" = [
                "\.~ c0 |ct test\1gtest|~"    // Invalid codepoint digit
                "\.~ c0 |ct test\xtest|~"     // Invalid escape character
                "\.~ c0 |ct test test~"       // Unterminated
                "\.~ c0 test test~"           // Missing bars
                "\.~ c0 |ct test\|~"          // Unterminated escape
                "\.~ c0 |ct test\1|~"         // Unterminated codepoint
                "\.~ c0 |ct test\21|~"        // Unterminated codepoint
                "\.~ c0 |ct test\301|~"       // Unterminated codepoint
                "\.~ c0 |ct test\4001|~"      // Unterminated codepoint
                "\.~ c0 |ct test\50001|~"     // Unterminated codepoint
                "\.~ c0 |ct test\600001|~"    // Unterminated codepoint
                "\.~ c0 |ct test\7000001|~"   // Unterminated codepoint
                "\.~ c0 |ct test\80000001|~"  // Unterminated codepoint
                "\.~ c0 |ct test\900000001|~" // Unterminated codepoint
            ]
        }

        // ====================================================================

    ]
}
