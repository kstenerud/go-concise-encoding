c0
// ==============
// CTE test cases
// ==============
{
    "options" = {
        "failFast" = false  // If true, halt tests on first error
    }

    // ========================================================================
    // ========================================================================

    "cteTests" = [
        {
            "name" = "Version specifier"
            "encode" = [
                {"events"=["v 0" "n 1"]  "document"="c0\n1"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 1"           "events"=["v 0" "n 1"]}
                {"document"="C0 1"           "events"=["v 0" "n 1"]}
                {"document"="c0\n1"          "events"=["v 0" "n 1"]}
                {"document"="C0\n1"          "events"=["v 0" "n 1"]}
                {"document"="c0\t1"          "events"=["v 0" "n 1"]}
                {"document"="C0\t1"          "events"=["v 0" "n 1"]}
                {"document"="c0\r\n1"        "events"=["v 0" "n 1"]}
                {"document"="C0\r\n1"        "events"=["v 0" "n 1"]}
                {"document"="\r\n\t  c0 1"   "events"=["v 0" "n 1"]}
                {"document"="\r\n\t  C0 1"   "events"=["v 0" "n 1"]}
                {"document"="c0 \r\n\t   1"  "events"=["v 0" "n 1"]}
                {"document"="C0 \r\n\t   1"  "events"=["v 0" "n 1"]}
            ]
            "decodeMustFail" = [
                "c0{}"  // Missing whitespace
                "c2 1"  // Future version number
                "c-1 1" // Bad version number
                "ca 1"  // Bad version number
                "d0 1"  // Bad first char
            ]
        }

        // ====================================================================

        {
            "name" = "Null"
            "encode" = [
                {"events"=["v 0" "null"]  "document"="c0\nnull"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 null"  "events"=["v 0" "null"]}
                {"document"="c0 Null"  "events"=["v 0" "null"]}
                {"document"="c0 null"  "events"=["v 0" "null"]}
            ]
            "decodeMustFail" = [
                "c0 nulled"
                "c0 -null"
            ]
        }

        // ====================================================================

        {
            "name" = "Boolean"
            "encode" = [
                {"events"=["v 0" "b true"]   "document"="c0\ntrue"}
                {"events"=["v 0" "b false"]  "document"="c0\nfalse"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 true"   "events"=["v 0" "b true"]}
                {"document"="c0 True"   "events"=["v 0" "b true"]}
                {"document"="c0 TRUE"   "events"=["v 0" "b true"]}
                {"document"="c0 false"  "events"=["v 0" "b false"]}
                {"document"="c0 False"  "events"=["v 0" "b false"]}
                {"document"="c0 FALSE"  "events"=["v 0" "b false"]}
            ]
            "decodeMustFail" = [
                "c0 t"
                "c0 truer"
                "c0 -true"
                "c0 f"
                "c0 falser"
                "c0 -false"
            ]
        }

        // ====================================================================

        {
            "name" = "Decimal Integer"
            "encode" = [
                {"events"=["v 0" "n 0"]            "document"="c0\n0"}
                {"events"=["v 0" "n -0"]           "document"="c0\n-0"}
                {"events"=["v 0" "n 1234567890"]   "document"="c0\n1234567890"}
                {"events"=["v 0" "n -1234567890"]  "document"="c0\n-1234567890"}
                {"events"=["v 0" "n 10000000000000000000000000000"]   "document"="c0\n10000000000000000000000000000"}
                {"events"=["v 0" "n -10000000000000000000000000000"]  "document"="c0\n-10000000000000000000000000000"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0"                "events"=["v 0" "n -0"]}
                {"document"="c0 123"               "events"=["v 0" "n 123"]}
                {"document"="c0 9412504234235366"  "events"=["v 0" "n 9412504234235366"]}
                {"document"="c0 -49523"            "events"=["v 0" "n -49523"]}
                {"document"="c0 10000000000000000000000000000"        "events"=["v 0" "n 10000000000000000000000000000"]}
                {"document"="c0 -10000000000000000000000000000"       "events"=["v 0" "n -10000000000000000000000000000"]}
                {"document"="c0 100_00_0_00000000000_00000000_000_0"  "events"=["v 0" "n 10000000000000000000000000000"]}
                {"document"="c0 -4_9_5__2___3"     "events"=["v 0" "n -49523"]}
            ]
            "decodeMustFail" = [
                "c0 1f"  // Non-decimal digit
                "c0 -1f" // Non-decimal digit
                "c0 _1"  // Whitespace is not between digits
                "c0 1_"  // Whitespace is not between digits
                "c0 -_1" // Whitespace is not between digits
                "c0 -1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Binary Integer"
            "decodeMustSucceed" = [
                {"document"="c0 0b0"              "events"=["v 0" "n 0"]}
                {"document"="c0 -0b0"             "events"=["v 0" "n -0"]}
                {"document"="c0 0b1"              "events"=["v 0" "n 1"]}
                {"document"="c0 -0b101"           "events"=["v 0" "n -5"]}
                {"document"="c0 0b0010100"        "events"=["v 0" "n 20"]}
                {"document"="c0 -0b1_0_0"         "events"=["v 0" "n -4"]}
                {"document"="c0 0b0_0_1__010__1"  "events"=["v 0" "n 21"]}
                {
                    "document" = "c0 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    "events" = ["v 0" "n 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
                {
                    "document" = "c0 -0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    "events" = ["v 0" "n -0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
                {
                    "document" = "c0 0b100000000000000_000000000000_000000000000000000000000_000000000000000000000_0000000000000000000000000000000000000000_0"
                    "events" = ["v 0" "n 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
                {
                    "document" = "c0 -0b100000000000000_000000000000_000000000000000000000000_000000000000000000000_0000000000000000000000000000000000000000_0"
                    "events" = ["v 0" "n -0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]
                }
            ]
            "decodeMustFail" = [
                "c0 0b12"  // Non-binary digit
                "c0 -0b12" // Non-binary digit
                "c0 _0b1"  // Bad whitespace placement
                "c0 -_0b1" // Bad whitespace placement
                "c0 0_b1"  // Bad whitespace placement
                "c0 -0_b1" // Bad whitespace placement
                "c0 0b_1"  // Whitespace is not between digits
                "c0 0b1_"  // Whitespace is not between digits
                "c0 -0b_1" // Whitespace is not between digits
                "c0 -0b1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Octal Integer"
            "decodeMustSucceed" = [
                {"document"="c0 0o0"         "events"=["v 0" "n 0"]}
                {"document"="c0 -0o0"        "events"=["v 0" "n -0"]}
                {"document"="c0 0o1"         "events"=["v 0" "n 1"]}
                {"document"="c0 0o7"         "events"=["v 0" "n 7"]}
                {"document"="c0 -0o51"       "events"=["v 0" "n -0o51"]}
                {"document"="c0 0o644"       "events"=["v 0" "n 0o644"]}
                {"document"="c0 -0o777"      "events"=["v 0" "n -0o777"]}
                {"document"="c0 0o1000000000000000000000000000000000000000000000"
                 "events"=["v 0" "n 0o1000000000000000000000000000000000000000000000"]}
                {"document"="c0 -0o1000000000000000000000000000000000000000000000"
                 "events"=["v 0" "n -0o1000000000000000000000000000000000000000000000"]}
                {"document"="c0 0o1000000_0000000000_00000000000_000000000000_000000"
                 "events"=["v 0" "n 0o1000000000000000000000000000000000000000000000"]}
                {"document"="c0 0o7__7___7"  "events"=["v 0" "n 0o777"]}
            ]
            "decodeMustFail" = [
                "c0 0o19"  // Non-octal digit
                "c0 -0o19" // Non-octal digit
                "c0 _0o1"  // Bad whitespace placement
                "c0 -_0o1" // Bad whitespace placement
                "c0 0_o1"  // Bad whitespace placement
                "c0 -0_o1" // Bad whitespace placement
                "c0 0o_1"  // Whitespace is not between digits
                "c0 0o1_"  // Whitespace is not between digits
                "c0 -0o_1" // Whitespace is not between digits
                "c0 -0o1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Hexadecimal Integer"
            "decodeMustSucceed" = [
                {"document"="c0 0x0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0x1"                  "events"=["v 0" "n 1"]}
                {"document"="c0 0xf"                  "events"=["v 0" "n 15"]}
                {"document"="c0 -0xd4"                "events"=["v 0" "n -0xd4"]}
                {"document"="c0 0xfedcba9876543210"   "events"=["v 0" "n 0xfedcba9876543210"]}
                {"document"="c0 -0xFEDCBA9876543210"  "events"=["v 0" "n -0xfedcba9876543210"]}
                {"document"="c0 0x1000000000000000000000000000000000000000000000"
                 "events"=["v 0" "n 0x1000000000000000000000000000000000000000000000"]}
                {"document"="c0 -0x1000000000000000000000000000000000000000000000"
                 "events"=["v 0" "n -0x1000000000000000000000000000000000000000000000"]}
                {"document"="c0 0x100000000_000000_00000_000__000_0000000000000_0000000"
                 "events"=["v 0" "n 0x1000000000000000000000000000000000000000000000"]}
                {"document"="c0 0x8_8__5_a_f__d"  "events"=["v 0" "n 0x885afd"]}
            ]
            "decodeMustFail" = [
                "c0 0x1g"  // Non-hex digit
                "c0 -0x1g" // Non-hex digit
                "c0 _0x1"  // Bad whitespace placement
                "c0 -_0x1" // Bad whitespace placement
                "c0 0_x1"  // Bad whitespace placement
                "c0 -0_x1" // Bad whitespace placement
                "c0 0x_1"  // Whitespace is not between digits
                "c0 0x1_"  // Whitespace is not between digits
                "c0 -0x_1" // Whitespace is not between digits
                "c0 -0x1_" // Whitespace is not between digits
            ]
        }

        // ====================================================================

        {
            "name" = "Decimal Float"
            "encode" = [
                {"events"=["v 0" "df 0"]             "document"="c0\n0"}
                {"events"=["v 0" "df -0"]            "document"="c0\n-0"}
                {"events"=["v 0" "df 123456"]        "document"="c0\n123456"}
                {"events"=["v 0" "df -123456"]       "document"="c0\n-123456"}
                {"events"=["v 0" "df 1.23456"]       "document"="c0\n1.23456"}
                {"events"=["v 0" "df -1.23456"]      "document"="c0\n-1.23456"}
                {"events"=["v 0" "df 1.23456e+50"]   "document"="c0\n1.23456e+50"}
                {"events"=["v 0" "df -1.23456e+50"]  "document"="c0\n-1.23456e+50"}
                {"events"=["v 0" "df 1.23456e-50"]   "document"="c0\n1.23456e-50"}
                {"events"=["v 0" "df -1.23456e-50"]  "document"="c0\n-1.23456e-50"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 0.0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0.0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0,0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0,0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 1,1"                  "events"=["v 0" "n 1.1"]}
                {"document"="c0 0.1"                  "events"=["v 0" "n 0.1"]}
                {"document"="c0 0,1"                  "events"=["v 0" "n 0.1"]}
                {"document"="c0 4.7234634"            "events"=["v 0" "n 4.7234634"]}
                {"document"="c0 -9.6534634727167134523472782456223624582452671345134745694657786776"
                 "events"=["v 0" "n -9.6534634727167134523472782456223624582452671345134745694657786776"]}
                {"document"="c0 -9,6534634727167134523472782456223624582452671345134745694657786776"
                 "events"=["v 0" "n -9.6534634727167134523472782456223624582452671345134745694657786776"]}

                {"document"="c0 inf"                  "events"=["v 0" "n inf"]}
                {"document"="c0 -inf"                 "events"=["v 0" "n -inf"]}
                {"document"="c0 nan"                  "events"=["v 0" "n nan"]}
                {"document"="c0 snan"                 "events"=["v 0" "n snan"]}

                {"document"="c0 1.53476e80"           "events"=["v 0" "n 1.53476e80"]}
                {"document"="c0 1.53476e93983456"     "events"=["v 0" "n 1.53476e93983456"]}
                {"document"="c0 1.53476e+93983456"    "events"=["v 0" "n 1.53476e93983456"]}
                {"document"="c0 1.53476e-93983456"    "events"=["v 0" "n 1.53476e-93983456"]}
                {"document"="c0 1.53476E93983456"     "events"=["v 0" "n 1.53476e93983456"]}
                {"document"="c0 1.53476E+93983456"    "events"=["v 0" "n 1.53476e93983456"]}
                {"document"="c0 1.53476E-93983456"    "events"=["v 0" "n 1.53476e-93983456"]}
                {"document"="c0 -1.53476e93983456"    "events"=["v 0" "n -1.53476e93983456"]}
                {"document"="c0 -1.53476e+93983456"   "events"=["v 0" "n -1.53476e93983456"]}
                {"document"="c0 -1.53476e-93983456"   "events"=["v 0" "n -1.53476e-93983456"]}
                {"document"="c0 -1.53476E93983456"    "events"=["v 0" "n -1.53476e93983456"]}
                {"document"="c0 -1.53476E+93983456"   "events"=["v 0" "n -1.53476e93983456"]}
                {"document"="c0 -1.53476E-93983456"   "events"=["v 0" "n -1.53476e-93983456"]}
                {"document"="c0 -1,53476E-93983456"   "events"=["v 0" "n -1.53476e-93983456"]}

                {"document"="c0 1e80"                 "events"=["v 0" "n 1e80"]}
                {"document"="c0 1E80"                 "events"=["v 0" "n 1E80"]}
                {"document"="c0 -1e80"                "events"=["v 0" "n -1e80"]}
                {"document"="c0 -1E80"                "events"=["v 0" "n -1E80"]}
                {"document"="c0 1e+80"                "events"=["v 0" "n 1e80"]}
                {"document"="c0 1E+80"                "events"=["v 0" "n 1E80"]}
                {"document"="c0 -1e+80"               "events"=["v 0" "n -1e80"]}
                {"document"="c0 -1E+80"               "events"=["v 0" "n -1E80"]}
                {"document"="c0 1e-80"                "events"=["v 0" "n 1e-80"]}
                {"document"="c0 1E-80"                "events"=["v 0" "n 1E-80"]}
                {"document"="c0 -1e-80"               "events"=["v 0" "n -1e-80"]}
                {"document"="c0 -1E-80"               "events"=["v 0" "n -1E-80"]}

                {"document"="c0 0.1500000000000000000000000000000000000000000000000001e+10000"
                  "events"=["v 0" "n 0.1500000000000000000000000000000000000000000000000001e+10000"]}
                {"document"="c0 0.1500000000000000000000000000000000000000000000000001e-10000"
                  "events"=["v 0" "n 0.1500000000000000000000000000000000000000000000000001e-10000"]}
                {"document"="c0 -0.1500000000000000000000000000000000000000000000000001e+10000"
                 "events"=["v 0" "n -0.1500000000000000000000000000000000000000000000000001e+10000"]}
                {"document"="c0 -0.1500000000000000000000000000000000000000000000000001e-10000"
                 "events"=["v 0" "n -0.1500000000000000000000000000000000000000000000000001e-10000"]}
                {"document"="c0 -0,1500000000000000000000000000000000000000000000000001e-10000"
                 "events"=["v 0" "n -0.1500000000000000000000000000000000000000000000000001e-10000"]}
            ]
            "decodeMustFail" = [
                "c0 1."      // Missing right digit
                "c0 1,"      // Missing right digit
                "c0 .1"      // Missing left digit
                "c0 ,1"      // Missing left digit
                "c0 _1.1"    // Bad whitespace placement
                "c0 1_.1"    // Bad whitespace placement
                "c0 1._1"    // Bad whitespace placement
                "c0 1.1_"    // Bad whitespace placement
                "c0 _1,1"    // Bad whitespace placement
                "c0 1_,1"    // Bad whitespace placement
                "c0 1,_1"    // Bad whitespace placement
                "c0 1,1_"    // Bad whitespace placement
                "c0 1.1.1"   // Too many radices
                "c0 1,1.1"   // Too many radices
                "c0 1.1,1"   // Too many radices
                "c0 1,1,1"   // Too many radices
                "c0 1.1e1e2" // Too many exponent markers
                "c0 1,1e1e2" // Too many exponent markers
                "c0 1.a"     // Not a digit
                "c0 1,a"     // Not a digit
            ]
        }

        // ====================================================================

        {
            "name" = "Hexadecimal Float"
            "encode" = [
                {"events"=["v 0" "bf 0x0"]      "document"="c0\n0x0p+00"}
                {"events"=["v 0" "bf -0x0"]     "document"="c0\n-0x0p+00"}
                {"events"=["v 0" "bf 0x1.f39"]  "document"="c0\n0x1.f39p+00"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 0x0.0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0.0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0x0,0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0,0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0x1,1"                  "events"=["v 0" "n 0x1.1p0"]}
                {"document"="c0 0x0.1"                  "events"=["v 0" "n 0x0.1p0"]}
                {"document"="c0 0x0,1"                  "events"=["v 0" "n 0x0.1p0"]}
                {"document"="c0 0x4.7f3cc34"            "events"=["v 0" "n 0x4.7f3cc34p0"]}
                {"document"="c0 -0x1.65346e47aa16713452c47278245e22362458d4526713a513474c694657786776"
                 "events"=["v 0" "n -0x1.65346e47aa16713452c47278245e22362458d4526713a513474c694657786776p0"]}
                {"document"="c0 -0xf,65346e47aa16713452c47278245e22362458d4526713a513474c694657786776"
                 "events"=["v 0" "n -0xf.65346e47aa16713452c47278245e22362458d4526713a513474c694657786776p0"]}

                {"document"="c0 0x0.0p0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0.0p0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0x0.0p+0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0.0p+0"                "events"=["v 0" "n -0"]}
                {"document"="c0 0x0.0p-0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0.0p-0"                "events"=["v 0" "n -0"]}
                {"document"="c0 0xf.1p10"                 "events"=["v 0" "n 0xf.1p10"]}
                {"document"="c0 -0xf.1p10"                "events"=["v 0" "n -0xf.1p10"]}
                {"document"="c0 0xf.1p+10"                "events"=["v 0" "n 0xf.1p10"]}
                {"document"="c0 -0xf.1p+10"               "events"=["v 0" "n -0xf.1p10"]}
                {"document"="c0 0xf.1p-10"                "events"=["v 0" "n 0xf.1p-10"]}
                {"document"="c0 -0xf.1p-10"               "events"=["v 0" "n -0xf.1p-10"]}

                {"document"="c0 0x0p0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0p0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0x0p+0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0p+0"                "events"=["v 0" "n -0"]}
                {"document"="c0 0x0p-0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0x0p-0"                "events"=["v 0" "n -0"]}
                {"document"="c0 0xfp10"                 "events"=["v 0" "n 0xfp10"]}
                {"document"="c0 -0xfp10"                "events"=["v 0" "n -0xfp10"]}
                {"document"="c0 0xfp+10"                "events"=["v 0" "n 0xfp10"]}
                {"document"="c0 -0xfp+10"               "events"=["v 0" "n -0xfp10"]}
                {"document"="c0 0xfp-10"                "events"=["v 0" "n 0xfp-10"]}
                {"document"="c0 -0xfp-10"               "events"=["v 0" "n -0xfp-10"]}

                {"document"="c0 0X0P0"                  "events"=["v 0" "n 0"]}
                {"document"="c0 -0X0P0"                 "events"=["v 0" "n -0"]}
                {"document"="c0 0X0P+0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0X0P+0"                "events"=["v 0" "n -0"]}
                {"document"="c0 0X0P-0"                 "events"=["v 0" "n 0"]}
                {"document"="c0 -0X0P-0"                "events"=["v 0" "n -0"]}
                {"document"="c0 0XFP10"                 "events"=["v 0" "n 0xfp10"]}
                {"document"="c0 -0XFP10"                "events"=["v 0" "n -0xfp10"]}
                {"document"="c0 0XFP+10"                "events"=["v 0" "n 0xfp10"]}
                {"document"="c0 -0XFP+10"               "events"=["v 0" "n -0xfp10"]}
                {"document"="c0 0XFP-10"                "events"=["v 0" "n 0xfp-10"]}
                {"document"="c0 -0XFP-10"               "events"=["v 0" "n -0xfp-10"]}

                {"document"="c0 0xc.4_45__3p8"            "events"=["v 0" "n 0xc.4453p8"]}

                // Coefficient too big for float64
                {"document"="c0 0x1.54fffe2ac00592375b427ap100" "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap100"]}
                {"document"="c0 -0x1.54fffe2ac00592375b427ap100" "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap100"]}
                {"document"="c0 0x1.54fffe2ac00592375b427ap-100" "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap-100"]}
                {"document"="c0 -0x1.54fffe2ac00592375b427ap-100" "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap-100"]}

                // Exponent too big for float64
                {"document"="c0 0x1.8p10000"             "events"=["v 0" "n 0x1.8p10000"]}
                {"document"="c0 -0x1.8p10000"            "events"=["v 0" "n -0x1.8p10000"]}
                {"document"="c0 0x1.8p-10000"            "events"=["v 0" "n 0x1.8p-10000"]}
                {"document"="c0 -0x1.8p-10000"           "events"=["v 0" "n -0x1.8p-10000"]}

                // Everything too big for float64
                {"document"="c0 0x1.54fffe2ac00592375b427ap10000"    "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap10000"]}
                {"document"="c0 -0x1.54fffe2ac00592375b427ap10000"   "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap10000"]}
                {"document"="c0 0x1.54fffe2ac00592375b427ap-10000"   "events"=["v 0" "n 0x1.54fffe2ac00592375b427ap-10000"]}
                {"document"="c0 -0x1.54fffe2ac00592375b427ap-10000"  "events"=["v 0" "n -0x1.54fffe2ac00592375b427ap-10000"]}
            ]
            "decodeMustFail" = [
                "c0 0x1."      // Missing right digit
                "c0 0x1,"      // Missing right digit
                "c0 0x.1"      // Missing left digit
                "c0 0x,1"      // Missing left digit
                "c0 _0x1.1"    // Bad whitespace placement
                "c0 0x1_.1"    // Bad whitespace placement
                "c0 0x1._1"    // Bad whitespace placement
                "c0 0x1.1_"    // Bad whitespace placement
                "c0 _0x1,1"    // Bad whitespace placement
                "c0 0x1_,1"    // Bad whitespace placement
                "c0 0x1,_1"    // Bad whitespace placement
                "c0 0x1,1_"    // Bad whitespace placement
                "c0 0x_1.1"    // Bad whitespace placement
                "c0 0_x1.1"    // Bad whitespace placement
                "c0 0x1.1.1"   // Too many radices
                "c0 0x1,1.1"   // Too many radices
                "c0 0x1.1,1"   // Too many radices
                "c0 0x1,1,1"   // Too many radices
                "c0 0x1.1p1p2" // Too many exponent markers
                "c0 0x1,1p1p2" // Too many exponent markers
                "c0 0x1.l"     // Not a digit
                "c0 0x1,l"     // Not a digit
            ]
        }

        // ====================================================================

        {
            "name" = "UID"
            "encode" = [
                {"events"=["v 0" "uid 00000000-0000-0000-0000-000000000000"]
                 "document"="c0\n00000000-0000-0000-0000-000000000000"}
                {"events"=["v 0" "uid fedbca98-1111-2222-cccc-723b87d4546a"]
                 "document"="c0\nfedbca98-1111-2222-cccc-723b87d4546a"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 00000000-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 00000000-0000-0000-0000-000000000000"]}
                {"document"="c0 123456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 123456af-0000-0000-0000-000000000000"]}
                {"document"="c0 223456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 223456af-0000-0000-0000-000000000000"]}
                {"document"="c0 323456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 323456af-0000-0000-0000-000000000000"]}
                {"document"="c0 423456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 423456af-0000-0000-0000-000000000000"]}
                {"document"="c0 523456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 523456af-0000-0000-0000-000000000000"]}
                {"document"="c0 623456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 623456af-0000-0000-0000-000000000000"]}
                {"document"="c0 723456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 723456af-0000-0000-0000-000000000000"]}
                {"document"="c0 823456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 823456af-0000-0000-0000-000000000000"]}
                {"document"="c0 923456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid 923456af-0000-0000-0000-000000000000"]}
                {"document"="c0 a23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid a23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 b23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid b23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 c23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid c23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 d23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid d23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 e23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid e23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 f23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid f23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 A23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid a23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 B23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid b23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 C23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid c23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 D23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid d23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 E23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid e23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 F23456af-0000-0000-0000-000000000000"
                 "events"=["v 0" "uid f23456af-0000-0000-0000-000000000000"]}
                {"document"="c0 fbdcba98-7654-3210-aaaa-bbbbbbbbbbbb"
                 "events"=["v 0" "uid fbdcba98-7654-3210-aaaa-bbbbbbbbbbbb"]}
            ]
            "decodeMustFail" = [
                "fbdcba98-7654-3210-aaaa-bbbbbbbbbbb"    // Too short
                "fbdcba98-7654-3210-aaaa-bbbbbbbbbbbbb"  // Too long
                "fbdcba987654-3210-aaaa-bbbbbbbbbbbb"    // Malformed
                "fbdcba98-76543210-aaaa-bbbbbbbbbbbb"    // Malformed
                "fbdcba98-7654-3210aaaa-bbbbbbbbbbbb"    // Malformed
                "fbdcba98-7654-3210-aaaabbbbbbbbbbbb"    // Malformed
                "fbdcba9876543210aaaabbbbbbbbbbbb"       // Malformed
                "fbdcba98-7654-3210-aaaa-bbbbbbbbgbbb"   // Bad chars
                "-fbdcba98-7654-3210-aaaa-bbbbbbbbbbbb"  // Negative UID is not a thing
            ]
        }

        // ====================================================================

        {
            "name" = "Date"
            "encode" = [
                {"events"=["v 0" "t 2050-11-15"]   "document"="c0\n2050-11-15"}
                {"events"=["v 0" "t -9000-01-01"]  "document"="c0\n-9000-01-01"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 2000-01-01"      "events"=["v 0" "t 2000-01-01"]}
                {"document"="c0 -2000-01-01"     "events"=["v 0" "t -2000-01-01"]}
                {"document"="c0 2000-1-1"        "events"=["v 0" "t 2000-01-01"]}
                {"document"="c0 9412351-12-31"   "events"=["v 0" "t 9412351-12-31"]}
                {"document"="c0 -9412351-12-31"  "events"=["v 0" "t -9412351-12-31"]}
                {"document"="c0 1-01-01"         "events"=["v 0" "t 1-01-01"]}
                {"document"="c0 -1-01-01"        "events"=["v 0" "t -1-01-01"]}
            ]
            "decodeMustFail" = [
                "c0 0-01-01"     // Year 0 is invalid
                "c0 -0-01-01"    // Year -0 is invalid
                "c0 2000-0-01"   // Month 0 is invalid
                "c0 2000-13-01"  // Month 13 is invalid
                "c0 2000-01-0"   // Day 0 is invalid
                "c0 2000-01-32"  // Day 32 is invalid
                "c0 2000-001-01" // Too many digits
                "c0 2000-01-001" // Too many digits
                "c0 2000-01-0a"  // Bad digits
                "c0 2000-0b-01"  // Bad digits
                "c0 2000-01-"    // Incomplete
                "c0 2000-01"     // Incomplete
            ]
        }

        // ====================================================================

        {
            "name" = "Time"
            "encode" = [
                {"events"=["v 0" "t 00:00:00"]                          "document"="c0\n00:00:00"}
                {"events"=["v 0" "t 14:21:09.583454111/Europe/Berlin"]  "document"="c0\n14:21:09.583454111/Europe/Berlin"}
                {"events"=["v 0" "t 23:59:60.999999999/-21.04/86.99"]   "document"="c0\n23:59:60.999999999/-21.04/86.99"}
                {"events"=["v 0" "t 22:01:15.9015-1300"]                "document"="c0\n22:01:15.9015-1300"}
                {"events"=["v 0" "t 22:01:15.9015+1001"]                "document"="c0\n22:01:15.9015+1001"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 0:00:00"                          "events"=["v 0" "t 0:00:00"]}
                {"document"="c0 00:00:00"                         "events"=["v 0" "t 0:00:00"]}
                {"document"="c0 1:45:00"                          "events"=["v 0" "t 1:45:00"]}
                {"document"="c0 01:45:00"                         "events"=["v 0" "t 1:45:00"]}
                {"document"="c0 23:59:59"                         "events"=["v 0" "t 23:59:59"]}
                {"document"="c0 23:59:60"                         "events"=["v 0" "t 23:59:60"]}

                {"document"="c0 0:00:00.000000000"                "events"=["v 0" "t 0:00:00"]}
                {"document"="c0 0:00:00.000000001"                "events"=["v 0" "t 0:00:00.000000001"]}
                {"document"="c0 0:00:00.00000001"                 "events"=["v 0" "t 0:00:00.00000001"]}
                {"document"="c0 0:00:00.0000001"                  "events"=["v 0" "t 0:00:00.0000001"]}
                {"document"="c0 0:00:00.000001"                   "events"=["v 0" "t 0:00:00.000001"]}
                {"document"="c0 0:00:00.00001"                    "events"=["v 0" "t 0:00:00.00001"]}
                {"document"="c0 0:00:00.0001"                     "events"=["v 0" "t 0:00:00.0001"]}
                {"document"="c0 0:00:00.001"                      "events"=["v 0" "t 0:00:00.001"]}
                {"document"="c0 0:00:00.01"                       "events"=["v 0" "t 0:00:00.01"]}
                {"document"="c0 0:00:00.1"                        "events"=["v 0" "t 0:00:00.1"]}
                {"document"="c0 0:00:00.100000000"                "events"=["v 0" "t 0:00:00.1"]}
                {"document"="c0 23:59:60.000000000"               "events"=["v 0" "t 23:59:60"]}
                {"document"="c0 23:59:60,000000000"               "events"=["v 0" "t 23:59:60"]}
                {"document"="c0 23:59:60.999999999"               "events"=["v 0" "t 23:59:60.999999999"]}
                {"document"="c0 23:59:60,999999999"               "events"=["v 0" "t 23:59:60.999999999"]}

                {"document"="c0 23:59:59.101"                     "events"=["v 0" "t 23:59:59.101"]}

                {"document"="c0 10:00:01.93/America/Los_Angeles"  "events"=["v 0" "t 10:00:01.93/America/Los_Angeles"]}
                {
                    "document" = "c0 20:00:00/Etc/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"
                    "events" = ["v 0" "t 20:00:00/Etc/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"]
                }

                {"document"="c0 10:00:01.93/89.92/1.10"           "events"=["v 0" "t 10:00:01.93/89.92/1.10"]}
                {"document"="c0 10:00:01.93/89,90/1.1"            "events"=["v 0" "t 10:00:01.93/89.90/1.1"]}
                {"document"="c0 10:00:01.93/89.9/1,10"            "events"=["v 0" "t 10:00:01.93/89.9/1.10"]}
                {"document"="c0 10:00:01.93/0/0"                  "events"=["v 0" "t 10:00:01.93/0/0"]}
                {"document"="c0 10:00:01.93/00/00.00"             "events"=["v 0" "t 10:00:01.93/0/0"]}
                {"document"="c0 10:00:01.93/1/1"                  "events"=["v 0" "t 10:00:01.93/1/1"]}
                {"document"="c0 10:00:01.93/90/-180"              "events"=["v 0" "t 10:00:01.93/90/-180"]}
                {"document"="c0 10:00:01.93/-90/180"              "events"=["v 0" "t 10:00:01.93/-90/180"]}
                {"document"="c0 10:00:01.93+0000"                 "events"=["v 0" "t 10:00:01.93"]}
                {"document"="c0 10:00:01.93+0001"                 "events"=["v 0" "t 10:00:01.93+0001"]}
                {"document"="c0 10:00:01.93-0030"                 "events"=["v 0" "t 10:00:01.93-0030"]}
                {"document"="c0 10:00:01.93-1259"                 "events"=["v 0" "t 10:00:01.93-1259"]}
                {"document"="c0 10:00:01.93-2359"                 "events"=["v 0" "t 10:00:01.93-2359"]}
                {"document"="c0 10:00:01.93+2359"                 "events"=["v 0" "t 10:00:01.93+2359"]}
            ]
            "decodeMustFail" = [
                "c0 012:00:00"           // Too many hour digits
                "c0 12:000:00"           // Too many minute digits
                "c0 12:00:000"           // Too many second digits
                "c0 12:00:00.0000000000" // Too many subsecond digits
                "c0 12:00:00,0000000000" // Too many subsecond digits

                "c0 24:00:00"            // Hour too high
                "c0 23:60:00"            // Minute too high
                "c0 23:00:61"            // Second too high

                "c0 2a:00:00"            // Invalid hour digit
                "c0 20:0a:00"            // Invalid minute digit
                "c0 20:00:0a"            // Invalid second digit
                "c0 20:00:00.00a"        // Invalid subsecond digit
                "c0 20:00:00,00a"        // Invalid subsecond digit

                "c0 20:00:00/"           // Missing timezone after marker

                "c0 20:00:00/Etc/1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234" // Max area/location length is 127

                "c0 20:00:00/0/"         // Missing longitude
                "c0 20:00:00/90.01/0"    // Latitude max is 90
                "c0 20:00:00/-90.01/0"   // Latitude min is -90
                "c0 20:00:00/0/180.01"   // Longitude max is 180
                "c0 20:00:00/0/-180.01"  // Longitude min is -180
                "c0 20:00:00/0/0.011"    // Too much precision
                "c0 20:00:00/0.011/0"    // Too much precision
                "c0 20:00:00/0a/0"       // Invalid character
                "c0 20:00:00/0/0a"       // Invalid character

                "c0 20:00:00+0"          // Not enough digits
                "c0 20:00:00-0"          // Not enough digits
                "c0 20:00:00+00"         // Not enough digits
                "c0 20:00:00-00"         // Not enough digits
                "c0 20:00:00+000"        // Not enough digits
                "c0 20:00:00-000"        // Not enough digits
                "c0 20:00:00+00000"      // Too many digits
                "c0 20:00:00-00000"      // Too many digits
                "c0 20:00:00+2400"       // Too high
                "c0 20:00:00-2400"       // Too low
                "c0 20:00:00+230a"       // Invalid digits
                "c0 20:00:00-230a"       // Invalid digits
            ]
        }


        // ====================================================================

        {
            "name" = "Timestamp"
            "encode" = [
                {"events"=["v 0" "t 10233-01-01/09:31:44.901554/Z"]  "document"="c0\n10233-01-01/09:31:44.901554"}
                {"events"=["v 0" "t 2000-01-01/09:31:44.9+0100"]     "document"="c0\n2000-01-01/09:31:44.9+0100"}
                {"events"=["v 0" "t 2000-01-01/09:31:44.901554212/Europe/Prague"]
                 "document"="c0\n2000-01-01/09:31:44.901554212/Europe/Prague"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 2000-01-01/9:31:44.901554/Z"          "events"=["v 0" "t 2000-01-01/9:31:44.901554/Z"]}
                {"document"="c0 02000-01-01/9:31:44.901554/Z"         "events"=["v 0" "t 2000-01-01/9:31:44.901554/Z"]}
                {"document"="c0 -02000-01-01/9:31:44.901554/Z"        "events"=["v 0" "t -2000-01-01/9:31:44.901554/Z"]}
                {"document"="c0 2020-01-15/13:41:00.000599"           "events"=["v 0" "t 2020-01-15/13:41:00.000599"]}
                {"document"="c0 2020-01-15/10:00:01.93/89.92/1.10"    "events"=["v 0" "t 2020-01-15/10:00:01.93/89.92/1.10"]}
                {"document"="c0 2020-01-15/10:00:01.93/89.92/-1.10"   "events"=["v 0" "t 2020-01-15/10:00:01.93/89.92/-1.10"]}
                {"document"="c0 2020-01-15/10:00:01.93/-89.92/1.10"   "events"=["v 0" "t 2020-01-15/10:00:01.93/-89.92/1.10"]}
                {"document"="c0 2020-01-15/10:00:01.93/-89.92/-1.10"  "events"=["v 0" "t 2020-01-15/10:00:01.93/-89.92/-1.10"]}
                {"document"="c0 2000-01-01/9:31:44.9+0100"            "events"=["v 0" "t 2000-01-01/9:31:44.9+0100"]}
                {"document"="c0 2000-01-01/9:31:44.901554212/Europe/Prague"
                 "events"=["v 0" "t 2000-01-01/9:31:44.901554212/Europe/Prague"]}
            ]
            "decodeMustFail" = [
                "c0 0-01-01/9:31:44.901554"            // Year 0 is invalid
                "c0 0000-01-01/9:31:44.901554"         // Year 0 is invalid
                "c0 2000-00-01/9:31:44.901554"         // Month 0 is invalid
                "c0 2000-13-01/9:31:44.901554"         // Month 13 is invalid
                "c0 2000-01-00/9:31:44.901554"         // Day 0 is invalid
                "c0 2000-01-32/9:31:44.901554"         // Day 32 is invalid
                "c0 2000-01-01/24:31:44.901554"        // Hour 24 is invalid
                "c0 2000-01-01/9:60:44.901554"         // Minute 60 is invalid
                "c0 2000-01-01/9:31:61.901554"         // Second 61 is invalid
                "c0 2000-01-01/9:31:44.-901554"        // Subseconds cannot be negative
                "c0 2000-01-01/9:31:44.9015549343"     // Subseconds too long
                "c0 2000-01-01/9:31:44.901554/91/0"    // Latitude 91 is invalid
                "c0 2000-01-01/9:31:44.901554/-91/0"   // Latitude -91 is invalid
                "c0 2000-01-01/9:31:44.901554/0/181"   // Longitude 181 is invalid
                "c0 2000-01-01/9:31:44.901554/0/-181"  // Longitude -181 is invalid
                "c0 2000-01-01/9:31:44.901554+2400"    // Offset 2400 is invalid
                "c0 2000-01-01/9:31:44.901554-2400"    // Offset -2400 is invalid
            ]
        }

        // ====================================================================

        {
            "name" = "String"
            "encode" = [
                {"events"=["v 0" "s this is a string"]  "document"="c0\n\"this is a string\""}
            ]
            "decodeMustSucceed" = [
                {"document"="\.~ c0 "test test"~"            "events"=["v 0" "s test test"]}
                {"document"="\.~ c0 ""~"                     "events"=["v 0" "s "]}               // Empty string
                {"document"="\.~ c0 "test/*test"~"           "events"=["v 0" "s test/*test"]}     // Comment initiator inside a string
                {"document"="\.~ c0 "test*/test"~"           "events"=["v 0" "s test*/test"]}     // Comment terminator inside a string
                {"document"="\.~ c0 "test\ttest"~"           "events"=["v 0" "s test\19test"]}    // Escaped tab
                {"document"="\.~ c0 "test\rtest"~"           "events"=["v 0" "s test\1dtest"]}    // Escaped CR
                {"document"="\.~ c0 "test\"test"~"           "events"=["v 0" "s \.~ test"test~"]} // Escaped quote
                {"document"="\.~ c0 "test\\test"~"           "events"=["v 0" "s \.~ test\test~"]} // Escaped backslash
                {"document"="\.~ c0 "test\/test"~"           "events"=["v 0" "s \.~ test/test~"]} // Escaped slash
                {"document"="\.~ c0 "test\*test"~"           "events"=["v 0" "s \.~ test*test~"]} // Escaped star
                {"document"="\.~ c0 "test\<test"~"           "events"=["v 0" "s \.~ test<test~"]} // Escaped lt
                {"document"="\.~ c0 "test\>test"~"           "events"=["v 0" "s \.~ test>test~"]} // Escaped gt
                {"document"="\.~ c0 "test\|test"~"           "events"=["v 0" "s \.~ test|test~"]} // Escaped pipe
                {"document"="\.~ c0 "test\_test"~"           "events"=["v 0" "s test\2a0test"]}   // Escaped non-breaking space
                {"document"="\.~ c0 "test\-test"~"           "events"=["v 0" "s test\2adtest"]}   // Escaped soft hyphen
                {"document"="\.~ c0 "test\1atest"~"          "events"=["v 0" "s test\ntest"]}     // Escaped 1-digit codepoint
                {"document"="\.~ c0 "test\2f7test"~"         "events"=["v 0" "s test÷test"]}      // Escaped 2-digit codepoint
                {"document"="\.~ c0 "test\317dtest"~"        "events"=["v 0" "s testŽtest"]}      // Escaped 3-digit codepoint
                {"document"="\.~ c0 "test\42021test"~"       "events"=["v 0" "s test‡test"]}      // Escaped 4-digit codepoint
                {"document"="\.~ c0 "test\51f43atest"~"      "events"=["v 0" "s test🐺test"]}     // Escaped 5-digit codepoint
                {"document"="\.~ c0 "test\6000020test"~"     "events"=["v 0" "s test test"]}      // Escaped 6-digit codepoint
                {"document"="\.~ c0 "test\70000020test"~"    "events"=["v 0" "s test test"]}      // Escaped 7-digit codepoint
                {"document"="\.~ c0 "test\800000020test"~"   "events"=["v 0" "s test test"]}      // Escaped 8-digit codepoint
                {"document"="\.~ c0 "test\9000000020test"~"  "events"=["v 0" "s test test"]}      // Escaped 9-digit codepoint
                {"document"="\.~ c0 "test\ntest"~"           "events"=["v 0" "s \.~ test
test~"]}  // Escaped newline
                {"document"="\.~ c0 "test\
test"~"  "events"=["v 0" "s testtest"]}  // Continuation
            ]
            "decodeMustFail" = [
                "\.~ c0 "test\1gtest"~"    // Invalid codepoint digit
                "\.~ c0 "test\xtest"~"     // Invalid escape character
                "\.~ c0 "test test~"       // Unterminated quotes
                "\.~ c0 test test~"        // Missing quotes
                "\.~ c0 "test\"~"          // Unterminated escape
                "\.~ c0 "test\1"~"         // Unterminated codepoint
                "\.~ c0 "test\21"~"        // Unterminated codepoint
                "\.~ c0 "test\301"~"       // Unterminated codepoint
                "\.~ c0 "test\4001"~"      // Unterminated codepoint
                "\.~ c0 "test\50001"~"     // Unterminated codepoint
                "\.~ c0 "test\600001"~"    // Unterminated codepoint
                "\.~ c0 "test\7000001"~"   // Unterminated codepoint
                "\.~ c0 "test\80000001"~"  // Unterminated codepoint
                "\.~ c0 "test\900000001"~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            "name" = "String with NUL character"
            "encode" = [
                {
                    "events" = ["v 0" "s test\0string"]
                    "document" = "\.^ c0
"test\0string"^"
                }
            ]
        }

        // ====================================================================

        {
            // Resource IDs have the same capabilities and restrictions as strings.
            "name" = "Resource ID"
            "encode" = [
                {"events"=["v 0" "rid https://concise-encoding.org"]  "document"="c0\n@\"https://concise-encoding.org\""}
            ]
            "decodeMustSucceed" = [
                {"document"="\.~ c0 @"http://x.com/a/b#1"~"   "events"=["v 0" "rid http://x.com/a/b#1"]}
                {"document"="\.~ c0 @""~"                     "events"=["v 0" "rid "]}               // Empty string
                {"document"="\.~ c0 @"test/*test"~"           "events"=["v 0" "rid test/*test"]}     // Comment initiator inside a string
                {"document"="\.~ c0 @"test*/test"~"           "events"=["v 0" "rid test*/test"]}     // Comment terminator inside a string
                {"document"="\.~ c0 @"test\ttest"~"           "events"=["v 0" "rid test\19test"]}    // Escaped tab
                {"document"="\.~ c0 @"test\rtest"~"           "events"=["v 0" "rid test\1dtest"]}    // Escaped CR
                {"document"="\.~ c0 @"test\"test"~"           "events"=["v 0" "rid \.~ test"test~"]} // Escaped quote
                {"document"="\.~ c0 @"test\\test"~"           "events"=["v 0" "rid \.~ test\test~"]} // Escaped backslash
                {"document"="\.~ c0 @"test\/test"~"           "events"=["v 0" "rid \.~ test/test~"]} // Escaped slash
                {"document"="\.~ c0 @"test\*test"~"           "events"=["v 0" "rid \.~ test*test~"]} // Escaped star
                {"document"="\.~ c0 @"test\<test"~"           "events"=["v 0" "rid \.~ test<test~"]} // Escaped lt
                {"document"="\.~ c0 @"test\>test"~"           "events"=["v 0" "rid \.~ test>test~"]} // Escaped gt
                {"document"="\.~ c0 @"test\|test"~"           "events"=["v 0" "rid \.~ test|test~"]} // Escaped pipe
                {"document"="\.~ c0 @"test\_test"~"           "events"=["v 0" "rid test\2a0test"]}   // Escaped non-breaking space
                {"document"="\.~ c0 @"test\-test"~"           "events"=["v 0" "rid test\2adtest"]}   // Escaped soft hyphen
                {"document"="\.~ c0 @"test\1atest"~"          "events"=["v 0" "rid test\ntest"]}     // Escaped 1-digit codepoint
                {"document"="\.~ c0 @"test\2f7test"~"         "events"=["v 0" "rid test÷test"]}      // Escaped 2-digit codepoint
                {"document"="\.~ c0 @"test\317dtest"~"        "events"=["v 0" "rid testŽtest"]}      // Escaped 3-digit codepoint
                {"document"="\.~ c0 @"test\42021test"~"       "events"=["v 0" "rid test‡test"]}      // Escaped 4-digit codepoint
                {"document"="\.~ c0 @"test\51f43atest"~"      "events"=["v 0" "rid test🐺test"]}     // Escaped 5-digit codepoint
                {"document"="\.~ c0 @"test\6000020test"~"     "events"=["v 0" "rid test test"]}      // Escaped 6-digit codepoint
                {"document"="\.~ c0 @"test\70000020test"~"    "events"=["v 0" "rid test test"]}      // Escaped 7-digit codepoint
                {"document"="\.~ c0 @"test\800000020test"~"   "events"=["v 0" "rid test test"]}      // Escaped 8-digit codepoint
                {"document"="\.~ c0 @"test\9000000020test"~"  "events"=["v 0" "rid test test"]}      // Escaped 9-digit codepoint
                {"document"="\.~ c0 @"test\ntest"~"           "events"=["v 0" "rid \.~ test
test~"]}  // Escaped newline
                {"document"="\.~ c0 @"test\
test"~"  "events"=["v 0" "rid testtest"]}  // Continuation
            ]
            "decodeMustFail" = [
                "\.~ c0 @"test\1gtest"~"    // Invalid codepoint digit
                "\.~ c0 @"test\xtest"~"     // Invalid escape character
                "\.~ c0 @"test test~"       // Unterminated quotes
                "\.~ c0 @test test~"        // Missing quotes
                "\.~ c0 @"test\"~"          // Unterminated escape
                "\.~ c0 @"test\1"~"         // Unterminated codepoint
                "\.~ c0 @"test\21"~"        // Unterminated codepoint
                "\.~ c0 @"test\301"~"       // Unterminated codepoint
                "\.~ c0 @"test\4001"~"      // Unterminated codepoint
                "\.~ c0 @"test\50001"~"     // Unterminated codepoint
                "\.~ c0 @"test\600001"~"    // Unterminated codepoint
                "\.~ c0 @"test\7000001"~"   // Unterminated codepoint
                "\.~ c0 @"test\80000001"~"  // Unterminated codepoint
                "\.~ c0 @"test\900000001"~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            // Custom text has the same capabilities and restrictions as strings.
            "name" = "Custom Text"
            "encode" = [
                {"events"=["v 0" "ct cplx(2.94+3i)"]  "document"="c0\n|ct cplx(2.94+3i)|"}
            ]
            "decodeMustSucceed" = [
                {"document"="\.~ c0 |ct something(123)|~"       "events"=["v 0" "ct something(123)"]}
                {"document"="\.~ c0 |ct|~"                      "events"=["v 0" "ct "]}               // Empty string
                {"document"="\.~ c0 |ct |~"                     "events"=["v 0" "ct "]}               // Empty string
                {"document"="\.~ c0 |ct test/*test|~"           "events"=["v 0" "ct test/*test"]}     // Comment initiator inside a string
                {"document"="\.~ c0 |ct test*/test|~"           "events"=["v 0" "ct test*/test"]}     // Comment terminator inside a string
                {"document"="\.~ c0 |ct test\ttest|~"           "events"=["v 0" "ct test\19test"]}    // Escaped tab
                {"document"="\.~ c0 |ct test\rtest|~"           "events"=["v 0" "ct test\1dtest"]}    // Escaped CR
                {"document"="\.~ c0 |ct test\"test|~"           "events"=["v 0" "ct \.~ test"test~"]} // Escaped quote
                {"document"="\.~ c0 |ct test\\test|~"           "events"=["v 0" "ct \.~ test\test~"]} // Escaped backslash
                {"document"="\.~ c0 |ct test\/test|~"           "events"=["v 0" "ct \.~ test/test~"]} // Escaped slash
                {"document"="\.~ c0 |ct test\*test|~"           "events"=["v 0" "ct \.~ test*test~"]} // Escaped star
                {"document"="\.~ c0 |ct test\<test|~"           "events"=["v 0" "ct \.~ test<test~"]} // Escaped lt
                {"document"="\.~ c0 |ct test\>test|~"           "events"=["v 0" "ct \.~ test>test~"]} // Escaped gt
                {"document"="\.~ c0 |ct test\|test|~"           "events"=["v 0" "ct \.~ test|test~"]} // Escaped pipe
                {"document"="\.~ c0 |ct test\_test|~"           "events"=["v 0" "ct test\2a0test"]}   // Escaped non-breaking space
                {"document"="\.~ c0 |ct test\-test|~"           "events"=["v 0" "ct test\2adtest"]}   // Escaped soft hyphen
                {"document"="\.~ c0 |ct test\1atest|~"          "events"=["v 0" "ct test\ntest"]}     // Escaped 1-digit codepoint
                {"document"="\.~ c0 |ct test\2f7test|~"         "events"=["v 0" "ct test÷test"]}      // Escaped 2-digit codepoint
                {"document"="\.~ c0 |ct test\317dtest|~"        "events"=["v 0" "ct testŽtest"]}      // Escaped 3-digit codepoint
                {"document"="\.~ c0 |ct test\42021test|~"       "events"=["v 0" "ct test‡test"]}      // Escaped 4-digit codepoint
                {"document"="\.~ c0 |ct test\51f43atest|~"      "events"=["v 0" "ct test🐺test"]}     // Escaped 5-digit codepoint
                {"document"="\.~ c0 |ct test\6000020test|~"     "events"=["v 0" "ct test test"]}      // Escaped 6-digit codepoint
                {"document"="\.~ c0 |ct test\70000020test|~"    "events"=["v 0" "ct test test"]}      // Escaped 7-digit codepoint
                {"document"="\.~ c0 |ct test\800000020test|~"   "events"=["v 0" "ct test test"]}      // Escaped 8-digit codepoint
                {"document"="\.~ c0 |ct test\9000000020test|~"  "events"=["v 0" "ct test test"]}      // Escaped 9-digit codepoint
                {"document"="\.~ c0 |ct test\ntest|~"           "events"=["v 0" "ct \.~ test
test~"]}  // Escaped newline
                {"document"="\.~ c0 |ct test\
                                          test|~"             "events"=["v 0" "ct testtest"]}  // Continuation
            ]
            "decodeMustFail" = [
                "\.~ c0 |ct test\1gtest|~"    // Invalid codepoint digit
                "\.~ c0 |ct test\xtest|~"     // Invalid escape character
                "\.~ c0 |ct test test~"       // Unterminated
                "\.~ c0 test test~"           // Missing bars
                "\.~ c0 |ct test\|~"          // Unterminated escape
                "\.~ c0 |ct test\1|~"         // Unterminated codepoint
                "\.~ c0 |ct test\21|~"        // Unterminated codepoint
                "\.~ c0 |ct test\301|~"       // Unterminated codepoint
                "\.~ c0 |ct test\4001|~"      // Unterminated codepoint
                "\.~ c0 |ct test\50001|~"     // Unterminated codepoint
                "\.~ c0 |ct test\600001|~"    // Unterminated codepoint
                "\.~ c0 |ct test\7000001|~"   // Unterminated codepoint
                "\.~ c0 |ct test\80000001|~"  // Unterminated codepoint
                "\.~ c0 |ct test\900000001|~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            "name" = "Custom Binary"
            "encode" = [
                {"events"=["v 0" "cb 04 f6 28 3c 40 00 00 40 40"]  "document"="c0\n|cb 04 f6 28 3c 40 00 00 40 40|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |cb 1f 2e 3d 4c|"  "events"=["v 0" "cb 1f 2e 3d 4c"]}
                {"document"="c0 |cb 1F 2E 3D 4C|"  "events"=["v 0" "cb 1f 2e 3d 4c"]}
                {"document"="c0 |cb |"             "events"=["v 0" "cb "]}
                {"document"="c0 |cb|"              "events"=["v 0" "cb "]}
            ]
            "decodeMustFail" = [
                "c0 |cb 00"  // Not terminated
                "c0 |cb gg|" // Non-hex characters
            ]
        }

        // ====================================================================

        {
            "name" = "Verbatim sequence"
            "decodeMustSucceed" = [
                {"document"="\.~ c0 "\.## ##"~"          "events"=["v 0" "s "]}
                {"document"="\.~ c0 "\.##
##"~"          "events"=["v 0" "s "]}
                {"document"="\.~ c0 "\.## a##"~"         "events"=["v 0" "s a"]}
                {"document"="\.~ c0 "\.@@
a@@"~"         "events"=["v 0" "s a"]}
                {"document"="c0 \"\\.^^^\r\na^^^\""        "events"=["v 0" "s a"]}
                {"document"="\.~ c0 "\.XXX blah blah
blah blahXXX"~"         "events"=["v 0" "s blah blah\nblah blah"]}
                {"document"="\.~ c0 "\.A \n\r\t\_\-A"~"  "events"=["v 0" "s \\n\\r\\t\\_\\-"]}
            ]
            "decodeMustFail" = [
                "\.~ c0 "\."~"        // No sentinel definition
                "\.~ c0 "\.X"~"       // Unterminated sentinel
                "\.~ c0 "\.XblahX"~"  // Missing WS between sentinel and contents
                "\.~ c0 "\.X blah"~"  // Missing end sentinel
            ]
        }

        // ====================================================================

        {
            "name" = "Bit array"
            "encode" = [
                {"events"=["v 0" "ab 110101000111000111"]  "document"="c0\n|b 110101000111000111|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |b|"                "events"=["v 0" "ab"]}
                {"document"="c0 |b 0|"              "events"=["v 0" "ab 0"]}
                {"document"="c0 |b 1|"              "events"=["v 0" "ab 1"]}
                {"document"="c0 |b 1 0 1 1 0 1|"    "events"=["v 0" "ab 101101"]}
                {"document"="c0 |b 101101 |"        "events"=["v 0" "ab 101101"]}
                {"document"="c0 |b 10110111|"       "events"=["v 0" "ab 10110111"]}
                {"document"="c0 |b 1  0 110 1 11|"  "events"=["v 0" "ab 10110111"]}
                {"document"="c0 |b 1011011110010100110101010101011001110101010110011010100101010010010010110101001100000010100011|"
                 "events"=["v 0" "ab 1011011110010100110101010101011001110101010110011010100101010010010010110101001100000010100011"]}
            ]
            "decodeMustFail" = [
                "c0 |b 2|"        // Non-binary digit
                "c0 |b -1|"       // Non-binary digit
                "c0 |b nan|"      // Non-binary digit
                "c0 |b 0x1|"      // Non-binary digit
            ]
        }

        // ====================================================================

        {
            "name" = "Int8 array"
            "encode" = [
                {"events"=["v 0" "ai8 1 2 3 127"]  "document"="c0\n|i8 1 2 3 127|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |i8|"                 "events"=["v 0" "ai8"]}
                {"document"="c0 |i8 |"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8 0 1 127 -128 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai8 0 1 127 -128 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i8b|"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8b 0 1 1011 -1001101 1111111 -10000000|"
                 "events"=["v 0" "ai8 0 1 11 -77 127 -128"]}
                {"document"="c0 |i8o|"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8o 177 -200 76|"    "events"=["v 0" "ai8 127 -128 62"]}
                {"document"="c0 |i8x|"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8x 7f -80 1c -29|"  "events"=["v 0" "ai8 127 -128 28 -41"]}
            ]
            "decodeMustFail" = [
                "c0 |i8 nan|"         // Non-int digit
                "c0 |i8 snan|"        // Non-int digit
                "c0 |i8 inf|"         // Non-int digit
                "c0 |i8 -inf|"        // Non-int digit
                "c0 |i8b 2|"          // Non-binary digit
                "c0 |i8b 10000000|"   // Element too big
                "c0 |i8b -10000001|"  // Element too big
                "c0 |i8o 9|"          // Non-octal digit
                "c0 |i8o 178|"        // Element too big
                "c0 |i8o -179|"       // Element too big
                "c0 |i8x g|"          // Non-hex digit
                "c0 |i8x 80|"         // Element too big
                "c0 |i8x -81|"        // Element too big
                "c0 |i8 a|"           // Non-int digit
                "c0 |i8 128|"         // Element too big
                "c0 |i8 -129|"        // Element too big
                "c0 |i8 0b10000000|"  // Element too big
                "c0 |i8 -0b10000001|" // Element too big
                "c0 |i8 0o178|"       // Element too big
                "c0 |i8 -0o179|"      // Element too big
                "c0 |i8 0x80|"        // Element too big
                "c0 |i8 -0x81|"       // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Int16 array"
            "encode" = [
                {"events"=["v 0" "ai16 1 2 3 32767"]  "document"="c0\n|i16 1 2 3 32767|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |i16|"                     "events"=["v 0" "ai16"]}
                {"document"="c0 |i16 |"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16 0 1 32767 -32768 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai16 0 1 32767 -32768 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i16b|"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16b 0 1 1011 -1001101 111111111111111 -1000000000000000|"
                 "events"=["v 0" "ai16 0 1 11 -77 32767 -32768"]}
                {"document"="c0 |i16o|"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16o 77777 -100000 76|"   "events"=["v 0" "ai16 32767 -32768 62"]}
                {"document"="c0 |i16x|"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16x 7fff -8000 1c -29|"  "events"=["v 0" "ai16 32767 -32768 28 -41"]}
            ]
            "decodeMustFail" = [
                "c0 |i16 nan|"                 // Non-int digit
                "c0 |i16 snan|"                // Non-int digit
                "c0 |i16 inf|"                 // Non-int digit
                "c0 |i16 -inf|"                // Non-int digit
                "c0 |i16b 2|"                  // Non-binary digit
                "c0 |i16b 1000000000000000|"   // Element too big
                "c0 |i16b -1000000000000001|"  // Element too big
                "c0 |i16o 9|"                  // Non-octal digit
                "c0 |i16o 100000|"             // Element too big
                "c0 |i16o -100001|"            // Element too big
                "c0 |i16x g|"                  // Non-hex digit
                "c0 |i16x 8000|"               // Element too big
                "c0 |i16x -8001|"              // Element too big
                "c0 |i16 a|"                   // Non-int digit
                "c0 |i16 32768|"               // Element too big
                "c0 |i16 -32769|"              // Element too big
                "c0 |i16 0b1000000000000000|"  // Element too big
                "c0 |i16 -0b1000000000000001|" // Element too big
                "c0 |i16 0o100000|"            // Element too big
                "c0 |i16 -0o100001|"           // Element too big
                "c0 |i16 0x8000|"              // Element too big
                "c0 |i16 -0x8001|"             // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Int32 array"
            "encode" = [
                {"events"=["v 0" "ai32 1 2 3 2147483647"]  "document"="c0\n|i32 1 2 3 2147483647|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |i32|"                     "events"=["v 0" "ai32"]}
                {"document"="c0 |i32 |"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32 0 1 2147483647 -2147483648 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai32 0 1 2147483647 -2147483648 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i32b|"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32b 0 1 1011 -1001101 1111111111111111111111111111111 -10000000000000000000000000000000|"
                 "events"=["v 0" "ai32 0 1 11 -77 2147483647 -2147483648"]}
                {"document"="c0 |i32o|"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32o 17777777777 -20000000000 76|"  "events"=["v 0" "ai32 2147483647 -2147483648 62"]}
                {"document"="c0 |i32x|"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32x 7fffffff -80000000 1c -29|"  "events"=["v 0" "ai32 2147483647 -2147483648 28 -41"]}
            ]
            "decodeMustFail" = [
                "c0 |i32 nan|"                                 // Non-int digit
                "c0 |i32 snan|"                                // Non-int digit
                "c0 |i32 inf|"                                 // Non-int digit
                "c0 |i32 -inf|"                                // Non-int digit
                "c0 |i32b 2|"                                  // Non-binary digit
                "c0 |i32b 10000000000000000000000000000000|"   // Element too big
                "c0 |i32b -10000000000000000000000000000001|"  // Element too big
                "c0 |i32o 9|"                                  // Non-octal digit
                "c0 |i32o 20000000000|"                        // Element too big
                "c0 |i32o -20000000001|"                       // Element too big
                "c0 |i32x g|"                                  // Non-hex digit
                "c0 |i32x 80000000|"                           // Element too big
                "c0 |i32x -80000001|"                          // Element too big
                "c0 |i32 a|"                                   // Non-int digit
                "c0 |i32 2147483648|"                          // Element too big
                "c0 |i32 -2147483649|"                         // Element too big
                "c0 |i32 0b10000000000000000000000000000000|"  // Element too big
                "c0 |i32 -0b10000000000000000000000000000001|" // Element too big
                "c0 |i32 0o20000000000|"                       // Element too big
                "c0 |i32 -0o20000000001|"                      // Element too big
                "c0 |i32 0x80000000|"                          // Element too big
                "c0 |i32 -0x80000001|"                         // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Int64 array"
            "encode" = [
                {"events"=["v 0" "ai64 1 2 3 9223372036854775807"]  "document"="c0\n|i64 1 2 3 9223372036854775807|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |i64|"                                "events"=["v 0" "ai64"]}
                {"document"="c0 |i64 |"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64 0 1 9223372036854775807 -9223372036854775808 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai64 0 1 9223372036854775807 -9223372036854775808 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i64b|"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64b 0 1 1011 -1001101 111111111111111111111111111111111111111111111111111111111111111
                                      -1000000000000000000000000000000000000000000000000000000000000000|"
                 "events"=["v 0" "ai64 0 1 11 -77 9223372036854775807 -9223372036854775808"]}
                {"document"="c0 |i64o|"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64o 777777777777777777777 -1000000000000000000000 76|"
                 "events"=["v 0" "ai64 9223372036854775807 -9223372036854775808 62"]}
                {"document"="c0 |i64x|"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64x 7fffffffffffffff -8000000000000000 1c -29|"
                 "events"=["v 0" "ai64 9223372036854775807 -9223372036854775808 28 -41"]}
            ]
            "decodeMustFail" = [
                "c0 |i64 nan|"                                 // Non-binary digit
                "c0 |i64 snan|"                                // Non-binary digit
                "c0 |i64 inf|"                                 // Non-binary digit
                "c0 |i64 -inf|"                                // Non-binary digit
                "c0 |i64b 2|"                                  // Non-binary digit
                "c0 |i64b 1000000000000000000000000000000000000000000000000000000000000000|"   // Element too big
                "c0 |i64b -1000000000000000000000000000000000000000000000000000000000000001|"  // Element too big
                "c0 |i64o 9|"                                  // Non-binary digit
                "c0 |i64o 1000000000000000000000|"             // Element too big
                "c0 |i64o -1000000000000000000001|"            // Element too big
                "c0 |i64x g|"                                  // Non-binary digit
                "c0 |i64x 8000000000000000|"                   // Element too big
                "c0 |i64x -8000000000000001|"                  // Element too big
                "c0 |i64 a|"                                   // Non-binary digit
                "c0 |i64 9223372036854775808|"                 // Element too big
                "c0 |i64 -9223372036854775809|"                // Element too big
                "c0 |i64 0b1000000000000000000000000000000000000000000000000000000000000000|"  // Element too big
                "c0 |i64 -0b1000000000000000000000000000000000000000000000000000000000000001|" // Element too big
                "c0 |i64 0o1000000000000000000000|"            // Element too big
                "c0 |i64 -0o1000000000000000000001|"           // Element too big
                "c0 |i64 0x8000000000000000|"                  // Element too big
                "c0 |i64 -0x8000000000000001|"                 // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint8 array"
            "encode" = [
                {"events"=["v 0" "au8 1 2 3 255"]  "document"="c0\n|u8x 01 02 03 ff|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |u8|"                 "events"=["v 0" "au8"]}
                {"document"="c0 |u8 |"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8 0 1 255 128 0b101 0o77 0x1b|"  "events"=["v 0" "au8 0 1 255 128 5 63 27"]}
                {"document"="c0 |u8b|"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8b 0 1 1011 1001101 11111111 10000000|"  "events"=["v 0" "au8 0 1 11 77 255 128"]}
                {"document"="c0 |u8o|"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8o 377 22 76|"      "events"=["v 0" "au8 255 18 62"]}
                {"document"="c0 |u8x|"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8x ff 80 1c 29|"    "events"=["v 0" "au8 255 128 28 41"]}
            ]
            "decodeMustFail" = [
                "c0 |u8 nan|"         // Non-uint digit
                "c0 |u8 snan|"        // Non-uint digit
                "c0 |u8 inf|"         // Non-uint digit
                "c0 |u8 -inf|"        // Non-uint digit
                "c0 |u8b 2|"          // Non-binary digit
                "c0 |u8b 100000000|"  // Element too big
                "c0 |u8o 9|"          // Non-octal digit
                "c0 |u8o 400|"        // Element too big
                "c0 |u8x g|"          // Non-hex digit
                "c0 |u8x 100|"        // Element too big
                "c0 |u8 a|"           // Non-uint digit
                "c0 |u8 256|"         // Element too big
                "c0 |u8 0b100000000|" // Element too big
                "c0 |u8 0o400|"       // Element too big
                "c0 |u8 0x100|"       // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint16 array"
            "encode" = [
                {"events"=["v 0" "au16 1 2 3 65535"]  "document"="c0\n|u16x 0001 0002 0003 ffff|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |u16|"                 "events"=["v 0" "au16"]}
                {"document"="c0 |u16 |"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16 0 1 65535 128 0b101 0o77 0x1b|"  "events"=["v 0" "au16 0 1 65535 128 5 63 27"]}
                {"document"="c0 |u16b|"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16b 0 1 1011 1001101 1111111111111111 10000000|"  "events"=["v 0" "au16 0 1 11 77 65535 128"]}
                {"document"="c0 |u16o|"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16o 177777 22 76|"   "events"=["v 0" "au16 65535 18 62"]}
                {"document"="c0 |u16x|"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16x ffff 80 1c 29|"  "events"=["v 0" "au16 65535 128 28 41"]}
            ]
            "decodeMustFail" = [
                "c0 |u16 nan|"                 // Non-uint digit
                "c0 |u16 snan|"                // Non-uint digit
                "c0 |u16 inf|"                 // Non-uint digit
                "c0 |u16 -inf|"                // Non-uint digit
                "c0 |u16b 2|"                  // Non-binary digit
                "c0 |u16b 10000000000000000|"  // Element too big
                "c0 |u16o 9|"                  // Non-octal digit
                "c0 |u16o 200000|"             // Element too big
                "c0 |u16x g|"                  // Non-hex digit
                "c0 |u16x 10000|"              // Element too big
                "c0 |u16 a|"                   // Non-uint digit
                "c0 |u16 65536|"               // Element too big
                "c0 |u16 0b10000000000000000|" // Element too big
                "c0 |u16 0o200000|"            // Element too big
                "c0 |u16 0x10000|"             // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint32 array"
            "encode" = [
                {"events"=["v 0" "au32 1 2 3 0xffffffff"]  "document"="c0\n|u32x 00000001 00000002 00000003 ffffffff|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |u32|"                     "events"=["v 0" "au32"]}
                {"document"="c0 |u32 |"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32 0 1 4294967295 128 0b101 0o77 0x1b|"
                 "events"=["v 0" "au32 0 1 4294967295 128 5 63 27"]}
                {"document"="c0 |u32b|"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32b 0 1 1011 1001101 11111111111111111111111111111111 10000000|"
                 "events"=["v 0" "au32 0 1 11 77 4294967295 128"]}
                {"document"="c0 |u32o|"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32o 37777777777 22 76|"  "events"=["v 0" "au32 4294967295 18 62"]}
                {"document"="c0 |u32x|"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32x ffffffff 80 1c 29|"  "events"=["v 0" "au32 4294967295 128 28 41"]}
            ]
            "decodeMustFail" = [
                "c0 |u32 nan|"                 // Non-uint digit
                "c0 |u32 snan|"                // Non-uint digit
                "c0 |u32 inf|"                 // Non-uint digit
                "c0 |u32 -inf|"                // Non-uint digit
                "c0 |u32b 2|"                  // Non-binary digit
                "c0 |u32b 100000000000000000000000000000000|" // Element too big
                "c0 |u32o 9|"                  // Non-octal digit
                "c0 |u32o 40000000000|"        // Element too big
                "c0 |u32x g|"                  // Non-hex digit
                "c0 |u32x 100000000|"          // Element too big
                "c0 |u32 a|"                   // Non-uint digit
                "c0 |u32 4294967296|"          // Element too big
                "c0 |u32 0b100000000000000000000000000000000|" // Element too big
                "c0 |u32 0o40000000000|"       // Element too big
                "c0 |u32 0x100000000|"         // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint64 array"
            "encode" = [
                {"events"=["v 0" "au64 1 2 3 0xffffffffffffffff"] 
                 "document"="c0\n|u64x 0000000000000001 0000000000000002 0000000000000003 ffffffffffffffff|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |u64|"                                "events"=["v 0" "au64"]}
                {"document"="c0 |u64 |"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64 0 1 18446744073709551615 128 0b101 0o77 0x1b|"
                 "events"=["v 0" "au64 0 1 18446744073709551615 128 5 63 27"]}
                {"document"="c0 |u64b|"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64b 0 1 1011 1001101 1111111111111111111111111111111111111111111111111111111111111111 10000000|"
                 "events"=["v 0" "au64 0 1 11 77 18446744073709551615 128"]}
                {"document"="c0 |u64o|"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64o 1777777777777777777777 22 76|"  "events"=["v 0" "au64 18446744073709551615 18 62"]}
                {"document"="c0 |u64x|"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64x ffffffffffffffff 80 1c 29|"     "events"=["v 0" "au64 18446744073709551615 128 28 41"]}
            ]
            "decodeMustFail" = [
                "c0 |u64 nan|"                      // Non-uint digit
                "c0 |u64 snan|"                     // Non-uint digit
                "c0 |u64 inf|"                      // Non-uint digit
                "c0 |u64 -inf|"                     // Non-uint digit
                "c0 |u64b 2|"                       // Non-binary digit
                "c0 |u64b 10000000000000000000000000000000000000000000000000000000000000000|" // Element too big
                "c0 |u64o 9|"                       // Non-octal digit
                "c0 |u64o 2000000000000000000000|"  // Element too big
                "c0 |u64x g|"                       // Non-hex digit
                "c0 |u64x 10000000000000000|"       // Element too big
                "c0 |u64 a|"                        // Non-uint digit
                "c0 |u64 18446744073709551616|"     // Element too big
                "c0 |u64 0b10000000000000000000000000000000000000000000000000000000000000000|" // Element too big
                "c0 |u64 0o2000000000000000000000|" // Element too big
                "c0 |u64 0x10000000000000000|"      // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Float16 array"
            "decodeMustSucceed" = [
            ]
            "decodeMustFail" = [
            ]
            // TODO: Float16 array
            "skip" = true
        }

        // ====================================================================

        {
            "name" = "Float32 array"
            // 24 sig bits, 8 exp bits
            "encode" = [
                {"events"=["v 0" "af32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]
                 "document"="c0\n|f32x 1.fep+10 -1.3p-40 1.111112p+127 1.111112p-126|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |f32|"                                "events"=["v 0" "af32"]}
                {"document"="c0 |f32x|"                               "events"=["v 0" "af32"]}
                {"document"="c0 |f32 1.4512e+20 9.41e-15 944523.55|"  "events"=["v 0" "af32 1.4512e+20 9.41e-15 944523.55"]}
                {"document"="c0 |f32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126|"
                 "events"=["v 0" "af32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]}
                {"document"="c0 |f32x 1.fep+10 -1.3p-40 1.111112p+127 1.111112p-126|"
                 "events"=["v 0" "af32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]}
                {"document"="c0 |f32 nan snan inf -inf|"              "events"=["v 0" "af32 nan snan inf -inf"]}
                {"document"="c0 |f32 NAN SNAN INF -INF|"              "events"=["v 0" "af32 nan snan inf -inf"]}
                {"document"="c0 |f32x nan snan inf -inf|"             "events"=["v 0" "af32 nan snan inf -inf"]}
                {"document"="c0 |f32x NAN SNAN INF -INF|"             "events"=["v 0" "af32 nan snan inf -inf"]}
            ]
            "decodeMustFail" = [
                "c0 |f32 -|"                              // Incomplete value
                "c0 |f32 -nan|"                           // NaN does not have a negative form
                "c0 |f32 -snan|"                          // NaN does not have a negative form
                "c0 |f32 0x1.fep+128|"                    // Exponent too big
                "c0 |f32 0x1.fep-127|"                    // Exponent too small
                "c0 |f32 0x1.fffffffffffffffffffffffff|"  // Coefficient too big
                "c0 |f32 -0x1.fffffffffffffffffffffffff|" // Coefficient too big
            ]
        }

        // ====================================================================

        {
            "name" = "Float64 array"
            // 53 sig bits, 11 exp bits
            "encode" = [
                {"events"=["v 0" "af64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]
                 "document"="c0\n|f64x 1.fep+10 -1.3p-40 1.111112p+1023 1.111112p-1022|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |f64|"                                "events"=["v 0" "af64"]}
                {"document"="c0 |f64x|"                               "events"=["v 0" "af64"]}
                {"document"="c0 |f64 1.4512e+20 9.41e-15 944523.55|"  "events"=["v 0" "af64 1.4512e+20 9.41e-15 944523.55"]}
                {"document"="c0 |f64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022|"
                 "events"=["v 0" "af64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]}
                {"document"="c0 |f64x 1.fep+10 -1.3p-40 1.111112p+1023 1.111112p-1022|"
                 "events"=["v 0" "af64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]}
                {"document"="c0 |f64 nan snan inf -inf|"              "events"=["v 0" "af64 nan snan inf -inf"]}
                {"document"="c0 |f64 NAN SNAN INF -INF|"              "events"=["v 0" "af64 nan snan inf -inf"]}
                {"document"="c0 |f64x nan snan inf -inf|"             "events"=["v 0" "af64 nan snan inf -inf"]}
                {"document"="c0 |f64x NAN SNAN INF -INF|"             "events"=["v 0" "af64 nan snan inf -inf"]}
            ]
            "decodeMustFail" = [
                "c0 |f64 -|"                              // Incomplete value
                "c0 |f64 -nan|"                           // NaN does not have a negative form
                "c0 |f64 -snan|"                          // NaN does not have a negative form
                "c0 |f64 0x1.fep+1024|"                   // Exponent too big
                "c0 |f64 0x1.fep-1023|"                   // Exponent too small
                "c0 |f64 0x1.fffffffffffffffffffffffff|"  // Coefficient too big
                "c0 |f64 -0x1.fffffffffffffffffffffffff|" // Coefficient too big
            ]
        }

        // ====================================================================

        {
            "name" = "UID array"
            "encode" = [
                {"events"=["v 0" "au ffffffff-ffff-ffff-ffff-ffffffffffff 2654AddE-9016-4cCa-bB44-860f39B49595"]
                 "document"="c0\n|u ffffffff-ffff-ffff-ffff-ffffffffffff 2654adde-9016-4cca-bb44-860f39b49595|"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 |u|"                                "events"=["v 0" "au"]}
                {"document"="c0 |u 00000000-0000-0000-0000-000000000000 ffffffff-ffff-ffff-ffff-ffffffffffff 2654AddE-9016-4cCa-bB44-860f39B49595|"  
                 "events"=["v 0" "au 00000000-0000-0000-0000-000000000000 ffffffff-ffff-ffff-ffff-ffffffffffff 2654adde-9016-4cca-bb44-860f39b49595"]}
            ]
            "decodeMustFail" = [
                "c0 |u -ffffffff-ffff-ffff-ffff-ffffffffffff|" // UIDs cannot be negative
                "c0 |u ffffffff-ffff-ffff-ffff-fffffffffff|"   // Incomplete
                "c0 |u ffffffffffffffffffffffffffffffff|"      // Malformed
                "c0 |u fffffff-fffff-ffff-ffff-fffffffffff|"   // Malformed
            ]
        }

        // ====================================================================

        {
            "name" = "Media"
            "encode" = [
                {
                    "events" = ["v 0" "mb" "ac 16 false" "at application/x-sh" "ac 28 false" "at \.^
#!/bin/sh

echo hello world
^"]
                    "document" = "\.^
c0
|application/x-sh 23 21 2f 62 69 6e 2f 73 68 0a 0a 65 63 68 6f 20 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a|^"
                }
            ]
            "decodeMustSucceed" = [
                {
                    "document" = "\.^
c0
|application/x-sh 23 21 2F 62 69 6E 2F 73 68 0A 0A 65 63 68 6F 20 68 65 6C 6C 6F 20 77 6F 72 6C 64 0A|^"
                    "events" = ["v 0" "mb" "ac 16 false" "at application/x-sh" "ac 28 false" "at \.^
#!/bin/sh

echo hello world
^"]
                }
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked bit array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "abb" "ac 0 false"]         "document"="c0\n|b|"}
                {"skipRoundTrip"=true "events"=["v 0" "abb" "ac 1 false" "ad 01"] "document"="c0\n|b 1|"}
                {"skipRoundTrip"=true "events"=["v 0" "abb" "ac 2 false" "ad 01"] "document"="c0\n|b 10|"}
                {"skipRoundTrip"=true "events"=["v 0" "abb" "ac 7 false" "ad 51"] "document"="c0\n|b 1000101|"}
                {"skipRoundTrip"=true "events"=["v 0" "abb" "ac 8 false" "ad d1"] "document"="c0\n|b 10001011|"}
                {"skipRoundTrip"=true "events"=["v 0" "abb" "ac 8 true" "ad d1" "ac 1 false" "ad 01"]
                 "document"="c0\n|b 100010111|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint8 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "au8b" "ac 0 false"]                             "document"="c0\n|u8x|"}
                {"skipRoundTrip"=true "events"=["v 0" "au8b" "ac 1 false" "ad ff"]                     "document"="c0\n|u8x ff|"}
                {"skipRoundTrip"=true "events"=["v 0" "au8b" "ac 2 false" "ad ff d4"]                  "document"="c0\n|u8x ff d4|"}
                {"skipRoundTrip"=true "events"=["v 0" "au8b" "ac 2 false" "ad ff" "ad d4"]             "document"="c0\n|u8x ff d4|"}
                {"skipRoundTrip"=true "events"=["v 0" "au8b" "ac 2 true" "ad ff" "ad d4" "ac 0 false"] "document"="c0\n|u8x ff d4|"}
                {"skipRoundTrip"=true "events"=["v 0" "au8b" "ac 1 true" "ad ff" "ac 1 false" "ad d4"] "document"="c0\n|u8x ff d4|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint16 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "au16b" "ac 0 false"]                   "document"="c0\n|u16x|"}
                {"skipRoundTrip"=true "events"=["v 0" "au16b" "ac 1 false" "ad ff 01"]        "document"="c0\n|u16x 01ff|"}
                {"skipRoundTrip"=true "events"=["v 0" "au16b" "ac 2 false" "ad ff 01 d4 aa"]  "document"="c0\n|u16x 01ff aad4|"}
                {"skipRoundTrip"=true "events"=["v 0" "au16b" "ac 2 false" "ad ff" "ad 01 d4 aa"]
                 "document"="c0\n|u16x 01ff aad4|"}
                {"skipRoundTrip"=true "events"=["v 0" "au16b" "ac 2 true" "ad ff" "ad 01 d4 aa" "ac 0 false"]
                 "document"="c0\n|u16x 01ff aad4|"}
                {"skipRoundTrip"=true "events"=["v 0" "au16b" "ac 1 true" "ad ff 01" "ac 1 false" "ad d4" "ad aa"]
                 "document"="c0\n|u16x 01ff aad4|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint32 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "au32b" "ac 0 false"]                   "document"="c0\n|u32x|"}
                {"skipRoundTrip"=true "events"=["v 0" "au32b" "ac 1 false" "ad 34 12 ff 01"]  "document"="c0\n|u32x 01ff1234|"}
                {"skipRoundTrip"=true "events"=["v 0" "au32b" "ac 2 false" "ad 34 12 ff 01 78 56 d4 aa"]  "document"="c0\n|u32x 01ff1234 aad45678|"}
                {"skipRoundTrip"=true "events"=["v 0" "au32b" "ac 2 false" "ad 34" "ad 12 ff 01" "ad 78 56 d4 aa"]
                 "document"="c0\n|u32x 01ff1234 aad45678|"}
                {"skipRoundTrip"=true "events"=["v 0" "au32b" "ac 2 true" "ad 34 12 ff 01 78 56 d4 aa" "ac 0 false"]
                 "document"="c0\n|u32x 01ff1234 aad45678|"}
                {"skipRoundTrip"=true "events"=["v 0" "au32b" "ac 1 true" "ad 34 12 ff 01" "ac 1 false" "ad 78 56 d4" "ad aa"]
                 "document"="c0\n|u32x 01ff1234 aad45678|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint64 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "au64b" "ac 0 false"]  "document"="c0\n|u64x|"}
                {"skipRoundTrip"=true "events"=["v 0" "au64b" "ac 1 false" "ad dd cc bb aa 34 12 ff 01"]
                 "document"="c0\n|u64x 01ff1234aabbccdd|"}
                {"skipRoundTrip"=true "events"=["v 0" "au64b" "ac 2 false" "ad dd cc bb aa 34 12 ff 01 44 33 22 11 78 56 d4 aa"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
                {"skipRoundTrip"=true "events"=["v 0" "au64b" "ac 2 false" "ad dd cc bb aa 34" "ad 12 ff 01 44 33" "ad 22 11 78 56 d4 aa"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
                {"skipRoundTrip"=true "events"=["v 0" "au64b" "ac 2 true" "ad dd cc bb aa 34 12 ff 01 44 33 22 11 78 56 d4 aa" "ac 0 false"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
                {"skipRoundTrip"=true "events"=["v 0" "au64b" "ac 1 true" "ad dd cc bb aa 34 12 ff 01" "ac 1 false" "ad 44 33 22 11 78 56 d4" "ad aa"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int8 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "ai8b" "ac 0 false"]                             "document"="c0\n|i8|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai8b" "ac 1 false" "ad 7f"]                     "document"="c0\n|i8 127|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai8b" "ac 2 false" "ad 7f 9f"]                  "document"="c0\n|i8 127 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai8b" "ac 2 false" "ad 7f" "ad 9f"]             "document"="c0\n|i8 127 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai8b" "ac 2 true" "ad 7f" "ad 9f" "ac 0 false"] "document"="c0\n|i8 127 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai8b" "ac 1 true" "ad 7f" "ac 1 false" "ad 9f"] "document"="c0\n|i8 127 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int16 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "ai16b" "ac 0 false"]                        "document"="c0\n|i16|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai16b" "ac 1 false" "ad ff 7f"]             "document"="c0\n|i16 32767|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai16b" "ac 2 false" "ad ff 7f 9f ff"]       "document"="c0\n|i16 32767 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai16b" "ac 2 false" "ad ff 7f" "ad 9f ff"]  "document"="c0\n|i16 32767 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai16b" "ac 2 true" "ad ff 7f" "ad 9f ff" "ac 0 false"]
                 "document"="c0\n|i16 32767 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai16b" "ac 1 true" "ad ff 7f" "ac 1 false" "ad 9f ff"]
                 "document"="c0\n|i16 32767 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int32 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "ai32b" "ac 0 false"]                   "document"="c0\n|i32|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai32b" "ac 1 false" "ad ff ff ff 7f"]  "document"="c0\n|i32 2147483647|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai32b" "ac 2 false" "ad ff ff ff 7f 9f ff ff ff"]
                 "document"="c0\n|i32 2147483647 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai32b" "ac 2 false" "ad ff ff ff 7f" "ad 9f ff ff ff"]
                 "document"="c0\n|i32 2147483647 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai32b" "ac 2 true" "ad ff ff ff 7f" "ad 9f ff ff ff" "ac 0 false"]
                 "document"="c0\n|i32 2147483647 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai32b" "ac 1 true" "ad ff ff ff 7f" "ac 1 false" "ad 9f ff ff ff"]
                 "document"="c0\n|i32 2147483647 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int64 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "ai64b" "ac 0 false"]  "document"="c0\n|i64|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai64b" "ac 1 false" "ad ff ff ff ff ff ff ff 7f"]
                 "document"="c0\n|i64 9223372036854775807|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai64b" "ac 2 false" "ad ff ff ff ff ff ff ff 7f 9f ff ff ff ff ff ff ff"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai64b" "ac 2 false" "ad ff ff ff ff ff ff ff 7f" "ad 9f ff ff ff ff ff ff ff"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai64b" "ac 2 true" "ad ff ff ff ff ff ff ff 7f" "ad 9f" "ad ff ff ff" "ad ff ff ff ff" "ac 0 false"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
                {"skipRoundTrip"=true "events"=["v 0" "ai64b" "ac 1 true" "ad ff ff ff ff ff ff ff 7f" "ac 1 false" "ad 9f ff" "ad ff ff ff ff ff ff"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float16 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 0 false"]                        "document"="c0\n|f16x|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 1 false" "ad ff 7f"]             "document"="c0\n|f16x nan|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 1 false" "ad bf 7f"]             "document"="c0\n|f16x snan|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 1 false" "ad 99 3f"]             "document"="c0\n|f16x 1.32|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 2 false" "ad ff 7f 99 3f"]       "document"="c0\n|f16x nan 1.32|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 2 false" "ad bf 7f" "ad 99 3f"]  "document"="c0\n|f16x snan 1.32|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 2 true" "ad 80 7f" "ad 80 ff" "ac 0 false"]
                 "document"="c0\n|f16x inf -inf|"}
                {"skipRoundTrip"=true "events"=["v 0" "af16b" "ac 1 true" "ad 80 7f" "ac 1 false" "ad 80 ff"]
                 "document"="c0\n|f16x inf -inf|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float32 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 0 false"]                   "document"="c0\n|f32x|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 1 false" "ad 00 00 ff 7f"]  "document"="c0\n|f32x nan|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 1 false" "ad 00 00 bf 7f"]  "document"="c0\n|f32x snan|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 1 false" "ad 00 00 99 3f"]  "document"="c0\n|f32x 1.32|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 2 false" "ad 00 00 ff 7f 00 00 99 3f"]
                 "document"="c0\n|f32x nan 1.32|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 2 false" "ad 00 00 bf 7f" "ad 00 00 99 3f"]
                 "document"="c0\n|f32x snan 1.32|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 2 true" "ad 00 00 80 7f" "ad 00 00 80 ff" "ac 0 false"]
                 "document"="c0\n|f32x inf -inf|"}
                {"skipRoundTrip"=true "events"=["v 0" "af32b" "ac 1 true" "ad 00 00 80 7f" "ac 1 false" "ad 00 00 80 ff"]
                 "document"="c0\n|f32x inf -inf|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float64 array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 0 false"]  "document"="c0\n|f64x|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 1 false" "ad 10 00 00 00 00 00 f8 7f"]
                 "document"="c0\n|f64x nan|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 1 false" "ad 10 00 00 00 00 00 f0 7f"]
                 "document"="c0\n|f64x snan|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 1 false" "ad 00 00 00 00 00 00 99 bf"]
                 "document"="c0\n|f64x -1.9p-06|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 2 false" "ad 10 00 00 00 00 00 f8 7f 00 00 00 00 00 00 99 bf"]
                 "document"="c0\n|f64x nan -1.9p-06|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 2 false" "ad 10 00 00 00 00 00 f0 7f" "ad 00 00 00 00 00 00 99 bf"]
                 "document"="c0\n|f64x snan -1.9p-06|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 2 true" "ad 00 00 00 00 00 00 f0 7f" "ad 00 00 00 00 00 00 f0 ff" "ac 0 false"]
                 "document"="c0\n|f64x inf -inf|"}
                {"skipRoundTrip"=true "events"=["v 0" "af64b" "ac 1 true" "ad 00" "ad 00 00 00 00 00 f0 7f" "ac 1 false" "ad 00 00 00 00 00" "ad 00 f0 ff"]
                 "document"="c0\n|f64x inf -inf|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked UID array"
            "encode" = [
                {"skipRoundTrip"=true "events"=["v 0" "aub" "ac 0 false"]  "document"="c0\n|u|"}
                {"skipRoundTrip"=true "events"=["v 0" "aub" "ac 1 false" "ad cb f4 9e b8 c2 4d 4a 4a be bc cd 2a 1a e4 d8 84"]
                 "document"="c0\n|u cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884|"}
                {"skipRoundTrip"=true "events"=["v 0" "aub" "ac 1 true" "ad cb f4 9e b8 c2 4d 4a 4a be bc cd 2a 1a e4 d8 84" "ac 0 false"]
                 "document"="c0\n|u cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884|"}
                {"skipRoundTrip"=true "events"=["v 0" "aub" "ac 2 false" "ad cb f4 9e b8 c2 4d 4a 4a be bc cd 2a 1a e4 d8 84 2e 66 10 38 4f 59 11 ec 81 d3 02 42 ac 13 00 03"]
                 "document"="c0\n|u cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884 2e661038-4f59-11ec-81d3-0242ac130003|"}
                {"skipRoundTrip"=true "events"=["v 0" "aub" "ac 2 false" "ad cb f4 9e b8 " "ad c2 4d 4a 4a be bc cd 2a 1a e4 d8 84 " "ad 2e 66 10 38 4f 59 11 ec 81 d3 02 42 ac 13 00 " "ad 03"]
                 "document"="c0\n|u cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884 2e661038-4f59-11ec-81d3-0242ac130003|"}
            ]
        }

        // ====================================================================

        {
            "name" = "List"
            "encode" = [
                {"events"=["v 0" "l" "e"] "document"="c0\n[]"}
                {
                    "events" = ["v 0" "l" "null" "b false" "n -1" "n 1.5e20" "n nan" "n snan" "n inf" "n -inf"
                                "s string" "rid https://concise-encoding.org" "l" "e" "m" "e" "mu blah" "e" "e" "e"]
                    "document"="\.^ c0
[
    null
    false
    -1
    1.5e+20
    nan
    snan
    inf
    -inf
    "string"
    @"https://concise-encoding.org"
    []
    {}
    <blah>
]^"
                }
            ]
            "decodeMustSucceed" = [
                {"document"="c0 []"   "events"=["v 0" "l" "e"]}
                {"document"="c0 [1]"  "events"=["v 0" "l" "n 1" "e"]}
            ]
            "decodeMustFail" = [
                "c0 ["  // Missing terminator
                "c0 [}" // Wrong terminator
                "c0 [>" // Wrong terminator
                "c0 [)" // Wrong terminator
            ]
        }

        // ====================================================================

        {
            "name" = "Map"
            "encode" = [
                {"events"=["v 0" "m" "e"] "document"="c0\n{}"}
                {
                    "events" = ["v 0" "m"
                                    "s string"              "null"
                                    "n 10"                  "b false"
                                    "rid https://x.org"     "n -1"
                                    "n 1.6444453466e1000"   "n 1.5e20"
                                    "b true"                "n nan"
                                    "t 2050-12-31"          "n snan"
                                    "t 2123-01-01/12:04:54" "n inf"
                                    "n 1"                   "n -inf"
                                    "n 2"                   "s string"
                                    "n 3"                   "rid https://concise-encoding.org"
                                    "n 4"                   "l" "e"
                                    "n 5"                   "m" "e"
                                    "uid cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884"  "mu blah" "e" "e"
                                "e"]
                    "document"="\.^ c0
{
    "string" = null
    10 = false
    @"https://x.org" = -1
    1.6444453466e+1000 = 1.5e+20
    true = nan
    2050-12-31 = snan
    2123-01-01/12:04:54 = inf
    1 = -inf
    2 = "string"
    3 = @"https://concise-encoding.org"
    4 = []
    5 = {}
    cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884 = <blah>
}^"
                }
            ]
            "decodeMustSucceed" = [
                {"document"="c0 {}"         "events"=["v 0" "m" "e"]}
                {"document"="c0 {\"a\"=1}"  "events"=["v 0" "m" "s a" "n 1" "e"]}
            ]
            "decodeMustFail" = [
                "c0 {"            // Missing terminator
                "c0 {]"           // Wrong terminator
                "c0 {>"           // Wrong terminator
                "c0 {)"           // Wrong terminator
                "c0 {1}"          // Missing value
                "c0 {1=}"         // Missing value
                "c0 {1:2}"        // Bad separator
                "c0 {null=1}"     // Invalid key type
                "c0 {nan=1}"      // Invalid key type
                "c0 {snan=1}"     // Invalid key type
                "c0 {[]=1}"       // Invalid key type
                "c0 {{}=1}"       // Invalid key type
                "c0 {<blah>=1}"   // Invalid key type
                "c0 {(1)=1}"      // Invalid key type
                "c0 {@(1 2 3)=1}" // Invalid key type
                "c0 {|ct a|=1}"   // Invalid key type
                "c0 {|cb 00|=1}"  // Invalid key type
                "c0 {|b|=1}"      // Invalid key type
                "c0 {|i8|=1}"     // Invalid key type
                "c0 {|i16|=1}"    // Invalid key type
                "c0 {|i32|=1}"    // Invalid key type
                "c0 {|i64|=1}"    // Invalid key type
                "c0 {|u8|=1}"     // Invalid key type
                "c0 {|u16|=1}"    // Invalid key type
                "c0 {|u32|=1}"    // Invalid key type
                "c0 {|u64|=1}"    // Invalid key type
                "c0 {|f16|=1}"    // Invalid key type
                "c0 {|f32|=1}"    // Invalid key type
                "c0 {|f64|=1}"    // Invalid key type
                "c0 {|u|=1}"      // Invalid key type
            ]
        }

        // ====================================================================

        {
            "name" = "Markup"
            "encode" = [
                {"events"=["v 0" "mu x" "e" "e"] "document"="c0\n<x>"}
                {"events"=["v 0" "mu x" "n 1" "n 2" "n 3" "n 4" "e" "e"] "document"="c0\n<x 1=2 3=4>"}
                {
                    "events" = ["v 0" "mu x" "e" "s a" "e"]
                    "document" = "\.^ c0
<x;
    a
>^"
                }
                {
                    "events" = ["v 0" "mu x" "n 1" "n 2" "n 3" "n 4" "e" "s a" "e"]
                    "document" = "\.^ c0
<x 1=2 3=4;
    a
>^"
                }
                {
                    "events" = ["v 0" "mu x" "e" "mu a" "e" "e" "e"]
                    "document" = "\.^ c0
<x;
    <a>
>^"
                }
                {
                    "events" = ["v 0" "mu x" "n 1" "n 2" "n 3" "n 4" "e" "mu a" "e" "e" "e"]
                    "document" = "\.^ c0
<x 1=2 3=4;
    <a>
>^"
                }
                {
                    "events" = ["v 0" "mu x" "n 1" "n 2" "n 3" "n 4" "e" "s blah" "mu a" "e" "e" "e"]
                    "document" = "\.^ c0
<x 1=2 3=4;
    blah
    <a>
>^"
                }
                {
                    "events" = ["v 0" "mu x" "n 1" "n 2" "n 3" "n 4" "e" "s blah<>\\" "mu a" "e" "e" "e"]
                    "document" = "\.^ c0
<x 1=2 3=4;
    blah\<\>\\
    <a>
>^"
                }
                {
                    "events" = ["v 0" "mu XYZ"
                                    "s string"              "null"
                                    "n 10"                  "b false"
                                    "rid https://x.org"     "n -1"
                                    "n 1.6444453466e1000"   "n 1.5e20"
                                    "b true"                "n nan"
                                    "t 2050-12-31"          "n snan"
                                    "t 2123-01-01/12:04:54" "n inf"
                                    "n 1"                   "n -inf"
                                    "n 2"                   "s string"
                                    "n 3"                   "rid https://concise-encoding.org"
                                    "n 4"                   "l" "e"
                                    "n 5"                   "m" "e"
                                    "uid cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884"  "mu blah" "e" "e"
                                "e" "s Some text" "e"]
                    "document" = "\.^ c0
<XYZ "string"=null 10=false @"https://x.org"=-1 1.6444453466e+1000=1.5e+20 true=nan 2050-12-31=snan 2123-01-01/12:04:54=inf 1=-inf 2="string" 3=@"https://concise-encoding.org" 4=[] 5={} cbf49eb8-c24d-4a4a-bebc-cd2a1ae4d884=<blah>;
    Some text
>^"
                }
            ]
            "decodeMustSucceed" = [
                {"document"="c0 <x>"                     "events"=["v 0" "mu x" "e" "e"]}
                {"document"="c0 <x;>"                    "events"=["v 0" "mu x" "e" "e"]}
                {"document"="c0 <x;Blah blah>"           "events"=["v 0" "mu x" "e" "s Blah blah" "e"]}
                {"document"="c0 <x \"a\"=1>"             "events"=["v 0" "mu x" "s a" "n 1" "e" "e"]}
                {"document"="c0 <x \"a\"=1; Some text>"  "events"=["v 0" "mu x" "s a" "n 1" "e" "s Some text" "e"]}
            ]
            "decodeMustFail" = [
                "c0 <"              // Missing identifier
                "c0 <x"             // Missing terminator
                "c0 <x]"            // Wrong terminator
                "c0 <x}"            // Wrong terminator
                "c0 <x)"            // Wrong terminator
                "c0 <x 1>"          // Missing value
                "c0 <x 1;a>"        // Missing value
                "c0 <x 1=>"         // Missing value
                "c0 <x 1=;a>"       // Missing value
                "c0 <x 1:2>"        // Bad separator
                "c0 <x 1:2;a>"      // Bad separator
                "c0 <x null=1>"     // Invalid key type
                "c0 <x nan=1>"      // Invalid key type
                "c0 <x snan=1>"     // Invalid key type
                "c0 <x []=1>"       // Invalid key type
                "c0 <x {}=1>"       // Invalid key type
                "c0 <x <blah>=1>"   // Invalid key type
                "c0 <x (1)=1>"      // Invalid key type
                "c0 <x @(1 2 3)=1>" // Invalid key type
                "c0 <x |ct a|=1>"   // Invalid key type
                "c0 <x |cb 00|=1>"  // Invalid key type
                "c0 <x |b|=1>"      // Invalid key type
                "c0 <x |i8|=1>"     // Invalid key type
                "c0 <x |i16|=1>"    // Invalid key type
                "c0 <x |i32|=1>"    // Invalid key type
                "c0 <x |i64|=1>"    // Invalid key type
                "c0 <x |u8|=1>"     // Invalid key type
                "c0 <x |u16|=1>"    // Invalid key type
                "c0 <x |u32|=1>"    // Invalid key type
                "c0 <x |u64|=1>"    // Invalid key type
                "c0 <x |f16|=1>"    // Invalid key type
                "c0 <x |f32|=1>"    // Invalid key type
                "c0 <x |f64|=1>"    // Invalid key type
                "c0 <x |u|=1>"      // Invalid key type
            ]
        }

        // ====================================================================

        {
            "name" = "Node"
            "encode" = [
                {"events"=["v 0" "node" "n 1" "e"] "document"="c0\n(1\n)"}
                {
                    "events" = ["v 0" "node" "null"
                                    "b false"
                                    "n -1"
                                    "node" "n 1.5e20"
                                        "n nan"
                                        "n snan"
                                    "e"
                                    "node" "n inf"
                                        "n -inf"
                                        "s string"
                                        "rid https://concise-encoding.org"
                                    "e"
                                    "node" "l" "e"
                                        "m" "e"
                                        "mu blah" "e" "e"
                                    "e"
                                "e"]
                    "document"="\.^ c0
(null
    false
    -1
    (1.5e+20
        nan
        snan
    )
    (inf
        -inf
        "string"
        @"https://concise-encoding.org"
    )
    ([]
        {}
        <blah>
    )
)^"
                }
            ]
            "decodeMustSucceed" = [
                {"document"="c0 (1)"  "events"=["v 0" "node" "n 1" "e"]}
            ]
            "decodeMustFail" = [
                "c0 ("   // Missing value
                "c0 (1"  // Missing terminator
                "c0 (1}" // Wrong terminator
                "c0 (1>" // Wrong terminator
                "c0 (1]" // Wrong terminator
            ]
        }

        // ====================================================================

        {
            "name" = "Edge"
            "encode" = [
                {"events"=["v 0" "edge" "n 1" "n 2" "n 3"] "document"="c0\n@(1 2 3)"}
                {"events"=["v 0" "edge" "n nan" "s x" "t 2001-08-14"] "document"="c0\n@(nan \"x\" 2001-08-14)"}
            ]
            "decodeMustSucceed" = [
                {"document"="c0 @(1 2 3)"  "events"=["v 0" "edge" "n 1" "n 2" "n 3"]}
                {"document"="c0 @(nan \"x\" 2001-08-14)"  "events"=["v 0" "edge" "n nan" "s x" "t 2001-08-14"]}
                {"document"="c0 @(@\"https://x.y\" 1.5 [1])"  "events"=["v 0" "edge" "rid https://x.y" "n 1.5" "l" "n 1" "e"]}
            ]
            "decodeMustFail" = [
                "c0 @("       // Missing value
                "c0 @(1"      // Missing value
                "c0 @(1 2"    // Missing value
                "c0 @(1 2 3"  // Missing terminator
                "c0 @(1 2 3}" // Wrong terminator
                "c0 @(1 2 3>" // Wrong terminator
                "c0 @(1 2 3]" // Wrong terminator
            ]
        }

        // ====================================================================

        {
            "name" = "Marker"
            "encode" = [
                {"events"=["v 0" "mark 1" "n 2"]  "document"="c0\n&1:2"}
                {"events"=["v 0" "mark 1" "s x"]  "document"="c0\n&1:\"x\""}
            ]
            "decodeMustFail" = [
                "c0 & 1:2"    // Bad whitespace
                "c0 & 1: 2"   // Bad whitespace
                "c0 & 1 :2"   // Bad whitespace
                "c0 & 1 : 2"  // Bad whitespace
                "c0 &1: 2"    // Bad whitespace
                "c0 &1 :2"    // Bad whitespace
                "c0 &1 : 2"   // Bad whitespace
                "c0 &1\"x\""  // Missing separator
                "c0 &1 \"x\"" // Missing separator
                // Identifier too long:
                "c0 &abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefgh:1"
            ]
        }

        // ====================================================================

        {
            "name" = "Reference"
            "encode" = [
                {
                    "events" = ["v 0" "l" "mark x" "n 2" "ref x" "e"]
                    "document" = "\.^
c0
[
    &x:2
    $x
]^"
                }
                {
                    "events" = ["v 0" "l" "ref x" "mark x" "n 2" "e"]
                    "document" = "\.^
c0
[
    $x
    &x:2
]^"
                }
                {
                    "events" = ["v 0" "m" "s My key" "mark mykey" "s Blah blah" "ref mykey" "n 1000" "e"]
                    "document" = "\.^
c0
{
    "My key" = &mykey:"Blah blah"
    $mykey = 1000
}^"
                }
                {
                    "events" = ["v 0" "m" "ref mykey" "n 1000" "s My key" "mark mykey" "s Blah blah" "e"]
                    "document" = "\.^
c0
{
    $mykey = 1000
    "My key" = &mykey:"Blah blah"
}^"
                }
            ]
            "decodeMustFail" = [
                "c0 [&x:2 $y]"                                   // Unknown ID
                "c0 [$y &x:2]"                                   // Unknown ID
                "\.^ c0 {$mykey=1000 "My key"=&mykey:null}^"     // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:nan}^"      // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:snan}^"     // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:[]}^"       // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:{}}^"       // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:<blah>}^"   // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:(1)}^"      // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:@(1 2 3)}^" // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|ct a|}^"   // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|cb 00|}^"  // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|b|}^"      // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|i8|}^"     // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|i16|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|i32|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|i64|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|u8|}^"     // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|u16|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|u32|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|u64|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|f16|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|f32|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|f64|}^"    // Referenced object not keyable type
                "\.^ c0 {$mykey=1000 "My key"=&mykey:|u|}^"      // Referenced object not keyable type
            ]
        }

        // ====================================================================

    ]
}
