c0
// Template for a Concise Encoding test suite file
{
    // Basic metadata:
    "type" = {
        "identifier" = "ce-test" // Identifies this as a Concise Encoding test suite
        "version" = 1            // Test suite schema version (not the CE version)
    }
    "ceversion" = 0              // The version of Concise Encoding that we are testing

    // The actual tests
    "tests" = [

        /* A test consists of data fields (named `cbe`, `cte`, `events`) that will be converted
         * to/from the listed forms, and then compared to make sure the codec produces the expected result.
         * All permutations will be checked, including to/from the same type (e.g. from CTE to CTE).
         *
         * A data field name can be prepended with  `to_` or `from_` to set its directionality.
         * For example:
         * - Only convert from CBE to CTE:           `from_cbe`, `to_cte`.
         * - Convert from CBE to CTE and CBE to CBE: `cbe`, `to_cte`.
         * - Only convert from events to CTE:        `from_events`, `to_cte`.
         *
         * Notes:
         * - Events are shorthand representations of internal events associated with CE data
         *   (see the bottom of this file).
         * - CTE data is string compared (after trimming leading and trailing whitespace),
         *   so unexpected indentation will cause the comparison to fail.
         * - Numeric data is compared based on the actual value represented, disregarding its type.
         * - All test data will implicitly have a document header prepended so that you don't
         *   need to keep adding such boilerplate. If you need to explicitly test the document
         *   header itself, set `raw_document` to true. See `version.cte` for an example.
         */

        {
            "name" = "CE Test Case Template"
            "must_succeed" = [
                {
                    // Required: At least one source and one destination
                    "cte"          = "null"   // or from_cte, or to_cte
                    "cbe"          = |u8x 7d| // or from_cbe, or to_cbe
                    "events"       = ["null"] // or from_events, or to_events

                    // Optional:
                    "debug"        = false // Generate a stack trace on test failure (default false)
                    "skip"         = false // Temporarily disable this test (default false)
                    "raw_document" = false // If true, don't add an implicit document header (default false)
                }
            ]
            "must_fail" = [
                {
                    // Required: cte, cbe, or events
                    "cte" = "[1 2 3" // Expected failure: Unterminated list (CTE)
                }
                {
                    "cbe" = |u8x 9a 01 02 03| // Expected failure: Unterminated list (CBE)
                }
            ]
        }
    ]

/* Event types & arguments:
 *
 * Events are string-based shorthands written in one of two forms, depending on whether
 * there are arguments:
 * - "event_name"
 * - "event_name=argument"
 *
 * Some events are composite events that break down into more primitive types. These are
 * provided as a convenience so that you don't need to manually calculate lengths. For example:
 * - "s=abc" breaks down into ["bs" "acl=3" "adt=abc"]
 * - "media=x/y f0 0d" breaks down into ["bmedia=x/y" "acl=2" "adu8x=f0 0d"]
 *
 * Notes:
 * - For some array or string types, data is optional. For example "au8x" is an empty byte array,
 *   whereas "au8x=00 01" is a 2-byte array.
 * - "custom type" is an unsigned integer.
 *
 * | Name   | Arguments                   | Opt | Comp | Description               |
 * | ------ | --------------------------- | --- | ---- | ------------------------- |
 * | ab     | <bit elements>              |  Y  |  Y   | Array: Bits               |
 * | acl    | <element count>             |     |      | Array Chunk (last chunk)  |
 * | acm    | <element count>             |     |      | Array Chunk (more follow) |
 * | adb    | <bit elements>              |     |      | Array Data: Bits          |
 * | adf16  | <float elements>            |     |      | Array Data: Float16       |
 * | adf32  | <float elements>            |     |      | Array Data: Float32       |
 * | adf64  | <float elements>            |     |      | Array Data: Float64       |
 * | adi16  | <int elements>              |     |      | Array Data: Int16         |
 * | adi32  | <int elements>              |     |      | Array Data: Int32         |
 * | adi64  | <int elements>              |     |      | Array Data: Int64         |
 * | adi8   | <int elements>              |     |      | Array Data: Int8          |
 * | adt    | <string data>               |     |      | Array Data: Text          |
 * | adu    | <UID elements>              |     |      | Array Data: UID           |
 * | adu16  | <uint elements>             |     |      | Array Data: Uint16        |
 * | adu16x | <hex elements>              |     |      | Array Data: Uint16 (hex)  |
 * | adu32  | <uint elements>             |     |      | Array Data: Uint32        |
 * | adu32x | <hex elements>              |     |      | Array Data: Uint32 (hex)  |
 * | adu64  | <uint elements>             |     |      | Array Data: Uint64        |
 * | adu64x | <hex elements>              |     |      | Array Data: Uint64 (hex)  |
 * | adu8   | <uint elements>             |     |      | Array Data: Uint8         |
 * | adu8x  | <hex elements>              |     |      | Array Data: Uint8 (hex)   |
 * | af16   | <float elements>            |  Y  |  Y   | Array: Float16            |
 * | af32   | <float elements>            |  Y  |  Y   | Array: Float32            |
 * | af64   | <float elements>            |  Y  |  Y   | Array: Float64            |
 * | ai16   | <int elements>              |  Y  |  Y   | Array: Int16              |
 * | ai32   | <int elements>              |  Y  |  Y   | Array: Int32              |
 * | ai64   | <int elements>              |  Y  |  Y   | Array: Int64              |
 * | ai8    | <int elements>              |  Y  |  Y   | Array: Int8               |
 * | au     | <UID elements>              |  Y  |  Y   | Array: UID                |
 * | au16   | <uint elements>             |  Y  |  Y   | Array: Uint16             |
 * | au16x  | <hex elements>              |  Y  |  Y   | Array: Uint16 (hex)       |
 * | au32   | <uint elements>             |  Y  |  Y   | Array: Uint32             |
 * | au32x  | <hex elements>              |  Y  |  Y   | Array: Uint32 (hex)       |
 * | au64   | <uint elements>             |  Y  |  Y   | Array: Uint64             |
 * | au64x  | <hex elements>              |  Y  |  Y   | Array: Uint64 (hex)       |
 * | au8    | <uint elements>             |  Y  |  Y   | Array: Uint8              |
 * | au8x   | <hex elements>              |  Y  |  Y   | Array: Uint8 (hex)        |
 * | b      | <value>                     |     |      | Boolean                   |
 * | bab    |                             |     |      | Begin Array: Bits         |
 * | baf16  |                             |     |      | Begin Array: Float16      |
 * | baf32  |                             |     |      | Begin Array: Float32      |
 * | baf64  |                             |     |      | Begin Array: Float64      |
 * | bai16  |                             |     |      | Begin Array: Int16        |
 * | bai32  |                             |     |      | Begin Array: Int32        |
 * | bai64  |                             |     |      | Begin Array: Int64        |
 * | bai8   |                             |     |      | Begin Array: Int8         |
 * | bau    |                             |     |      | Begin Array: UID          |
 * | bau16  |                             |     |      | Begin Array: Uint16       |
 * | bau32  |                             |     |      | Begin Array: Uint32       |
 * | bau64  |                             |     |      | Begin Array: Uint64       |
 * | bau8   |                             |     |      | Begin Array: Uint8        |
 * | bcb    | <custom type>               |     |      | Begin Custom Binary       |
 * | bct    | <custom type>               |     |      | Begin Custom Text         |
 * | bf     | <value>                     |     |      | Binary Float              |
 * | bmedia | <media type>                |     |      | Begin Media               |
 * | brefr  |                             |     |      | Begin Remote Reference    |
 * | brid   |                             |     |      | Begin Resource ID         |
 * | bs     |                             |     |      | Begin String              |
 * | cb     | <custom type> <hex bytes>   |  Y  |  Y   | Custom Binary             |
 * | cm     | <contents>                  |  Y  |      | Multiline Comment         |
 * | cs     | <contents>                  |  Y  |      | Single Line Comment       |
 * | ct     | <custom type> <string data> |  Y  |  Y   | Custom Text               |
 * | df     | <value>                     |     |      | Decimal Float             |
 * | e      |                             |     |      | End Container             |
 * | edge   |                             |     |      | Begin Edge                |
 * | i      | <value>                     |     |      | Integer                   |
 * | l      |                             |     |      | Begin List                |
 * | m      |                             |     |      | Begin Map                 |
 * | mark   | <identifier>                |     |      | Mark next object          |
 * | media  | <media type> <hex bytes>    |  Y  |  Y   | Media                     |
 * | n      | <int or float>              |     |      | Number (auto-detect)      |
 * | node   |                             |     |      | Begin Node                |
 * | null   |                             |     |      | Null                      |
 * | pad    |                             |     |      | Padding                   |
 * | refl   | <identifier>                |     |  Y   | Local Reference           |
 * | refr   | <resource ID contents>      |  Y  |  Y   | Remote reference          |
 * | rid    | <string data>               |  Y  |  Y   | Resource ID               |
 * | rec    |                             |     |      | Begin Record              |
 * | rt     |                             |     |      | Begin Record Type         |
 * | s      | <string data>               |  Y  |  Y   | String                    |
 * | t      | <value>                     |     |      | Time                      |
 * | uid    | <value>                     |     |      | UID                       |
 * | v      | <positive integer>          |     |      | Version specifier         |
 */
}
