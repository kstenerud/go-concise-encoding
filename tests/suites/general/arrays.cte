c0
{
    "type" = {
        "identifier" = "ce-test"
        "version" = 1
    }
    "ceversion" = 0
    "tests" = [

        // ====================================================================

        {
            "name" = "Float16 array"
            // 8 sig bits, 8 exp bits
            "mustSucceed" = [
                {"from_cte"="|f16|"                      "events"=["af16"]}
                {"from_cte"="|f16x|"                     "events"=["af16"]}
                {"from_cte"="|f16 0x1.5p2 -0x1.f8p-20|"  "events"=["af16=0x1.5p2 -0x1.f8p-20"]}
// TODO: printing as 1.5p+02                {"cte"="|f16x 1.5p+2 -1.f8p-20|"    "events"=["af16=0x1.5p2 -0x1.f8p-20"]}
                {"from_cte"="|f16 nan snan inf -inf|"    "events"=["af16=nan snan inf -inf"]}
                {"from_cte"="|f16 NAN SNAN INF -INF|"    "events"=["af16=nan snan inf -inf"]}
                {"cte"="|f16x nan snan inf -inf|"        "events"=["af16=nan snan inf -inf"]}
                {"from_cte"="|f16x NAN SNAN INF -INF|"   "events"=["af16=nan snan inf -inf"]}
            ]
            "mustFail" = [
                {"cte"="|f16 -|"}           // Incomplete value
                {"cte"="|f16 -nan|"}        // NaN does not have a negative form
                {"cte"="|f16 -snan|"}       // NaN does not have a negative form
                {"cte"="|f16 0x1p+128|"}    // Exponent too big
                {"cte"="|f16 0x1p-150|"}    // Exponent too small
            ]
        }

        // ====================================================================

        {
            "name" = "Float32 array"
            // 24 sig bits, 8 exp bits
            "mustSucceed" = [
                {
                    "cte"="|f32x 1.f19p+10 -1.3p-40 1.111112p+127 1.111112p-126|"
                    "events"=["af32=0x1.f19p+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]
                }
                {"from_cte"="|f32|"                                "events"=["af32"]}
                {"cte"="|f32x|"                                    "events"=["af32"]}
                {"from_cte"="|f32 1.4512e+20 9.41e-15 944523.55|"  "events"=["af32=1.4512e+20 9.41e-15 944523.55"]}
                {
                    "from_cte"="|f32 0x1.f19p+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126|"
                    "events"=["af32=0x1.f19p+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]
                }
                {
                    "cte"="|f32x 1.f19p+10 -1.3p-40 1.111112p+127 1.111112p-126|"
                    "events"=["af32=0x1.f19p+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]
                }
                {"from_cte"="|f32 nan snan inf -inf|"              "events"=["af32=nan snan inf -inf"]}
                {"from_cte"="|f32 NAN SNAN INF -INF|"              "events"=["af32=nan snan inf -inf"]}
                {"cte"="|f32x nan snan inf -inf|"                  "events"=["af32=nan snan inf -inf"]}
                {"from_cte"="|f32x NAN SNAN INF -INF|"             "events"=["af32=nan snan inf -inf"]}
            ]
            "mustFail" = [
                {"cte"="|f32 -|"}                              // Incomplete value
                {"cte"="|f32 -nan|"}                           // NaN does not have a negative form
                {"cte"="|f32 -snan|"}                          // NaN does not have a negative form
                {"cte"="|f16 0x1p+128|"}                       // Exponent too big
                {"cte"="|f16 0x1p-151|"}                       // Exponent too small
            ]
        }

        // ====================================================================

        {
            "name" = "Float64 array"
            // 53 sig bits, 11 exp bits
            "mustSucceed" = [
                {
                    "cte"="|f64x 1.f19p+10 -1.3p-40 1.111112p+1023 1.111112p-1022|"
                    "events"=["af64=0x1.f19p+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]
                }
                {"from_cte"="|f64|"                                "events"=["af64"]}
                {"cte"="|f64x|"                                    "events"=["af64"]}
                {"from_cte"="|f64 1.4512e+20 9.41e-15 944523.55|"  "events"=["af64=1.4512e+20 9.41e-15 944523.55"]}
                {
                    "from_cte"="|f64 0x1.f19p+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022|"
                    "events"=["af64=0x1.f19p+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]
                }
                {
                    "cte"="|f64x 1.f19p+10 -1.3p-40 1.111112p+1023 1.111112p-1022|"
                    "events"=["af64=0x1.f19p+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]
                }
                {"from_cte"="|f64 nan snan inf -inf|"              "events"=["af64=nan snan inf -inf"]}
                {"from_cte"="|f64 NAN SNAN INF -INF|"              "events"=["af64=nan snan inf -inf"]}
                {"cte"="|f64x nan snan inf -inf|"                  "events"=["af64=nan snan inf -inf"]}
                {"from_cte"="|f64x NAN SNAN INF -INF|"             "events"=["af64=nan snan inf -inf"]}
            ]
            "mustFail" = [
                {"cte"="|f64 -|"}                              // Incomplete value
                {"cte"="|f64 -nan|"}                           // NaN does not have a negative form
                {"cte"="|f64 -snan|"}                          // NaN does not have a negative form
                {"cte"="|f64 0x1p+1024|"}                      // Exponent too big
                {"cte"="|f64 0x1p-1075|"}                      // Exponent too small
            ]
        }

        // ====================================================================

        {
            "name" = "UID array"
            "mustSucceed" = [
                {
                    "cte"="|u ffffffff-ffff-ffff-ffff-ffffffffffff 2654adde-9016-4cca-bb44-860f39b49595|"
                    "events"=["au=ffffffff-ffff-ffff-ffff-ffffffffffff 2654AddE-9016-4cCa-bB44-860f39B49595"]
                }
                {"cte"="|u|"                                "events"=["au"]}
                {
                    "from_cte"="|u 00000000-0000-0000-0000-000000000000 ffffffff-ffff-ffff-ffff-ffffffffffff 2654AddE-9016-4cCa-bB44-860f39B49595|"  
                    "events"=["au=00000000-0000-0000-0000-000000000000 ffffffff-ffff-ffff-ffff-ffffffffffff 2654adde-9016-4cca-bb44-860f39b49595"]
                }
            ]
            "mustFail" = [
                {"cte"="|u -ffffffff-ffff-ffff-ffff-ffffffffffff|"} // UIDs cannot be negative
                {"cte"="|u ffffffff-ffff-ffff-ffff-fffffffffff|"}   // Incomplete
                {"cte"="|u ffffffffffffffffffffffffffffffff|"}      // Malformed
                {"cte"="|u fffffff-fffff-ffff-ffff-fffffffffff|"}   // Malformed
            ]
        }

        // ====================================================================

        {
            "name" = "Bit array"
            "mustSucceed" = [
                {"events"=["ab=110101000111000111"]  "cte"="|b 110101000111000111|"}
                {"cte"="|b|"                     "events"=["ab"]}
                {"cte"="|b 0|"                   "events"=["ab=0"]}
                {"cte"="|b 1|"                   "events"=["ab=1"]}
                {"from_cte"="|b 1 0 1 1 0 1|"    "events"=["ab=101101"]}
                {"from_cte"="|b 101101 |"        "events"=["ab=101101"]}
                {"cte"="|b 10110111|"            "events"=["ab=10110111"]}
                {"from_cte"="|b 1  0 110 1 11|"  "events"=["ab=10110111"]}
                {
                    "cte"="|b 1011011110010100110101010101011001110101010110011010100101010010010010110101001100000010100011|"
                    "events"=["ab=1011011110010100110101010101011001110101010110011010100101010010010010110101001100000010100011"]
                }
            ]
            "mustFail" = [
                {"cte"="|b 2|"}        // Non-binary digit
                {"cte"="|b -1|"}       // Non-binary digit
                {"cte"="|b nan|"}      // Non-binary digit
                {"cte"="|b 0x1|"}      // Non-binary digit
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float16 array"
            "mustSucceed" = [
                {"events"=["baf16" "acl=0"]                     "to_cte"="|f16x|"}
                {"events"=["baf16" "acl=1" "adf16=nan"]         "to_cte"="|f16x nan|"}
                {"events"=["baf16" "acl=1" "adf16=snan"]        "to_cte"="|f16x snan|"}
                {"events"=["baf16" "acl=1" "adf16=0x1.a2"]      "to_cte"="|f16x 1.a2|"}
                {"events"=["baf16" "acl=2" "adf16=nan 0x1.a2"]  "to_cte"="|f16x nan 1.a2|"}
                {
                    "events"=["baf16" "acm=2" "adf16=inf -inf" "acl=0"]
                    "to_cte"="|f16x inf -inf|"
                }
                {
                    "events"=["baf16" "acm=1" "adf16=inf" "acl=1" "adf16=-inf"]
                    "to_cte"="|f16x inf -inf|"
                }
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float32 array"
            "mustSucceed" = [
                {"events"=["baf32" "acl=0"]                    "to_cte"="|f32x|"}
                {"events"=["baf32" "acl=1" "adf32=nan"]        "to_cte"="|f32x nan|"}
                {"events"=["baf32" "acl=1" "adf32=snan"]       "to_cte"="|f32x snan|"}
                {"events"=["baf32" "acl=1" "adf32=0x1.a9ee3"]  "to_cte"="|f32x 1.a9ee3|"}
                {
                    "events"=["baf32" "acl=2" "adf32=nan 0x1.a9ee3"]
                    "to_cte"="|f32x nan 1.a9ee3|"
                }
                {
                    "events"=["baf32" "acm=2" "adf32=inf -inf" "acl=0"]
                    "to_cte"="|f32x inf -inf|"
                }
                {
                    "events"=["baf32" "acm=1" "adf32=inf" "acl=1" "adf32=-inf"]
                    "to_cte"="|f32x inf -inf|"
                }
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float64 array"
            "mustSucceed" = [
                {"events"=["baf64" "acl=0"]  "to_cte"="|f64x|"}
                {
                    "events"=["baf64" "acl=1" "adf64=nan"]
                    "to_cte"="|f64x nan|"
                }
                {
                    "events"=["baf64" "acl=1" "adf64=snan"]
                    "to_cte"="|f64x snan|"
                }
                {
                    "events"=["baf64" "acl=1" "adf64=-0x1.9a6638c19ff4p-20"]
                    "to_cte"="|f64x -1.9a6638c19ff4p-20|"
                }
                {
                    "events"=["baf64" "acl=2" "adf64=nan -0x1.9a6638c19ff4p-20"]
                    "to_cte"="|f64x nan -1.9a6638c19ff4p-20|"
                }
                {
                    "events"=["baf64" "acm=2" "adf64=inf -inf" "acl=0"]
                    "to_cte"="|f64x inf -inf|"
                }
                {
                    "events"=["baf64" "acm=1" "adf64=inf" "acl=1" "adf64=-inf"]
                    "to_cte"="|f64x inf -inf|"
                }
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked bit array"
            "mustSucceed" = [
                {"events"=["bab" "acl=0"]                "to_cte"="|b|"}
                {"events"=["bab" "acl=1" "adb=1"]        "to_cte"="|b 1|"}
                {"events"=["bab" "acl=2" "adb=10"]       "to_cte"="|b 10|"}
                {"events"=["bab" "acl=7" "adb=1000101"]  "to_cte"="|b 1000101|"}
                {"events"=["bab" "acl=8" "adb=10001011"] "to_cte"="|b 10001011|"}
                {
                    "events"=["bab" "acm=8" "adb=10001011" "acl=1" "adb=1"]
                    "to_cte"="|b 100010111|"
                }
            ]
        }

        // ====================================================================

        {
            "name" = "String"
            "mustSucceed" = [
                {"cte"="\"this is a string\""  "events"=["s=this is a string"]}
                {
                    "cte"="\"\
                        sky வானம் ሰማይ سماء երկինք səma неба আকাশ небето 天空 \
                        ცა ουρανός આકાશ syèl שָׁמַיִם आकाश ég 空 ಆಕಾಶ аспан មេឃ 하늘 \
                        asûman асман ທ້ອງຟ້າ небото ആകാശം आकाश тэнгэр ကောင်းကင် \
                        आकाश ଆକାଶ اسمان آسمان céu ਅਸਮਾਨ небо අහස வானம் күк ఆకాశం \
                        ท้องฟ้า gökyüzü آسمان ئاسمان bầu trời הימל ọrun\""
                    "events"=["s=\
                        sky வானம் ሰማይ سماء երկինք səma неба আকাশ небето 天空 \
                        ცა ουρανός આકાશ syèl שָׁמַיִם आकाश ég 空 ಆಕಾಶ аспан មេឃ 하늘 \
                        asûman асман ທ້ອງຟ້າ небото ആകാശം आकाश тэнгэр ကောင်းကင် \
                        आकाश ଆକାଶ اسمان آسمان céu ਅਸਮਾਨ небо අහස வானம் күк ఆకాశం \
                        ท้องฟ้า gökyüzü آسمان ئاسمان bầu trời הימל ọrun"]
                }
                {"cte"="\"test test\""                    "events"=["s=test test"]}
                {"cte"="\"\""                             "events"=["s="]}               // Empty string
                {"cte"="\"test/*test\""                   "events"=["s=test/*test"]}     // Comment initiator inside a string
                {"cte"="\"test*/test\""                   "events"=["s=test*/test"]}     // Comment terminator inside a string
                {"from_cte"="\.~ "test\ttest"~"           "events"=["s=test\[9]test"]}   // Escaped tab
                {"from_cte"="\.~ "test\rtest"~"           "events"=["s=test\[d]test"]}   // Escaped CR
                {"from_cte"="\.~ "test\"test"~"           "events"=["s=\.~ test"test~"]} // Escaped quote
                {"from_cte"="\.~ "test\\test"~"           "events"=["s=\.~ test\test~"]} // Escaped backslash
                {"from_cte"="\.~ "test\/test"~"           "events"=["s=\.~ test/test~"]} // Escaped slash
                {"from_cte"="\.~ "test\*test"~"           "events"=["s=\.~ test*test~"]} // Escaped star
                {"from_cte"="\.~ "test\_test"~"           "events"=["s=test\[a0]test"]}  // Escaped non-breaking space
                {"from_cte"="\.~ "test\-test"~"           "events"=["s=test\[ad]test"]}  // Escaped soft hyphen
                {"from_cte"="\.~ "test\[a]test"~"         "events"=["s=test\ntest"]}     // Escaped 1-digit codepoint
                {"from_cte"="\.~ "test\[f7]test"~"        "events"=["s=test÷test"]}      // Escaped 2-digit codepoint
                {"from_cte"="\.~ "test\[17d]test"~"       "events"=["s=testŽtest"]}      // Escaped 3-digit codepoint
                {"from_cte"="\.~ "test\[2021]test"~"      "events"=["s=test‡test"]}      // Escaped 4-digit codepoint
                {"from_cte"="\.~ "test\[1f43a]test"~"     "events"=["s=test🐺test"]}     // Escaped 5-digit codepoint
                {"from_cte"="\.~ "test\[000020]test"~"    "events"=["s=test test"]}      // Escaped 6-digit codepoint
                {"from_cte"="\.~ "test\[0000020]test"~"   "events"=["s=test test"]}      // Escaped 7-digit codepoint
                {"from_cte"="\.~ "test\[00000020]test"~"  "events"=["s=test test"]}      // Escaped 8-digit codepoint
                {"from_cte"="\.~ "test\[000000020]test"~" "events"=["s=test test"]}      // Escaped 9-digit codepoint
                {"from_cte"="\.~ "test\ntest"~"           "events"=["s=\.~ test
test~"]}  // Escaped newline
                {"from_cte"="\.~ "test\
test"~"  "events"=["s=testtest"]}     // Continuation
            ]
            "mustFail" = [
                {"cte"="\.~ "test\1gtest"~"}     // Invalid codepoint digit
                {"cte"="\.~ "test\xtest"~"}      // Invalid escape character
                {"cte"="\.~ "test=test~"}        // Unterminated quotes
                {"cte"="\.~ test test~"}         // Missing quotes
                {"cte"="\.~ "test\"~"}           // Unterminated escape
                {"cte"="\.~ "test\["~"}          // Unterminated escape
                {"cte"="\.~ "test\[}"~"}         // Empty escape
                {"cte"="\.~ "test\[1"~"}         // Unterminated codepoint
                {"cte"="\.~ "test\[21"~"}        // Unterminated codepoint
                {"cte"="\.~ "test\[301"~"}       // Unterminated codepoint
                {"cte"="\.~ "test\[4001"~"}      // Unterminated codepoint
                {"cte"="\.~ "test\[50001"~"}     // Unterminated codepoint
                {"cte"="\.~ "test\[600001"~"}    // Unterminated codepoint
                {"cte"="\.~ "test\[7000001"~"}   // Unterminated codepoint
                {"cte"="\.~ "test\[80000001"~"}  // Unterminated codepoint
                {"cte"="\.~ "test\[900000001"~"} // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            "name" = "String with NUL character"
            "mustSucceed" = [
                {
                    "cte" = "\.^ "test\[0]string"^"
                    "events" = ["s=test\[0]string"]
                }
            ]
        }

        // ====================================================================

        {
            // Resource IDs have the same capabilities and restrictions as strings.
            "name" = "Resource ID"
            "mustSucceed" = [
                {"cte"="@\"https://concise-encoding.org\"" "events"=["rid=https://concise-encoding.org"]}
                {"cte"="\.~ @"http://x.com/a/b#1"~"        "events"=["rid=http://x.com/a/b#1"]}
                {"cte"="\.~ @""~"                          "events"=["rid"]}                // Empty string
                {"cte"="\.~ @"test/*test"~"                "events"=["rid=test/*test"]}     // Comment initiator inside a string
                {"cte"="\.~ @"test*/test"~"                "events"=["rid=test*/test"]}     // Comment terminator inside a string
                {"from_cte"="\.~ @"test\ttest"~"           "events"=["rid=test\[9]test"]}   // Escaped tab
                {"from_cte"="\.~ @"test\rtest"~"           "events"=["rid=test\[d]test"]}   // Escaped CR
                {"from_cte"="\.~ @"test\"test"~"           "events"=["rid=\.~ test"test~"]} // Escaped quote
                {"from_cte"="\.~ @"test\\test"~"           "events"=["rid=\.~ test\test~"]} // Escaped backslash
                {"from_cte"="\.~ @"test\/test"~"           "events"=["rid=\.~ test/test~"]} // Escaped slash
                {"from_cte"="\.~ @"test\*test"~"           "events"=["rid=\.~ test*test~"]} // Escaped star
                {"from_cte"="\.~ @"test\_test"~"           "events"=["rid=test\[a0]test"]}  // Escaped non-breaking space
                {"from_cte"="\.~ @"test\-test"~"           "events"=["rid=test\[ad]test"]}  // Escaped soft hyphen
                {"from_cte"="\.~ @"test\[a]test"~"         "events"=["rid=test\ntest"]}     // Escaped 1-digit codepoint
                {"from_cte"="\.~ @"test\[f7]test"~"        "events"=["rid=test÷test"]}      // Escaped 2-digit codepoint
                {"from_cte"="\.~ @"test\[17d]test"~"       "events"=["rid=testŽtest"]}      // Escaped 3-digit codepoint
                {"from_cte"="\.~ @"test\[2021]test"~"      "events"=["rid=test‡test"]}      // Escaped 4-digit codepoint
                {"from_cte"="\.~ @"test\[1f43a]test"~"     "events"=["rid=test🐺test"]}     // Escaped 5-digit codepoint
                {"from_cte"="\.~ @"test\[000020]test"~"    "events"=["rid=test test"]}      // Escaped 6-digit codepoint
                {"from_cte"="\.~ @"test\[000000020]test"~" "events"=["rid=test test"]}      // Escaped 9-digit codepoint
                {"from_cte"="\.~ @"test\ntest"~"           "events"=["rid=\.~ test
test~"]}  // Escaped newline
                {"from_cte"="\.~ @"test\
test"~"  "events"=["rid=testtest"]}   // Continuation
            ]
            "mustFail" = [
                {"cte"="\.~ @"test\1gtest"~"}    // Invalid codepoint digit
                {"cte"="\.~ @"test\xtest"~"}     // Invalid escape character
                {"cte"="\.~ @"test=test~"}       // Unterminated quotes
                {"cte"="\.~ @test test~"}        // Missing quotes
                {"cte"="\.~ @"test\"~"}          // Unterminated escape
                {"cte"="\.~ @"test\["~"}         // Unterminated escape
                {"cte"="\.~ @"test\[}"~"}        // Empty escape
                {"cte"="\.~ @"test\[1"~"}        // Unterminated codepoint
                {"cte"="\.~ @"test\[01"~"}       // Unterminated codepoint
                {"cte"="\.~ @"test\[001"~"}      // Unterminated codepoint
                {"cte"="\.~ @"test\[0001"~"}     // Unterminated codepoint
                {"cte"="\.~ @"test\[00001"~"}    // Unterminated codepoint
                {"cte"="\.~ @"test\[000001"~"}   // Unterminated codepoint
                {"cte"="\.~ @"test\[0000001"~"}  // Unterminated codepoint
                {"cte"="\.~ @"test\[00000001"~"} // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            // Custom text has the same capabilities and restrictions as strings.
            "name" = "Custom Text"
            "mustSucceed" = [
                {"cte"="|c0 \"cplx(2.94+3i)\"|"  "events"=["ct=0 cplx(2.94+3i)"]}
                {"cte"="\.~ |c0 "something(123)"|~"             "events"=["ct=0 something(123)"]}
                {"cte"="\.~ |c0 ""|~"                           "events"=["ct=0"]}                // Empty String
                {"cte"="\.~ |c0 "test/*test"|~"                 "events"=["ct=0 test/*test"]}     // Comment initiator inside a string
                {"cte"="\.~ |c0 "test*/test"|~"                 "events"=["ct=0 test*/test"]}     // Comment terminator inside a string
                {"from_cte"="\.~ |c0 "test\ttest"|~"            "events"=["ct=0 test\[9]test"]}   // Escaped tab
                {"from_cte"="\.~ |c0 "test\rtest"|~"            "events"=["ct=0 test\[d]test"]}   // Escaped CR
                {"from_cte"="\.~ |c0 "test\"test"|~"            "events"=["ct=0 \.~ test"test~"]} // Escaped quote
                {"from_cte"="\.~ |c0 "test\\test"|~"            "events"=["ct=0 \.~ test\test~"]} // Escaped backslash
                {"from_cte"="\.~ |c0 "test\/test"|~"            "events"=["ct=0 \.~ test/test~"]} // Escaped slash
                {"from_cte"="\.~ |c0 "test\*test"|~"            "events"=["ct=0 \.~ test*test~"]} // Escaped star
                {"from_cte"="\.~ |c0 "test\_test"|~"            "events"=["ct=0 test\[a0]test"]}  // Escaped non-breaking space
                {"from_cte"="\.~ |c0 "test\-test"|~"            "events"=["ct=0 test\[ad]test"]}  // Escaped soft hyphen
                {"from_cte"="\.~ |c0 "test\[a]test"|~"          "events"=["ct=0 test\ntest"]}     // Escaped 1-digit codepoint
                {"from_cte"="\.~ |c0 "test\[f7]test"|~"         "events"=["ct=0 test÷test"]}      // Escaped 2-digit codepoint
                {"from_cte"="\.~ |c0 "test\[17d]test"|~"        "events"=["ct=0 testŽtest"]}      // Escaped 3-digit codepoint
                {"from_cte"="\.~ |c0 "test\[2021]test"|~"       "events"=["ct=0 test‡test"]}      // Escaped 4-digit codepoint
                {"from_cte"="\.~ |c0 "test\[1f43a]test"|~"      "events"=["ct=0 test🐺test"]}     // Escaped 5-digit codepoint
                {"from_cte"="\.~ |c0 "test\[000000020]test"|~"  "events"=["ct=0 test test"]}      // Escaped 9-digit codepoint
                {"from_cte"="\.~ |c0 "test\ntest"|~"            "events"=["ct=0 \.~ test
test~"]}  // Escaped newline
                {"from_cte"="\.~ |c0 "test\
                                          test"|~"               "events"=["ct=0 testtest"]}  // Continuation
            ]
            "mustFail" = [
                {"cte"="\.~ |c0 "test\1gtest"|~"}   // Invalid codepoint digit
                {"cte"="\.~ |c0 "test\xtest"|~"}    // Invalid escape character
                {"cte"="\.~ |c0 "test=test"~"}      // Unterminated
                {"cte"="\.~ test test~"}            // Missing bars
                {"cte"="\.~ |c0 "test\"|~"}         // Unterminated escape
                {"cte"="\.~ |c0 "test\1"|~"}        // Unterminated codepoint
                {"cte"="\.~ |c0 "test\01"|~"}       // Unterminated codepoint
                {"cte"="\.~ |c0 "test\001"|~"}      // Unterminated codepoint
                {"cte"="\.~ |c0 "test\0001"|~"}     // Unterminated codepoint
                {"cte"="\.~ |c0 "test\00001"|~"}    // Unterminated codepoint
                {"cte"="\.~ |c0 "test\000001"|~"}   // Unterminated codepoint
                {"cte"="\.~ |c0 "test\0000001"|~"}  // Unterminated codepoint
                {"cte"="\.~ |c0 "test\00000001"|~"} // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            "name" = "Custom Binary"
            "mustSucceed" = [
                {"cte"="|c0 04 f6 28 3c 40 00 00 40 40|"  "events"=["cb=0 04 f6 28 3c 40 00 00 40 40"]}
                {"cte"="|c0 1f 2e 3d 4c|"                 "events"=["cb=0 1f 2e 3d 4c"]}
                {"from_cte"="|c0 1F 2E 3D 4C|"            "events"=["cb=0 1f 2e 3d 4c"]}
                {"from_cte"="|c0 |"                       "events"=["cb=0"]}
                {"cte"="|c0|"                             "events"=["cb=0"]}
            ]
            "mustFail" = [
                {"cte"="|c0 00"}  // Not terminated
                {"cte"="|c0 gg|"} // Non-hex characters
            ]
        }

        // ====================================================================

        {
            "name" = "Verbatim sequence"
            "mustSucceed" = [
                {
                    "from_cte" = "\.~ "\.## ##"~"
                    "events"   = ["s"]
                }
                {
                    "from_cte" = "\.~ "\.##
##"~"
                    "events"   = ["s="]
                }
                {
                    "from_cte" = "\.~ "\.## a##"~"
                    "events"   = ["s=a"]
                }
                {
                    "from_cte" = "\.~ "\.@@
a@@"~"
                    "events"   = ["s=a"]
                }
                {
                    "from_cte" = "\"\\.^^^\r\na^^^\""
                    "events"   = ["s=a"]
                }
                {
                    "from_cte" = "\.~ "\.XXX blah blah
blah blahXXX"~"
                    "events"   = ["s=blah blah\nblah blah"]
                }
                {
                    "from_cte" = "\.~ "\.A \n\r\t\_\-A"~"
                    "events"   = ["s=\\n\\r\\t\\_\\-"]
                }
            ]
            "mustFail" = [
                {"cte"="\.~ "\."~"}        // No sentinel definition
                {"cte"="\.~ "\.X"~"}       // Unterminated sentinel
                {"cte"="\.~ "\.XblahX"~"}  // Missing WS between sentinel and contents
                {"cte"="\.~ "\.X blah"~"}  // Missing end sentinel
            ]
        }

        // ====================================================================

        {
            "name" = "Media"
            "mustSucceed" = [
                {
                    "cte" = "|.application/x-sh 23 21 2f 62 69 6e 2f 73 68 0a 0a 65 63 68 6f 20 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a|"
                    "events" = ["media=application/x-sh 23 21 2f 62 69 6e 2f 73 68 0a 0a 65 63 68 6f 20 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a"]
                }
                {
                    "from_cte" = "\.^^
|.application/x-sh "\.@@
#!/bin/sh

echo hello world
@@"|
^^"
                    "to_events" = ["media=application/x-sh 23 21 2f 62 69 6e 2f 73 68 0a 0a 65 63 68 6f 20 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a"]
                }
                {
                    "from_events" = ["bmedia=application/x-sh" "acl=28" "adt=\.^
#!/bin/sh

echo hello world
^"]
                    "to_cte" = "|.application/x-sh 23 21 2f 62 69 6e 2f 73 68 0a 0a 65 63 68 6f 20 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a|"
                }
            ]
        }

        // ====================================================================

    ]
}
