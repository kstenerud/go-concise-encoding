c0
// ==============
// CTE test cases
// ==============
{
    "options" = {
        "failFast" = false  // If true, halt tests on first error
    }

    "cteTests" = [

        // ====================================================================

        {
            "name" = "Int8 array"
            "encodeDecode" = [
                {"events"=["v 0" "ai8 1 2 3 127"]  "document"="c0\n|i8 1 2 3 127|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |i8|"                 "events"=["v 0" "ai8"]}
                {"document"="c0 |i8 |"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8 0 1 127 -128 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai8 0 1 127 -128 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i8b|"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8b 0 1 1011 -1001101 1111111 -10000000|"
                 "events"=["v 0" "ai8 0 1 11 -77 127 -128"]}
                {"document"="c0 |i8o|"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8o 177 -200 76|"    "events"=["v 0" "ai8 127 -128 62"]}
                {"document"="c0 |i8x|"                "events"=["v 0" "ai8"]}
                {"document"="c0 |i8x 7f -80 1c -29|"  "events"=["v 0" "ai8 127 -128 28 -41"]}
            ]
            "decodeFail" = [
                "c0 |i8 nan|"         // Non-int digit
                "c0 |i8 snan|"        // Non-int digit
                "c0 |i8 inf|"         // Non-int digit
                "c0 |i8 -inf|"        // Non-int digit
                "c0 |i8b 2|"          // Non-binary digit
                "c0 |i8b 10000000|"   // Element too big
                "c0 |i8b -10000001|"  // Element too big
                "c0 |i8o 9|"          // Non-octal digit
                "c0 |i8o 178|"        // Element too big
                "c0 |i8o -179|"       // Element too big
                "c0 |i8x g|"          // Non-hex digit
                "c0 |i8x 80|"         // Element too big
                "c0 |i8x -81|"        // Element too big
                "c0 |i8 a|"           // Non-int digit
                "c0 |i8 128|"         // Element too big
                "c0 |i8 -129|"        // Element too big
                "c0 |i8 0b10000000|"  // Element too big
                "c0 |i8 -0b10000001|" // Element too big
                "c0 |i8 0o178|"       // Element too big
                "c0 |i8 -0o179|"      // Element too big
                "c0 |i8 0x80|"        // Element too big
                "c0 |i8 -0x81|"       // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Int16 array"
            "encodeDecode" = [
                {"events"=["v 0" "ai16 1 2 3 32767"]  "document"="c0\n|i16 1 2 3 32767|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |i16|"                     "events"=["v 0" "ai16"]}
                {"document"="c0 |i16 |"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16 0 1 32767 -32768 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai16 0 1 32767 -32768 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i16b|"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16b 0 1 1011 -1001101 111111111111111 -1000000000000000|"
                 "events"=["v 0" "ai16 0 1 11 -77 32767 -32768"]}
                {"document"="c0 |i16o|"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16o 77777 -100000 76|"   "events"=["v 0" "ai16 32767 -32768 62"]}
                {"document"="c0 |i16x|"                    "events"=["v 0" "ai16"]}
                {"document"="c0 |i16x 7fff -8000 1c -29|"  "events"=["v 0" "ai16 32767 -32768 28 -41"]}
            ]
            "decodeFail" = [
                "c0 |i16 nan|"                 // Non-int digit
                "c0 |i16 snan|"                // Non-int digit
                "c0 |i16 inf|"                 // Non-int digit
                "c0 |i16 -inf|"                // Non-int digit
                "c0 |i16b 2|"                  // Non-binary digit
                "c0 |i16b 1000000000000000|"   // Element too big
                "c0 |i16b -1000000000000001|"  // Element too big
                "c0 |i16o 9|"                  // Non-octal digit
                "c0 |i16o 100000|"             // Element too big
                "c0 |i16o -100001|"            // Element too big
                "c0 |i16x g|"                  // Non-hex digit
                "c0 |i16x 8000|"               // Element too big
                "c0 |i16x -8001|"              // Element too big
                "c0 |i16 a|"                   // Non-int digit
                "c0 |i16 32768|"               // Element too big
                "c0 |i16 -32769|"              // Element too big
                "c0 |i16 0b1000000000000000|"  // Element too big
                "c0 |i16 -0b1000000000000001|" // Element too big
                "c0 |i16 0o100000|"            // Element too big
                "c0 |i16 -0o100001|"           // Element too big
                "c0 |i16 0x8000|"              // Element too big
                "c0 |i16 -0x8001|"             // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Int32 array"
            "encodeDecode" = [
                {"events"=["v 0" "ai32 1 2 3 2147483647"]  "document"="c0\n|i32 1 2 3 2147483647|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |i32|"                     "events"=["v 0" "ai32"]}
                {"document"="c0 |i32 |"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32 0 1 2147483647 -2147483648 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai32 0 1 2147483647 -2147483648 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i32b|"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32b 0 1 1011 -1001101 1111111111111111111111111111111 -10000000000000000000000000000000|"
                 "events"=["v 0" "ai32 0 1 11 -77 2147483647 -2147483648"]}
                {"document"="c0 |i32o|"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32o 17777777777 -20000000000 76|"  "events"=["v 0" "ai32 2147483647 -2147483648 62"]}
                {"document"="c0 |i32x|"                    "events"=["v 0" "ai32"]}
                {"document"="c0 |i32x 7fffffff -80000000 1c -29|"  "events"=["v 0" "ai32 2147483647 -2147483648 28 -41"]}
            ]
            "decodeFail" = [
                "c0 |i32 nan|"                                 // Non-int digit
                "c0 |i32 snan|"                                // Non-int digit
                "c0 |i32 inf|"                                 // Non-int digit
                "c0 |i32 -inf|"                                // Non-int digit
                "c0 |i32b 2|"                                  // Non-binary digit
                "c0 |i32b 10000000000000000000000000000000|"   // Element too big
                "c0 |i32b -10000000000000000000000000000001|"  // Element too big
                "c0 |i32o 9|"                                  // Non-octal digit
                "c0 |i32o 20000000000|"                        // Element too big
                "c0 |i32o -20000000001|"                       // Element too big
                "c0 |i32x g|"                                  // Non-hex digit
                "c0 |i32x 80000000|"                           // Element too big
                "c0 |i32x -80000001|"                          // Element too big
                "c0 |i32 a|"                                   // Non-int digit
                "c0 |i32 2147483648|"                          // Element too big
                "c0 |i32 -2147483649|"                         // Element too big
                "c0 |i32 0b10000000000000000000000000000000|"  // Element too big
                "c0 |i32 -0b10000000000000000000000000000001|" // Element too big
                "c0 |i32 0o20000000000|"                       // Element too big
                "c0 |i32 -0o20000000001|"                      // Element too big
                "c0 |i32 0x80000000|"                          // Element too big
                "c0 |i32 -0x80000001|"                         // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Int64 array"
            "encodeDecode" = [
                {"events"=["v 0" "ai64 1 2 3 9223372036854775807"]  "document"="c0\n|i64 1 2 3 9223372036854775807|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |i64|"                                "events"=["v 0" "ai64"]}
                {"document"="c0 |i64 |"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64 0 1 9223372036854775807 -9223372036854775808 0b101 -0b101 0o77 -0o77 0x1b -0x1b|"
                 "events"=["v 0" "ai64 0 1 9223372036854775807 -9223372036854775808 5 -5 63 -63 27 -27"]}
                {"document"="c0 |i64b|"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64b 0 1 1011 -1001101 111111111111111111111111111111111111111111111111111111111111111
                                      -1000000000000000000000000000000000000000000000000000000000000000|"
                 "events"=["v 0" "ai64 0 1 11 -77 9223372036854775807 -9223372036854775808"]}
                {"document"="c0 |i64o|"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64o 777777777777777777777 -1000000000000000000000 76|"
                 "events"=["v 0" "ai64 9223372036854775807 -9223372036854775808 62"]}
                {"document"="c0 |i64x|"                               "events"=["v 0" "ai64"]}
                {"document"="c0 |i64x 7fffffffffffffff -8000000000000000 1c -29|"
                 "events"=["v 0" "ai64 9223372036854775807 -9223372036854775808 28 -41"]}
            ]
            "decodeFail" = [
                "c0 |i64 nan|"                                 // Non-binary digit
                "c0 |i64 snan|"                                // Non-binary digit
                "c0 |i64 inf|"                                 // Non-binary digit
                "c0 |i64 -inf|"                                // Non-binary digit
                "c0 |i64b 2|"                                  // Non-binary digit
                "c0 |i64b 1000000000000000000000000000000000000000000000000000000000000000|"   // Element too big
                "c0 |i64b -1000000000000000000000000000000000000000000000000000000000000001|"  // Element too big
                "c0 |i64o 9|"                                  // Non-binary digit
                "c0 |i64o 1000000000000000000000|"             // Element too big
                "c0 |i64o -1000000000000000000001|"            // Element too big
                "c0 |i64x g|"                                  // Non-binary digit
                "c0 |i64x 8000000000000000|"                   // Element too big
                "c0 |i64x -8000000000000001|"                  // Element too big
                "c0 |i64 a|"                                   // Non-binary digit
                "c0 |i64 9223372036854775808|"                 // Element too big
                "c0 |i64 -9223372036854775809|"                // Element too big
                "c0 |i64 0b1000000000000000000000000000000000000000000000000000000000000000|"  // Element too big
                "c0 |i64 -0b1000000000000000000000000000000000000000000000000000000000000001|" // Element too big
                "c0 |i64 0o1000000000000000000000|"            // Element too big
                "c0 |i64 -0o1000000000000000000001|"           // Element too big
                "c0 |i64 0x8000000000000000|"                  // Element too big
                "c0 |i64 -0x8000000000000001|"                 // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint8 array"
            "encodeDecode" = [
                {"events"=["v 0" "au8 1 2 3 255"]  "document"="c0\n|u8x 01 02 03 ff|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |u8|"                 "events"=["v 0" "au8"]}
                {"document"="c0 |u8 |"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8 0 1 255 128 0b101 0o77 0x1b|"  "events"=["v 0" "au8 0 1 255 128 5 63 27"]}
                {"document"="c0 |u8b|"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8b 0 1 1011 1001101 11111111 10000000|"  "events"=["v 0" "au8 0 1 11 77 255 128"]}
                {"document"="c0 |u8o|"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8o 377 22 76|"      "events"=["v 0" "au8 255 18 62"]}
                {"document"="c0 |u8x|"                "events"=["v 0" "au8"]}
                {"document"="c0 |u8x ff 80 1c 29|"    "events"=["v 0" "au8 255 128 28 41"]}
            ]
            "decodeFail" = [
                "c0 |u8 nan|"         // Non-uint digit
                "c0 |u8 snan|"        // Non-uint digit
                "c0 |u8 inf|"         // Non-uint digit
                "c0 |u8 -inf|"        // Non-uint digit
                "c0 |u8b 2|"          // Non-binary digit
                "c0 |u8b 100000000|"  // Element too big
                "c0 |u8o 9|"          // Non-octal digit
                "c0 |u8o 400|"        // Element too big
                "c0 |u8x g|"          // Non-hex digit
                "c0 |u8x 100|"        // Element too big
                "c0 |u8 a|"           // Non-uint digit
                "c0 |u8 256|"         // Element too big
                "c0 |u8 0b100000000|" // Element too big
                "c0 |u8 0o400|"       // Element too big
                "c0 |u8 0x100|"       // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint16 array"
            "encodeDecode" = [
                {"events"=["v 0" "au16 1 2 3 65535"]  "document"="c0\n|u16x 0001 0002 0003 ffff|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |u16|"                 "events"=["v 0" "au16"]}
                {"document"="c0 |u16 |"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16 0 1 65535 128 0b101 0o77 0x1b|"  "events"=["v 0" "au16 0 1 65535 128 5 63 27"]}
                {"document"="c0 |u16b|"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16b 0 1 1011 1001101 1111111111111111 10000000|"  "events"=["v 0" "au16 0 1 11 77 65535 128"]}
                {"document"="c0 |u16o|"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16o 177777 22 76|"   "events"=["v 0" "au16 65535 18 62"]}
                {"document"="c0 |u16x|"                "events"=["v 0" "au16"]}
                {"document"="c0 |u16x ffff 80 1c 29|"  "events"=["v 0" "au16 65535 128 28 41"]}
            ]
            "decodeFail" = [
                "c0 |u16 nan|"                 // Non-uint digit
                "c0 |u16 snan|"                // Non-uint digit
                "c0 |u16 inf|"                 // Non-uint digit
                "c0 |u16 -inf|"                // Non-uint digit
                "c0 |u16b 2|"                  // Non-binary digit
                "c0 |u16b 10000000000000000|"  // Element too big
                "c0 |u16o 9|"                  // Non-octal digit
                "c0 |u16o 200000|"             // Element too big
                "c0 |u16x g|"                  // Non-hex digit
                "c0 |u16x 10000|"              // Element too big
                "c0 |u16 a|"                   // Non-uint digit
                "c0 |u16 65536|"               // Element too big
                "c0 |u16 0b10000000000000000|" // Element too big
                "c0 |u16 0o200000|"            // Element too big
                "c0 |u16 0x10000|"             // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint32 array"
            "encodeDecode" = [
                {"events"=["v 0" "au32 1 2 3 0xffffffff"]  "document"="c0\n|u32x 00000001 00000002 00000003 ffffffff|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |u32|"                     "events"=["v 0" "au32"]}
                {"document"="c0 |u32 |"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32 0 1 4294967295 128 0b101 0o77 0x1b|"
                 "events"=["v 0" "au32 0 1 4294967295 128 5 63 27"]}
                {"document"="c0 |u32b|"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32b 0 1 1011 1001101 11111111111111111111111111111111 10000000|"
                 "events"=["v 0" "au32 0 1 11 77 4294967295 128"]}
                {"document"="c0 |u32o|"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32o 37777777777 22 76|"  "events"=["v 0" "au32 4294967295 18 62"]}
                {"document"="c0 |u32x|"                    "events"=["v 0" "au32"]}
                {"document"="c0 |u32x ffffffff 80 1c 29|"  "events"=["v 0" "au32 4294967295 128 28 41"]}
            ]
            "decodeFail" = [
                "c0 |u32 nan|"                 // Non-uint digit
                "c0 |u32 snan|"                // Non-uint digit
                "c0 |u32 inf|"                 // Non-uint digit
                "c0 |u32 -inf|"                // Non-uint digit
                "c0 |u32b 2|"                  // Non-binary digit
                "c0 |u32b 100000000000000000000000000000000|" // Element too big
                "c0 |u32o 9|"                  // Non-octal digit
                "c0 |u32o 40000000000|"        // Element too big
                "c0 |u32x g|"                  // Non-hex digit
                "c0 |u32x 100000000|"          // Element too big
                "c0 |u32 a|"                   // Non-uint digit
                "c0 |u32 4294967296|"          // Element too big
                "c0 |u32 0b100000000000000000000000000000000|" // Element too big
                "c0 |u32 0o40000000000|"       // Element too big
                "c0 |u32 0x100000000|"         // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Uint64 array"
            "encodeDecode" = [
                {"events"=["v 0" "au64 1 2 3 0xffffffffffffffff"] 
                 "document"="c0\n|u64x 0000000000000001 0000000000000002 0000000000000003 ffffffffffffffff|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |u64|"                                "events"=["v 0" "au64"]}
                {"document"="c0 |u64 |"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64 0 1 18446744073709551615 128 0b101 0o77 0x1b|"
                 "events"=["v 0" "au64 0 1 18446744073709551615 128 5 63 27"]}
                {"document"="c0 |u64b|"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64b 0 1 1011 1001101 1111111111111111111111111111111111111111111111111111111111111111 10000000|"
                 "events"=["v 0" "au64 0 1 11 77 18446744073709551615 128"]}
                {"document"="c0 |u64o|"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64o 1777777777777777777777 22 76|"  "events"=["v 0" "au64 18446744073709551615 18 62"]}
                {"document"="c0 |u64x|"                               "events"=["v 0" "au64"]}
                {"document"="c0 |u64x ffffffffffffffff 80 1c 29|"     "events"=["v 0" "au64 18446744073709551615 128 28 41"]}
            ]
            "decodeFail" = [
                "c0 |u64 nan|"                      // Non-uint digit
                "c0 |u64 snan|"                     // Non-uint digit
                "c0 |u64 inf|"                      // Non-uint digit
                "c0 |u64 -inf|"                     // Non-uint digit
                "c0 |u64b 2|"                       // Non-binary digit
                "c0 |u64b 10000000000000000000000000000000000000000000000000000000000000000|" // Element too big
                "c0 |u64o 9|"                       // Non-octal digit
                "c0 |u64o 2000000000000000000000|"  // Element too big
                "c0 |u64x g|"                       // Non-hex digit
                "c0 |u64x 10000000000000000|"       // Element too big
                "c0 |u64 a|"                        // Non-uint digit
                "c0 |u64 18446744073709551616|"     // Element too big
                "c0 |u64 0b10000000000000000000000000000000000000000000000000000000000000000|" // Element too big
                "c0 |u64 0o2000000000000000000000|" // Element too big
                "c0 |u64 0x10000000000000000|"      // Element too big
            ]
        }

        // ====================================================================

        {
            "name" = "Float16 array"
            // 8 sig bits, 8 exp bits
            "decodeEncode" = [
                {"document"="c0 |f16|"                                "events"=["v 0" "af16"]}
                {"document"="c0 |f16x|"                               "events"=["v 0" "af16"]}
                {"document"="c0\n|f16 0x1.5p2 -0x1.f8p-20|"           "events"=["v 0" "af16 0x1.5p2 -0x1.f8p-20"]}
                {"document"="c0\n|f16x 1.5p2 -1.f8p-20|"              "events"=["v 0" "af16 0x1.5p2 -0x1.f8p-20"]}
                {"document"="c0 |f16 nan snan inf -inf|"              "events"=["v 0" "af16 nan snan inf -inf"]}
                {"document"="c0 |f16 NAN SNAN INF -INF|"              "events"=["v 0" "af16 nan snan inf -inf"]}
                {"document"="c0 |f16x nan snan inf -inf|"             "events"=["v 0" "af16 nan snan inf -inf"]}
                {"document"="c0 |f16x NAN SNAN INF -INF|"             "events"=["v 0" "af16 nan snan inf -inf"]}
            ]
            "decodeFail" = [
                "c0 |f16 -|"                              // Incomplete value
                "c0 |f16 -nan|"                           // NaN does not have a negative form
                "c0 |f16 -snan|"                          // NaN does not have a negative form
                "c0 |f16 0x1.8p+128|"                    // Exponent too big
                "c0 |f16 0x1.8p-127|"                    // Exponent too small
                "c0 |f16 0x1.ffff|"  // Coefficient too big
                "c0 |f16 -0x1.ffff|" // Coefficient too big
            ]
        }

        // ====================================================================

        {
            "name" = "Float32 array"
            // 24 sig bits, 8 exp bits
            "encodeDecode" = [
                {"events"=["v 0" "af32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]
                 "document"="c0\n|f32x 1.fep+10 -1.3p-40 1.111112p+127 1.111112p-126|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |f32|"                                "events"=["v 0" "af32"]}
                {"document"="c0 |f32x|"                               "events"=["v 0" "af32"]}
                {"document"="c0 |f32 1.4512e+20 9.41e-15 944523.55|"  "events"=["v 0" "af32 1.4512e+20 9.41e-15 944523.55"]}
                {"document"="c0 |f32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126|"
                 "events"=["v 0" "af32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]}
                {"document"="c0 |f32x 1.fep+10 -1.3p-40 1.111112p+127 1.111112p-126|"
                 "events"=["v 0" "af32 0x1.fep+10 -0x1.3p-40 0x1.111112p+127 0x1.111112p-126"]}
                {"document"="c0 |f32 nan snan inf -inf|"              "events"=["v 0" "af32 nan snan inf -inf"]}
                {"document"="c0 |f32 NAN SNAN INF -INF|"              "events"=["v 0" "af32 nan snan inf -inf"]}
                {"document"="c0 |f32x nan snan inf -inf|"             "events"=["v 0" "af32 nan snan inf -inf"]}
                {"document"="c0 |f32x NAN SNAN INF -INF|"             "events"=["v 0" "af32 nan snan inf -inf"]}
            ]
            "decodeFail" = [
                "c0 |f32 -|"                              // Incomplete value
                "c0 |f32 -nan|"                           // NaN does not have a negative form
                "c0 |f32 -snan|"                          // NaN does not have a negative form
                "c0 |f32 0x1.fep+128|"                    // Exponent too big
                "c0 |f32 0x1.fep-127|"                    // Exponent too small
                "c0 |f32 0x1.fffffffffffffffffffffffff|"  // Coefficient too big
                "c0 |f32 -0x1.fffffffffffffffffffffffff|" // Coefficient too big
            ]
        }

        // ====================================================================

        {
            "name" = "Float64 array"
            // 53 sig bits, 11 exp bits
            "encodeDecode" = [
                {"events"=["v 0" "af64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]
                 "document"="c0\n|f64x 1.fep+10 -1.3p-40 1.111112p+1023 1.111112p-1022|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |f64|"                                "events"=["v 0" "af64"]}
                {"document"="c0 |f64x|"                               "events"=["v 0" "af64"]}
                {"document"="c0 |f64 1.4512e+20 9.41e-15 944523.55|"  "events"=["v 0" "af64 1.4512e+20 9.41e-15 944523.55"]}
                {"document"="c0 |f64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022|"
                 "events"=["v 0" "af64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]}
                {"document"="c0 |f64x 1.fep+10 -1.3p-40 1.111112p+1023 1.111112p-1022|"
                 "events"=["v 0" "af64 0x1.fep+10 -0x1.3p-40 0x1.111112p+1023 0x1.111112p-1022"]}
                {"document"="c0 |f64 nan snan inf -inf|"              "events"=["v 0" "af64 nan snan inf -inf"]}
                {"document"="c0 |f64 NAN SNAN INF -INF|"              "events"=["v 0" "af64 nan snan inf -inf"]}
                {"document"="c0 |f64x nan snan inf -inf|"             "events"=["v 0" "af64 nan snan inf -inf"]}
                {"document"="c0 |f64x NAN SNAN INF -INF|"             "events"=["v 0" "af64 nan snan inf -inf"]}
            ]
            "decodeFail" = [
                "c0 |f64 -|"                              // Incomplete value
                "c0 |f64 -nan|"                           // NaN does not have a negative form
                "c0 |f64 -snan|"                          // NaN does not have a negative form
                "c0 |f64 0x1.fep+1024|"                   // Exponent too big
                "c0 |f64 0x1.fep-1023|"                   // Exponent too small
                "c0 |f64 0x1.fffffffffffffffffffffffff|"  // Coefficient too big
                "c0 |f64 -0x1.fffffffffffffffffffffffff|" // Coefficient too big
            ]
        }

        // ====================================================================

        {
            "name" = "UID array"
            "encodeDecode" = [
                {"events"=["v 0" "au ffffffff-ffff-ffff-ffff-ffffffffffff 2654AddE-9016-4cCa-bB44-860f39B49595"]
                 "document"="c0\n|u ffffffff-ffff-ffff-ffff-ffffffffffff 2654adde-9016-4cca-bb44-860f39b49595|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |u|"                                "events"=["v 0" "au"]}
                {"document"="c0 |u 00000000-0000-0000-0000-000000000000 ffffffff-ffff-ffff-ffff-ffffffffffff 2654AddE-9016-4cCa-bB44-860f39B49595|"  
                 "events"=["v 0" "au 00000000-0000-0000-0000-000000000000 ffffffff-ffff-ffff-ffff-ffffffffffff 2654adde-9016-4cca-bb44-860f39b49595"]}
            ]
            "decodeFail" = [
                "c0 |u -ffffffff-ffff-ffff-ffff-ffffffffffff|" // UIDs cannot be negative
                "c0 |u ffffffff-ffff-ffff-ffff-fffffffffff|"   // Incomplete
                "c0 |u ffffffffffffffffffffffffffffffff|"      // Malformed
                "c0 |u fffffff-fffff-ffff-ffff-fffffffffff|"   // Malformed
            ]
        }

        // ====================================================================

        {
            "name" = "Bit array"
            "encodeDecode" = [
                {"events"=["v 0" "ab 110101000111000111"]  "document"="c0\n|b 110101000111000111|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |b|"                "events"=["v 0" "ab"]}
                {"document"="c0 |b 0|"              "events"=["v 0" "ab 0"]}
                {"document"="c0 |b 1|"              "events"=["v 0" "ab 1"]}
                {"document"="c0 |b 1 0 1 1 0 1|"    "events"=["v 0" "ab 101101"]}
                {"document"="c0 |b 101101 |"        "events"=["v 0" "ab 101101"]}
                {"document"="c0 |b 10110111|"       "events"=["v 0" "ab 10110111"]}
                {"document"="c0 |b 1  0 110 1 11|"  "events"=["v 0" "ab 10110111"]}
                {"document"="c0 |b 1011011110010100110101010101011001110101010110011010100101010010010010110101001100000010100011|"
                 "events"=["v 0" "ab 1011011110010100110101010101011001110101010110011010100101010010010010110101001100000010100011"]}
            ]
            "decodeFail" = [
                "c0 |b 2|"        // Non-binary digit
                "c0 |b -1|"       // Non-binary digit
                "c0 |b nan|"      // Non-binary digit
                "c0 |b 0x1|"      // Non-binary digit
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint8 array"
            "encode" = [
                {"events"=["v 0" "au8b" "acl 0"]                             "document"="c0\n|u8x|"}
                {"events"=["v 0" "au8b" "acl 1" "ad ff"]                     "document"="c0\n|u8x ff|"}
                {"events"=["v 0" "au8b" "acl 2" "ad ff d4"]                  "document"="c0\n|u8x ff d4|"}
                {"events"=["v 0" "au8b" "acl 2" "ad ff" "ad d4"]             "document"="c0\n|u8x ff d4|"}
                {"events"=["v 0" "au8b" "acm 2" "ad ff" "ad d4" "acl 0"] "document"="c0\n|u8x ff d4|"}
                {"events"=["v 0" "au8b" "acm 1" "ad ff" "acl 1" "ad d4"] "document"="c0\n|u8x ff d4|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint16 array"
            "encode" = [
                {"events"=["v 0" "au16b" "acl 0"]                   "document"="c0\n|u16x|"}
                {"events"=["v 0" "au16b" "acl 1" "ad ff 01"]        "document"="c0\n|u16x 01ff|"}
                {"events"=["v 0" "au16b" "acl 2" "ad ff 01 d4 aa"]  "document"="c0\n|u16x 01ff aad4|"}
                {"events"=["v 0" "au16b" "acl 2" "ad ff" "ad 01 d4 aa"]
                 "document"="c0\n|u16x 01ff aad4|"}
                {"events"=["v 0" "au16b" "acm 2" "ad ff" "ad 01 d4 aa" "acl 0"]
                 "document"="c0\n|u16x 01ff aad4|"}
                {"events"=["v 0" "au16b" "acm 1" "ad ff 01" "acl 1" "ad d4" "ad aa"]
                 "document"="c0\n|u16x 01ff aad4|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint32 array"
            "encode" = [
                {"events"=["v 0" "au32b" "acl 0"]                   "document"="c0\n|u32x|"}
                {"events"=["v 0" "au32b" "acl 1" "ad 34 12 ff 01"]  "document"="c0\n|u32x 01ff1234|"}
                {"events"=["v 0" "au32b" "acl 2" "ad 34 12 ff 01 78 56 d4 aa"]  "document"="c0\n|u32x 01ff1234 aad45678|"}
                {"events"=["v 0" "au32b" "acl 2" "ad 34" "ad 12 ff 01" "ad 78 56 d4 aa"]
                 "document"="c0\n|u32x 01ff1234 aad45678|"}
                {"events"=["v 0" "au32b" "acm 2" "ad 34 12 ff 01 78 56 d4 aa" "acl 0"]
                 "document"="c0\n|u32x 01ff1234 aad45678|"}
                {"events"=["v 0" "au32b" "acm 1" "ad 34 12 ff 01" "acl 1" "ad 78 56 d4" "ad aa"]
                 "document"="c0\n|u32x 01ff1234 aad45678|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked uint64 array"
            "encode" = [
                {"events"=["v 0" "au64b" "acl 0"]  "document"="c0\n|u64x|"}
                {"events"=["v 0" "au64b" "acl 1" "ad dd cc bb aa 34 12 ff 01"]
                 "document"="c0\n|u64x 01ff1234aabbccdd|"}
                {"events"=["v 0" "au64b" "acl 2" "ad dd cc bb aa 34 12 ff 01 44 33 22 11 78 56 d4 aa"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
                {"events"=["v 0" "au64b" "acl 2" "ad dd cc bb aa 34" "ad 12 ff 01 44 33" "ad 22 11 78 56 d4 aa"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
                {"events"=["v 0" "au64b" "acm 2" "ad dd cc bb aa 34 12 ff 01 44 33 22 11 78 56 d4 aa" "acl 0"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
                {"events"=["v 0" "au64b" "acm 1" "ad dd cc bb aa 34 12 ff 01" "acl 1" "ad 44 33 22 11 78 56 d4" "ad aa"]
                 "document"="c0\n|u64x 01ff1234aabbccdd aad4567811223344|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int8 array"
            "encode" = [
                {"events"=["v 0" "ai8b" "acl 0"]                             "document"="c0\n|i8|"}
                {"events"=["v 0" "ai8b" "acl 1" "ad 7f"]                     "document"="c0\n|i8 127|"}
                {"events"=["v 0" "ai8b" "acl 2" "ad 7f 9f"]                  "document"="c0\n|i8 127 -97|"}
                {"events"=["v 0" "ai8b" "acl 2" "ad 7f" "ad 9f"]             "document"="c0\n|i8 127 -97|"}
                {"events"=["v 0" "ai8b" "acm 2" "ad 7f" "ad 9f" "acl 0"] "document"="c0\n|i8 127 -97|"}
                {"events"=["v 0" "ai8b" "acm 1" "ad 7f" "acl 1" "ad 9f"] "document"="c0\n|i8 127 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int16 array"
            "encode" = [
                {"events"=["v 0" "ai16b" "acl 0"]                        "document"="c0\n|i16|"}
                {"events"=["v 0" "ai16b" "acl 1" "ad ff 7f"]             "document"="c0\n|i16 32767|"}
                {"events"=["v 0" "ai16b" "acl 2" "ad ff 7f 9f ff"]       "document"="c0\n|i16 32767 -97|"}
                {"events"=["v 0" "ai16b" "acl 2" "ad ff 7f" "ad 9f ff"]  "document"="c0\n|i16 32767 -97|"}
                {"events"=["v 0" "ai16b" "acm 2" "ad ff 7f" "ad 9f ff" "acl 0"]
                 "document"="c0\n|i16 32767 -97|"}
                {"events"=["v 0" "ai16b" "acm 1" "ad ff 7f" "acl 1" "ad 9f ff"]
                 "document"="c0\n|i16 32767 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int32 array"
            "encode" = [
                {"events"=["v 0" "ai32b" "acl 0"]                   "document"="c0\n|i32|"}
                {"events"=["v 0" "ai32b" "acl 1" "ad ff ff ff 7f"]  "document"="c0\n|i32 2147483647|"}
                {"events"=["v 0" "ai32b" "acl 2" "ad ff ff ff 7f 9f ff ff ff"]
                 "document"="c0\n|i32 2147483647 -97|"}
                {"events"=["v 0" "ai32b" "acl 2" "ad ff ff ff 7f" "ad 9f ff ff ff"]
                 "document"="c0\n|i32 2147483647 -97|"}
                {"events"=["v 0" "ai32b" "acm 2" "ad ff ff ff 7f" "ad 9f ff ff ff" "acl 0"]
                 "document"="c0\n|i32 2147483647 -97|"}
                {"events"=["v 0" "ai32b" "acm 1" "ad ff ff ff 7f" "acl 1" "ad 9f ff ff ff"]
                 "document"="c0\n|i32 2147483647 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked int64 array"
            "encode" = [
                {"events"=["v 0" "ai64b" "acl 0"]  "document"="c0\n|i64|"}
                {"events"=["v 0" "ai64b" "acl 1" "ad ff ff ff ff ff ff ff 7f"]
                 "document"="c0\n|i64 9223372036854775807|"}
                {"events"=["v 0" "ai64b" "acl 2" "ad ff ff ff ff ff ff ff 7f 9f ff ff ff ff ff ff ff"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
                {"events"=["v 0" "ai64b" "acl 2" "ad ff ff ff ff ff ff ff 7f" "ad 9f ff ff ff ff ff ff ff"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
                {"events"=["v 0" "ai64b" "acm 2" "ad ff ff ff ff ff ff ff 7f" "ad 9f" "ad ff ff ff" "ad ff ff ff ff" "acl 0"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
                {"events"=["v 0" "ai64b" "acm 1" "ad ff ff ff ff ff ff ff 7f" "acl 1" "ad 9f ff" "ad ff ff ff ff ff ff"]
                 "document"="c0\n|i64 9223372036854775807 -97|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float16 array"
            "encode" = [
                {"events"=["v 0" "af16b" "acl 0"]                        "document"="c0\n|f16x|"}
                {"events"=["v 0" "af16b" "acl 1" "ad ff 7f"]             "document"="c0\n|f16x nan|"}
                {"events"=["v 0" "af16b" "acl 1" "ad bf 7f"]             "document"="c0\n|f16x snan|"}
                {"events"=["v 0" "af16b" "acl 1" "ad 99 3f"]             "document"="c0\n|f16x 1.32|"}
                {"events"=["v 0" "af16b" "acl 2" "ad ff 7f 99 3f"]       "document"="c0\n|f16x nan 1.32|"}
                {"events"=["v 0" "af16b" "acl 2" "ad bf 7f" "ad 99 3f"]  "document"="c0\n|f16x snan 1.32|"}
                {"events"=["v 0" "af16b" "acm 2" "ad 80 7f" "ad 80 ff" "acl 0"]
                 "document"="c0\n|f16x inf -inf|"}
                {"events"=["v 0" "af16b" "acm 1" "ad 80 7f" "acl 1" "ad 80 ff"]
                 "document"="c0\n|f16x inf -inf|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float32 array"
            "encode" = [
                {"events"=["v 0" "af32b" "acl 0"]                   "document"="c0\n|f32x|"}
                {"events"=["v 0" "af32b" "acl 1" "ad 00 00 ff 7f"]  "document"="c0\n|f32x nan|"}
                {"events"=["v 0" "af32b" "acl 1" "ad 00 00 bf 7f"]  "document"="c0\n|f32x snan|"}
                {"events"=["v 0" "af32b" "acl 1" "ad 00 00 99 3f"]  "document"="c0\n|f32x 1.32|"}
                {"events"=["v 0" "af32b" "acl 2" "ad 00 00 ff 7f 00 00 99 3f"]
                 "document"="c0\n|f32x nan 1.32|"}
                {"events"=["v 0" "af32b" "acl 2" "ad 00 00 bf 7f" "ad 00 00 99 3f"]
                 "document"="c0\n|f32x snan 1.32|"}
                {"events"=["v 0" "af32b" "acm 2" "ad 00 00 80 7f" "ad 00 00 80 ff" "acl 0"]
                 "document"="c0\n|f32x inf -inf|"}
                {"events"=["v 0" "af32b" "acm 1" "ad 00 00 80 7f" "acl 1" "ad 00 00 80 ff"]
                 "document"="c0\n|f32x inf -inf|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked float64 array"
            "encode" = [
                {"events"=["v 0" "af64b" "acl 0"]  "document"="c0\n|f64x|"}
                {"events"=["v 0" "af64b" "acl 1" "ad 10 00 00 00 00 00 f8 7f"]
                 "document"="c0\n|f64x nan|"}
                {"events"=["v 0" "af64b" "acl 1" "ad 10 00 00 00 00 00 f0 7f"]
                 "document"="c0\n|f64x snan|"}
                {"events"=["v 0" "af64b" "acl 1" "ad 00 00 00 00 00 00 99 bf"]
                 "document"="c0\n|f64x -1.9p-06|"}
                {"events"=["v 0" "af64b" "acl 2" "ad 10 00 00 00 00 00 f8 7f 00 00 00 00 00 00 99 bf"]
                 "document"="c0\n|f64x nan -1.9p-06|"}
                {"events"=["v 0" "af64b" "acl 2" "ad 10 00 00 00 00 00 f0 7f" "ad 00 00 00 00 00 00 99 bf"]
                 "document"="c0\n|f64x snan -1.9p-06|"}
                {"events"=["v 0" "af64b" "acm 2" "ad 00 00 00 00 00 00 f0 7f" "ad 00 00 00 00 00 00 f0 ff" "acl 0"]
                 "document"="c0\n|f64x inf -inf|"}
                {"events"=["v 0" "af64b" "acm 1" "ad 00" "ad 00 00 00 00 00 f0 7f" "acl 1" "ad 00 00 00 00 00" "ad 00 f0 ff"]
                 "document"="c0\n|f64x inf -inf|"}
            ]
        }

        // ====================================================================

        {
            "name" = "Chunked bit array"
            "encode" = [
                {"events"=["v 0" "abb" "acl 0"]         "document"="c0\n|b|"}
                {"events"=["v 0" "abb" "acl 1" "ad 01"] "document"="c0\n|b 1|"}
                {"events"=["v 0" "abb" "acl 2" "ad 01"] "document"="c0\n|b 10|"}
                {"events"=["v 0" "abb" "acl 7" "ad 51"] "document"="c0\n|b 1000101|"}
                {"events"=["v 0" "abb" "acl 8" "ad d1"] "document"="c0\n|b 10001011|"}
                {"events"=["v 0" "abb" "acm 8" "ad d1" "acl 1" "ad 01"] "document"="c0\n|b 100010111|"}
            ]
        }

        // ====================================================================

        {
            "name" = "String"
            "encodeDecode" = [
                {"events"=["v 0" "s this is a string"]  "document"="c0\n\"this is a string\""}
                {
                    "events"=["v 0" "s \
                        sky வானம் ሰማይ سماء երկինք səma неба আকাশ небето 天空 \
                        ცა ουρανός આકાશ syèl שָׁמַיִם आकाश ég 空 ಆಕಾಶ аспан មេឃ 하늘 \
                        asûman асман ທ້ອງຟ້າ небото ആകാശം आकाश тэнгэр ကောင်းကင် \
                        आकाश ଆକାଶ اسمان آسمان céu ਅਸਮਾਨ небо අහස வானம் күк ఆకాశం \
                        ท้องฟ้า gökyüzü آسمان ئاسمان bầu trời הימל ọrun"]
                    "document"="c0\n\"\
                        sky வானம் ሰማይ سماء երկինք səma неба আকাশ небето 天空 \
                        ცა ουρανός આકાશ syèl שָׁמַיִם आकाश ég 空 ಆಕಾಶ аспан មេឃ 하늘 \
                        asûman асман ທ້ອງຟ້າ небото ആകാശം आकाश тэнгэр ကောင်းကင် \
                        आकाश ଆକାଶ اسمان آسمان céu ਅਸਮਾਨ небо අහස வானம் күк ఆకాశం \
                        ท้องฟ้า gökyüzü آسمان ئاسمان bầu trời הימל ọrun\""
                }
            ]
            "decodeEncode" = [
                {"document"="\.~ c0 "test test"~"            "events"=["v 0" "s test test"]}
                {"document"="\.~ c0 ""~"                     "events"=["v 0" "s "]}               // Empty string
                {"document"="\.~ c0 "test/*test"~"           "events"=["v 0" "s test/*test"]}     // Comment initiator inside a string
                {"document"="\.~ c0 "test*/test"~"           "events"=["v 0" "s test*/test"]}     // Comment terminator inside a string
                {"document"="\.~ c0 "test\ttest"~"           "events"=["v 0" "s test\19test"]}    // Escaped tab
                {"document"="\.~ c0 "test\rtest"~"           "events"=["v 0" "s test\1dtest"]}    // Escaped CR
                {"document"="\.~ c0 "test\"test"~"           "events"=["v 0" "s \.~ test"test~"]} // Escaped quote
                {"document"="\.~ c0 "test\\test"~"           "events"=["v 0" "s \.~ test\test~"]} // Escaped backslash
                {"document"="\.~ c0 "test\/test"~"           "events"=["v 0" "s \.~ test/test~"]} // Escaped slash
                {"document"="\.~ c0 "test\*test"~"           "events"=["v 0" "s \.~ test*test~"]} // Escaped star
                {"document"="\.~ c0 "test\|test"~"           "events"=["v 0" "s \.~ test|test~"]} // Escaped pipe
                {"document"="\.~ c0 "test\_test"~"           "events"=["v 0" "s test\2a0test"]}   // Escaped non-breaking space
                {"document"="\.~ c0 "test\-test"~"           "events"=["v 0" "s test\2adtest"]}   // Escaped soft hyphen
                {"document"="\.~ c0 "test\1atest"~"          "events"=["v 0" "s test\ntest"]}     // Escaped 1-digit codepoint
                {"document"="\.~ c0 "test\2f7test"~"         "events"=["v 0" "s test÷test"]}      // Escaped 2-digit codepoint
                {"document"="\.~ c0 "test\317dtest"~"        "events"=["v 0" "s testŽtest"]}      // Escaped 3-digit codepoint
                {"document"="\.~ c0 "test\42021test"~"       "events"=["v 0" "s test‡test"]}      // Escaped 4-digit codepoint
                {"document"="\.~ c0 "test\51f43atest"~"      "events"=["v 0" "s test🐺test"]}     // Escaped 5-digit codepoint
                {"document"="\.~ c0 "test\6000020test"~"     "events"=["v 0" "s test test"]}      // Escaped 6-digit codepoint
                {"document"="\.~ c0 "test\70000020test"~"    "events"=["v 0" "s test test"]}      // Escaped 7-digit codepoint
                {"document"="\.~ c0 "test\800000020test"~"   "events"=["v 0" "s test test"]}      // Escaped 8-digit codepoint
                {"document"="\.~ c0 "test\9000000020test"~"  "events"=["v 0" "s test test"]}      // Escaped 9-digit codepoint
                {"document"="\.~ c0 "test\ntest"~"           "events"=["v 0" "s \.~ test
test~"]}  // Escaped newline
                {"document"="\.~ c0 "test\
test"~"  "events"=["v 0" "s testtest"]}  // Continuation
            ]
            "decodeFail" = [
                "\.~ c0 "test\1gtest"~"    // Invalid codepoint digit
                "\.~ c0 "test\xtest"~"     // Invalid escape character
                "\.~ c0 "test test~"       // Unterminated quotes
                "\.~ c0 test test~"        // Missing quotes
                "\.~ c0 "test\"~"          // Unterminated escape
                "\.~ c0 "test\1"~"         // Unterminated codepoint
                "\.~ c0 "test\21"~"        // Unterminated codepoint
                "\.~ c0 "test\301"~"       // Unterminated codepoint
                "\.~ c0 "test\4001"~"      // Unterminated codepoint
                "\.~ c0 "test\50001"~"     // Unterminated codepoint
                "\.~ c0 "test\600001"~"    // Unterminated codepoint
                "\.~ c0 "test\7000001"~"   // Unterminated codepoint
                "\.~ c0 "test\80000001"~"  // Unterminated codepoint
                "\.~ c0 "test\900000001"~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            "name" = "String with NUL character"
            "encodeDecode" = [
                {
                    "events" = ["v 0" "s test\0string"]
                    "document" = "\.^ c0
"test\0string"^"
                }
            ]
        }

        // ====================================================================

        {
            // Resource IDs have the same capabilities and restrictions as strings.
            "name" = "Resource ID"
            "encodeDecode" = [
                {"events"=["v 0" "rid https://concise-encoding.org"]  "document"="c0\n@\"https://concise-encoding.org\""}
            ]
            "decodeEncode" = [
                {"document"="\.~ c0 @"http://x.com/a/b#1"~"   "events"=["v 0" "rid http://x.com/a/b#1"]}
                {"document"="\.~ c0 @""~"                     "events"=["v 0" "rid "]}               // Empty string
                {"document"="\.~ c0 @"test/*test"~"           "events"=["v 0" "rid test/*test"]}     // Comment initiator inside a string
                {"document"="\.~ c0 @"test*/test"~"           "events"=["v 0" "rid test*/test"]}     // Comment terminator inside a string
                {"document"="\.~ c0 @"test\ttest"~"           "events"=["v 0" "rid test\19test"]}    // Escaped tab
                {"document"="\.~ c0 @"test\rtest"~"           "events"=["v 0" "rid test\1dtest"]}    // Escaped CR
                {"document"="\.~ c0 @"test\"test"~"           "events"=["v 0" "rid \.~ test"test~"]} // Escaped quote
                {"document"="\.~ c0 @"test\\test"~"           "events"=["v 0" "rid \.~ test\test~"]} // Escaped backslash
                {"document"="\.~ c0 @"test\/test"~"           "events"=["v 0" "rid \.~ test/test~"]} // Escaped slash
                {"document"="\.~ c0 @"test\*test"~"           "events"=["v 0" "rid \.~ test*test~"]} // Escaped star
                {"document"="\.~ c0 @"test\|test"~"           "events"=["v 0" "rid \.~ test|test~"]} // Escaped pipe
                {"document"="\.~ c0 @"test\_test"~"           "events"=["v 0" "rid test\2a0test"]}   // Escaped non-breaking space
                {"document"="\.~ c0 @"test\-test"~"           "events"=["v 0" "rid test\2adtest"]}   // Escaped soft hyphen
                {"document"="\.~ c0 @"test\1atest"~"          "events"=["v 0" "rid test\ntest"]}     // Escaped 1-digit codepoint
                {"document"="\.~ c0 @"test\2f7test"~"         "events"=["v 0" "rid test÷test"]}      // Escaped 2-digit codepoint
                {"document"="\.~ c0 @"test\317dtest"~"        "events"=["v 0" "rid testŽtest"]}      // Escaped 3-digit codepoint
                {"document"="\.~ c0 @"test\42021test"~"       "events"=["v 0" "rid test‡test"]}      // Escaped 4-digit codepoint
                {"document"="\.~ c0 @"test\51f43atest"~"      "events"=["v 0" "rid test🐺test"]}     // Escaped 5-digit codepoint
                {"document"="\.~ c0 @"test\6000020test"~"     "events"=["v 0" "rid test test"]}      // Escaped 6-digit codepoint
                {"document"="\.~ c0 @"test\70000020test"~"    "events"=["v 0" "rid test test"]}      // Escaped 7-digit codepoint
                {"document"="\.~ c0 @"test\800000020test"~"   "events"=["v 0" "rid test test"]}      // Escaped 8-digit codepoint
                {"document"="\.~ c0 @"test\9000000020test"~"  "events"=["v 0" "rid test test"]}      // Escaped 9-digit codepoint
                {"document"="\.~ c0 @"test\ntest"~"           "events"=["v 0" "rid \.~ test
test~"]}  // Escaped newline
                {"document"="\.~ c0 @"test\
test"~"  "events"=["v 0" "rid testtest"]}  // Continuation
            ]
            "decodeFail" = [
                "\.~ c0 @"test\1gtest"~"    // Invalid codepoint digit
                "\.~ c0 @"test\xtest"~"     // Invalid escape character
                "\.~ c0 @"test test~"       // Unterminated quotes
                "\.~ c0 @test test~"        // Missing quotes
                "\.~ c0 @"test\"~"          // Unterminated escape
                "\.~ c0 @"test\1"~"         // Unterminated codepoint
                "\.~ c0 @"test\21"~"        // Unterminated codepoint
                "\.~ c0 @"test\301"~"       // Unterminated codepoint
                "\.~ c0 @"test\4001"~"      // Unterminated codepoint
                "\.~ c0 @"test\50001"~"     // Unterminated codepoint
                "\.~ c0 @"test\600001"~"    // Unterminated codepoint
                "\.~ c0 @"test\7000001"~"   // Unterminated codepoint
                "\.~ c0 @"test\80000001"~"  // Unterminated codepoint
                "\.~ c0 @"test\900000001"~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            // Custom text has the same capabilities and restrictions as strings.
            "name" = "Custom Text"
            "encodeDecode" = [
                {"events"=["v 0" "ct cplx(2.94+3i)"]  "document"="c0\n|c \"cplx(2.94+3i)\"|"}
            ]
            "decodeEncode" = [
                {"document"="\.~ c0 |c "something(123)"|~"       "events"=["v 0" "ct something(123)"]}
                {"document"="\.~ c0 |c ""|~"                     "events"=["v 0" "ct "]}               // Empty String
                {"document"="\.~ c0 |c "test/*test"|~"           "events"=["v 0" "ct test/*test"]}     // Comment initiator inside a string
                {"document"="\.~ c0 |c "test*/test"|~"           "events"=["v 0" "ct test*/test"]}     // Comment terminator inside a string
                {"document"="\.~ c0 |c "test\ttest"|~"           "events"=["v 0" "ct test\19test"]}    // Escaped tab
                {"document"="\.~ c0 |c "test\rtest"|~"           "events"=["v 0" "ct test\1dtest"]}    // Escaped CR
                {"document"="\.~ c0 |c "test\"test"|~"           "events"=["v 0" "ct \.~ test"test~"]} // Escaped quote
                {"document"="\.~ c0 |c "test\\test"|~"           "events"=["v 0" "ct \.~ test\test~"]} // Escaped backslash
                {"document"="\.~ c0 |c "test\/test"|~"           "events"=["v 0" "ct \.~ test/test~"]} // Escaped slash
                {"document"="\.~ c0 |c "test\*test"|~"           "events"=["v 0" "ct \.~ test*test~"]} // Escaped star
                {"document"="\.~ c0 |c "test\|test"|~"           "events"=["v 0" "ct \.~ test|test~"]} // Escaped pipe
                {"document"="\.~ c0 |c "test\_test"|~"           "events"=["v 0" "ct test\2a0test"]}   // Escaped non-breaking space
                {"document"="\.~ c0 |c "test\-test"|~"           "events"=["v 0" "ct test\2adtest"]}   // Escaped soft hyphen
                {"document"="\.~ c0 |c "test\1atest"|~"          "events"=["v 0" "ct test\ntest"]}     // Escaped 1-digit codepoint
                {"document"="\.~ c0 |c "test\2f7test"|~"         "events"=["v 0" "ct test÷test"]}      // Escaped 2-digit codepoint
                {"document"="\.~ c0 |c "test\317dtest"|~"        "events"=["v 0" "ct testŽtest"]}      // Escaped 3-digit codepoint
                {"document"="\.~ c0 |c "test\42021test"|~"       "events"=["v 0" "ct test‡test"]}      // Escaped 4-digit codepoint
                {"document"="\.~ c0 |c "test\51f43atest"|~"      "events"=["v 0" "ct test🐺test"]}     // Escaped 5-digit codepoint
                {"document"="\.~ c0 |c "test\6000020test"|~"     "events"=["v 0" "ct test test"]}      // Escaped 6-digit codepoint
                {"document"="\.~ c0 |c "test\70000020test"|~"    "events"=["v 0" "ct test test"]}      // Escaped 7-digit codepoint
                {"document"="\.~ c0 |c "test\800000020test"|~"   "events"=["v 0" "ct test test"]}      // Escaped 8-digit codepoint
                {"document"="\.~ c0 |c "test\9000000020test"|~"  "events"=["v 0" "ct test test"]}      // Escaped 9-digit codepoint
                {"document"="\.~ c0 |c "test\ntest"|~"           "events"=["v 0" "ct \.~ test
test~"]}  // Escaped newline
                {"document"="\.~ c0 |c "test\
                                          test"|~"               "events"=["v 0" "ct testtest"]}  // Continuation
            ]
            "decodeFail" = [
                "\.~ c0 |c "test\1gtest"|~"    // Invalid codepoint digit
                "\.~ c0 |c "test\xtest"|~"     // Invalid escape character
                "\.~ c0 |c "test test"~"       // Unterminated
                "\.~ c0 test test~"           // Missing bars
                "\.~ c0 |c "test\"|~"          // Unterminated escape
                "\.~ c0 |c "test\1"|~"         // Unterminated codepoint
                "\.~ c0 |c "test\21"|~"        // Unterminated codepoint
                "\.~ c0 |c "test\301"|~"       // Unterminated codepoint
                "\.~ c0 |c "test\4001"|~"      // Unterminated codepoint
                "\.~ c0 |c "test\50001"|~"     // Unterminated codepoint
                "\.~ c0 |c "test\600001"|~"    // Unterminated codepoint
                "\.~ c0 |c "test\7000001"|~"   // Unterminated codepoint
                "\.~ c0 |c "test\80000001"|~"  // Unterminated codepoint
                "\.~ c0 |c "test\900000001"|~" // Unterminated codepoint
            ]
        }

        // ====================================================================

        {
            "name" = "Custom Binary"
            "encodeDecode" = [
                {"events"=["v 0" "cb 04 f6 28 3c 40 00 00 40 40"]  "document"="c0\n|c 04 f6 28 3c 40 00 00 40 40|"}
            ]
            "decodeEncode" = [
                {"document"="c0 |c 1f 2e 3d 4c|"  "events"=["v 0" "cb 1f 2e 3d 4c"]}
                {"document"="c0 |c 1F 2E 3D 4C|"  "events"=["v 0" "cb 1f 2e 3d 4c"]}
                {"document"="c0 |c |"             "events"=["v 0" "cb "]}
                {"document"="c0 |c|"              "events"=["v 0" "cb "]}
            ]
            "decodeFail" = [
                "c0 |c 00"  // Not terminated
                "c0 |c gg|" // Non-hex characters
            ]
        }

        // ====================================================================

        {
            "name" = "Verbatim sequence"
            "decodeEncode" = [
                {"document"="\.~ c0 "\.## ##"~"          "events"=["v 0" "s "]}
                {"document"="\.~ c0 "\.##
##"~"          "events"=["v 0" "s "]}
                {"document"="\.~ c0 "\.## a##"~"         "events"=["v 0" "s a"]}
                {"document"="\.~ c0 "\.@@
a@@"~"         "events"=["v 0" "s a"]}
                {"document"="c0 \"\\.^^^\r\na^^^\""        "events"=["v 0" "s a"]}
                {"document"="\.~ c0 "\.XXX blah blah
blah blahXXX"~"         "events"=["v 0" "s blah blah\nblah blah"]}
                {"document"="\.~ c0 "\.A \n\r\t\_\-A"~"  "events"=["v 0" "s \\n\\r\\t\\_\\-"]}
            ]
            "decodeFail" = [
                "\.~ c0 "\."~"        // No sentinel definition
                "\.~ c0 "\.X"~"       // Unterminated sentinel
                "\.~ c0 "\.XblahX"~"  // Missing WS between sentinel and contents
                "\.~ c0 "\.X blah"~"  // Missing end sentinel
            ]
        }

        // ====================================================================

        {
            "name" = "Media"
            "encodeDecode" = [
                {
                    "events" = ["v 0" "mb" "acl 16" "at application/x-sh" "acl 28" "at \.^
#!/bin/sh

echo hello world
^"]
                    "document" = "\.^
c0
|m application/x-sh 23 21 2f 62 69 6e 2f 73 68 0a 0a 65 63 68 6f 20 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a|^"
                }
            ]
            "decodeEncode" = [
                {
                    "document" = "\.^
c0
|m application/x-sh 23 21 2F 62 69 6E 2F 73 68 0A 0A 65 63 68 6F 20 68 65 6C 6C 6F 20 77 6F 72 6C 64 0A|^"
                    "events" = ["v 0" "mb" "acl 16" "at application/x-sh" "acl 28" "at \.^
#!/bin/sh

echo hello world
^"]
                }
            ]
            "decode" = [
                {
                    "document" = "\.^^
c0
|m application/x-sh "\.@@
#!/bin/sh

echo hello world
@@"|
^^"
                    "events" = ["v 0" "mb" "acl 16" "at application/x-sh" "acl 28" "at \.^
#!/bin/sh

echo hello world
^"]
                }
            ]
        }

        // ====================================================================

    ]
}
