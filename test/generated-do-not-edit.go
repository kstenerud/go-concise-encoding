// Copyright 2022 Karl Stenerud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// Generated by github.com/kstenerud/go-concise-encoding/codegen
  // DO NOT EDIT THIS FILE. Contents will be overwritten.

package test

import (
	compact_time "github.com/kstenerud/go-compact-time"
	"github.com/kstenerud/go-concise-encoding/ce/events"
)

type EventArrayBit struct{ BaseEvent }

func AB(elements []bool) Event {
	if len(elements) == 0 {
		return &EventArrayBit{
			BaseEvent: ConstructEvent("ab", func(receiver events.DataEventReceiver) {
				var safeArg []bool
				receiver.OnArray(events.ArrayTypeBit, uint64(len(safeArg)), arrayBitsToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []bool
	if v != nil {
		safeArg = v.([]bool)
	}

	return &EventArrayBit{
		BaseEvent: ConstructEvent("ab", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeBit, uint64(len(safeArg)), arrayBitsToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataBit struct{ BaseEvent }

func ADB(elements []bool) Event {
	if len(elements) == 0 {
		return &EventArrayDataBit{
			BaseEvent: ConstructEvent("adb", func(receiver events.DataEventReceiver) {
				var safeArg []bool
				receiver.OnArrayData(arrayBitsToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []bool
	if v != nil {
		safeArg = v.([]bool)
	}

	return &EventArrayDataBit{
		BaseEvent: ConstructEvent("adb", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayBitsToBytes(safeArg))
		}, safeArg),
	}
}

type EventVersion struct{ BaseEvent }

func V(version uint64) Event {
	v := version
	safeArg := v

	return &EventVersion{
		BaseEvent: ConstructEvent("v", func(receiver events.DataEventReceiver) {
			receiver.OnVersion(safeArg)
		}, safeArg),
	}
}

type EventBoolean struct{ BaseEvent }

func B(value bool) Event {
	v := value
	safeArg := v

	return &EventBoolean{
		BaseEvent: ConstructEvent("b", func(receiver events.DataEventReceiver) {
			receiver.OnBoolean(safeArg)
		}, safeArg),
	}
}

type EventTime struct{ BaseEvent }

func T(value compact_time.Time) Event {
	v := value
	safeArg := v

	return &EventTime{
		BaseEvent: ConstructEvent("t", func(receiver events.DataEventReceiver) {
			receiver.OnTime(safeArg)
		}, safeArg),
	}
}

type EventUID struct{ BaseEvent }

func UID(value []byte) Event {
	if len(value) == 0 {
		return &EventUID{
			BaseEvent: ConstructEvent("uid", func(receiver events.DataEventReceiver) {
				var safeArg []byte
				receiver.OnUID(safeArg)
			}),
		}
	}
	v := copyOf(value)
	var safeArg []byte
	if v != nil {
		safeArg = v.([]byte)
	}

	return &EventUID{
		BaseEvent: ConstructEvent("uid", func(receiver events.DataEventReceiver) {
			receiver.OnUID(safeArg)
		}, safeArg),
	}
}

type EventArrayChunkMore struct{ BaseEvent }

func ACM(length uint64) Event {
	v := length
	safeArg := v

	return &EventArrayChunkMore{
		BaseEvent: ConstructEvent("acm", func(receiver events.DataEventReceiver) {
			receiver.OnArrayChunk(safeArg, true)
		}, safeArg),
	}
}

type EventArrayChunkLast struct{ BaseEvent }

func ACL(length uint64) Event {
	v := length
	safeArg := v

	return &EventArrayChunkLast{
		BaseEvent: ConstructEvent("acl", func(receiver events.DataEventReceiver) {
			receiver.OnArrayChunk(safeArg, false)
		}, safeArg),
	}
}

type EventCommentMultiline struct{ BaseEvent }

func CM(comment string) Event {
	v := comment
	safeArg := v

	return &EventCommentMultiline{
		BaseEvent: ConstructEvent("cm", func(receiver events.DataEventReceiver) {
			receiver.OnComment(true, []byte(safeArg))
		}, safeArg),
	}
}

type EventCommentSingleLine struct{ BaseEvent }

func CS(comment string) Event {
	v := comment
	safeArg := v

	return &EventCommentSingleLine{
		BaseEvent: ConstructEvent("cs", func(receiver events.DataEventReceiver) {
			receiver.OnComment(false, []byte(safeArg))
		}, safeArg),
	}
}

type EventCustomBinary struct{ BaseEvent }

func CB(customType uint64, data []byte) Event {
	if len(data) == 0 {
		return &EventCustomBinary{
			BaseEvent: ConstructEvent("cb", func(receiver events.DataEventReceiver) {
				var safeArg []byte
				receiver.OnCustomBinary(customType, safeArg)
			}, customType),
		}
	}
	v := copyOf(data)
	var safeArg []byte
	if v != nil {
		safeArg = v.([]byte)
	}

	return &EventCustomBinary{
		BaseEvent: ConstructEvent("cb", func(receiver events.DataEventReceiver) {
			receiver.OnCustomBinary(customType, safeArg)
		}, customType, safeArg),
	}
}

type EventCustomText struct{ BaseEvent }

func CT(customType uint64, data string) Event {
	v := data
	safeArg := v

	return &EventCustomText{
		BaseEvent: ConstructEvent("ct", func(receiver events.DataEventReceiver) {
			receiver.OnCustomText(customType, safeArg)
		}, customType, safeArg),
	}
}

type EventMedia struct{ BaseEvent }

func MEDIA(mediaType string, data []byte) Event {
	if len(data) == 0 {
		return &EventMedia{
			BaseEvent: ConstructEvent("media", func(receiver events.DataEventReceiver) {
				var safeArg []byte
				receiver.OnMedia(mediaType, safeArg)
			}, mediaType),
		}
	}
	v := copyOf(data)
	var safeArg []byte
	if v != nil {
		safeArg = v.([]byte)
	}

	return &EventMedia{
		BaseEvent: ConstructEvent("media", func(receiver events.DataEventReceiver) {
			receiver.OnMedia(mediaType, safeArg)
		}, mediaType, safeArg),
	}
}

type EventMarker struct{ BaseEvent }

func MARK(id string) Event {
	v := id
	safeArg := v

	return &EventMarker{
		BaseEvent: ConstructEvent("mark", func(receiver events.DataEventReceiver) {
			receiver.OnMarker([]byte(safeArg))
		}, safeArg),
	}
}

type EventReferenceLocal struct{ BaseEvent }

func REFL(id string) Event {
	v := id
	safeArg := v

	return &EventReferenceLocal{
		BaseEvent: ConstructEvent("refl", func(receiver events.DataEventReceiver) {
			receiver.OnReferenceLocal([]byte(safeArg))
		}, safeArg),
	}
}

type EventRecord struct{ BaseEvent }

func REC(id string) Event {
	v := id
	safeArg := v

	return &EventRecord{
		BaseEvent: ConstructEvent("rec", func(receiver events.DataEventReceiver) {
			receiver.OnRecord([]byte(safeArg))
		}, safeArg),
	}
}

type EventRecordType struct{ BaseEvent }

func RT(id string) Event {
	v := id
	safeArg := v

	return &EventRecordType{
		BaseEvent: ConstructEvent("rt", func(receiver events.DataEventReceiver) {
			receiver.OnRecordType([]byte(safeArg))
		}, safeArg),
	}
}

type EventString struct{ BaseEvent }

func S(str string) Event {
	v := str
	safeArg := v

	return &EventString{
		BaseEvent: ConstructEvent("s", func(receiver events.DataEventReceiver) {
			receiver.OnStringlikeArray(events.ArrayTypeString, safeArg)
		}, safeArg),
	}
}

func (_this *EventString) Expand() Events {
	begin := BS()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].(string)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADT(elements)}
}

type EventReferenceRemote struct{ BaseEvent }

func REFR(str string) Event {
	v := str
	safeArg := v

	return &EventReferenceRemote{
		BaseEvent: ConstructEvent("refr", func(receiver events.DataEventReceiver) {
			receiver.OnStringlikeArray(events.ArrayTypeReferenceRemote, safeArg)
		}, safeArg),
	}
}

func (_this *EventReferenceRemote) Expand() Events {
	begin := BREFR()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].(string)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADT(elements)}
}

type EventResourceID struct{ BaseEvent }

func RID(str string) Event {
	v := str
	safeArg := v

	return &EventResourceID{
		BaseEvent: ConstructEvent("rid", func(receiver events.DataEventReceiver) {
			receiver.OnStringlikeArray(events.ArrayTypeResourceID, safeArg)
		}, safeArg),
	}
}

func (_this *EventResourceID) Expand() Events {
	begin := BRID()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].(string)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADT(elements)}
}

type EventArrayDataInt8 struct{ BaseEvent }

func ADI8(elements []int8) Event {
	if len(elements) == 0 {
		return &EventArrayDataInt8{
			BaseEvent: ConstructEvent("adi8", func(receiver events.DataEventReceiver) {
				var safeArg []int8
				receiver.OnArrayData(arrayInt8ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int8
	if v != nil {
		safeArg = v.([]int8)
	}

	return &EventArrayDataInt8{
		BaseEvent: ConstructEvent("adi8", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayInt8ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataInt16 struct{ BaseEvent }

func ADI16(elements []int16) Event {
	if len(elements) == 0 {
		return &EventArrayDataInt16{
			BaseEvent: ConstructEvent("adi16", func(receiver events.DataEventReceiver) {
				var safeArg []int16
				receiver.OnArrayData(arrayInt16ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int16
	if v != nil {
		safeArg = v.([]int16)
	}

	return &EventArrayDataInt16{
		BaseEvent: ConstructEvent("adi16", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayInt16ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataInt32 struct{ BaseEvent }

func ADI32(elements []int32) Event {
	if len(elements) == 0 {
		return &EventArrayDataInt32{
			BaseEvent: ConstructEvent("adi32", func(receiver events.DataEventReceiver) {
				var safeArg []int32
				receiver.OnArrayData(arrayInt32ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int32
	if v != nil {
		safeArg = v.([]int32)
	}

	return &EventArrayDataInt32{
		BaseEvent: ConstructEvent("adi32", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayInt32ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataInt64 struct{ BaseEvent }

func ADI64(elements []int64) Event {
	if len(elements) == 0 {
		return &EventArrayDataInt64{
			BaseEvent: ConstructEvent("adi64", func(receiver events.DataEventReceiver) {
				var safeArg []int64
				receiver.OnArrayData(arrayInt64ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int64
	if v != nil {
		safeArg = v.([]int64)
	}

	return &EventArrayDataInt64{
		BaseEvent: ConstructEvent("adi64", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayInt64ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataFloat16 struct{ BaseEvent }

func ADF16(elements []float32) Event {
	if len(elements) == 0 {
		return &EventArrayDataFloat16{
			BaseEvent: ConstructEvent("adf16", func(receiver events.DataEventReceiver) {
				var safeArg []float32
				receiver.OnArrayData(arrayFloat16ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []float32
	if v != nil {
		safeArg = v.([]float32)
	}

	return &EventArrayDataFloat16{
		BaseEvent: ConstructEvent("adf16", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayFloat16ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataFloat32 struct{ BaseEvent }

func ADF32(elements []float32) Event {
	if len(elements) == 0 {
		return &EventArrayDataFloat32{
			BaseEvent: ConstructEvent("adf32", func(receiver events.DataEventReceiver) {
				var safeArg []float32
				receiver.OnArrayData(arrayFloat32ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []float32
	if v != nil {
		safeArg = v.([]float32)
	}

	return &EventArrayDataFloat32{
		BaseEvent: ConstructEvent("adf32", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayFloat32ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataFloat64 struct{ BaseEvent }

func ADF64(elements []float64) Event {
	if len(elements) == 0 {
		return &EventArrayDataFloat64{
			BaseEvent: ConstructEvent("adf64", func(receiver events.DataEventReceiver) {
				var safeArg []float64
				receiver.OnArrayData(arrayFloat64ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []float64
	if v != nil {
		safeArg = v.([]float64)
	}

	return &EventArrayDataFloat64{
		BaseEvent: ConstructEvent("adf64", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayFloat64ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataUint8 struct{ BaseEvent }

func ADU8(elements []uint8) Event {
	if len(elements) == 0 {
		return &EventArrayDataUint8{
			BaseEvent: ConstructEvent("adu8", func(receiver events.DataEventReceiver) {
				var safeArg []uint8
				receiver.OnArrayData(arrayUint8ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint8
	if v != nil {
		safeArg = v.([]uint8)
	}

	return &EventArrayDataUint8{
		BaseEvent: ConstructEvent("adu8", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayUint8ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataUint16 struct{ BaseEvent }

func ADU16(elements []uint16) Event {
	if len(elements) == 0 {
		return &EventArrayDataUint16{
			BaseEvent: ConstructEvent("adu16", func(receiver events.DataEventReceiver) {
				var safeArg []uint16
				receiver.OnArrayData(arrayUint16ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint16
	if v != nil {
		safeArg = v.([]uint16)
	}

	return &EventArrayDataUint16{
		BaseEvent: ConstructEvent("adu16", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayUint16ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataUint32 struct{ BaseEvent }

func ADU32(elements []uint32) Event {
	if len(elements) == 0 {
		return &EventArrayDataUint32{
			BaseEvent: ConstructEvent("adu32", func(receiver events.DataEventReceiver) {
				var safeArg []uint32
				receiver.OnArrayData(arrayUint32ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint32
	if v != nil {
		safeArg = v.([]uint32)
	}

	return &EventArrayDataUint32{
		BaseEvent: ConstructEvent("adu32", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayUint32ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataUint64 struct{ BaseEvent }

func ADU64(elements []uint64) Event {
	if len(elements) == 0 {
		return &EventArrayDataUint64{
			BaseEvent: ConstructEvent("adu64", func(receiver events.DataEventReceiver) {
				var safeArg []uint64
				receiver.OnArrayData(arrayUint64ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint64
	if v != nil {
		safeArg = v.([]uint64)
	}

	return &EventArrayDataUint64{
		BaseEvent: ConstructEvent("adu64", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayUint64ToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataUID struct{ BaseEvent }

func ADU(elements [][]byte) Event {
	if len(elements) == 0 {
		return &EventArrayDataUID{
			BaseEvent: ConstructEvent("adu", func(receiver events.DataEventReceiver) {
				var safeArg [][]byte
				receiver.OnArrayData(arrayUIDToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg [][]byte
	if v != nil {
		safeArg = v.([][]byte)
	}

	return &EventArrayDataUID{
		BaseEvent: ConstructEvent("adu", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayUIDToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayDataText struct{ BaseEvent }

func ADT(elements string) Event {
	v := elements
	safeArg := v

	return &EventArrayDataText{
		BaseEvent: ConstructEvent("adt", func(receiver events.DataEventReceiver) {
			receiver.OnArrayData(arrayTextToBytes(safeArg))
		}, safeArg),
	}
}

type EventArrayInt8 struct{ BaseEvent }

func AI8(elements []int8) Event {
	if len(elements) == 0 {
		return &EventArrayInt8{
			BaseEvent: ConstructEvent("ai8", func(receiver events.DataEventReceiver) {
				var safeArg []int8
				receiver.OnArray(events.ArrayTypeInt8, uint64(len(safeArg)), arrayInt8ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int8
	if v != nil {
		safeArg = v.([]int8)
	}

	return &EventArrayInt8{
		BaseEvent: ConstructEvent("ai8", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeInt8, uint64(len(safeArg)), arrayInt8ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayInt8) Expand() Events {
	begin := BAI8()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]int8)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADI8(elements)}
}

type EventArrayInt16 struct{ BaseEvent }

func AI16(elements []int16) Event {
	if len(elements) == 0 {
		return &EventArrayInt16{
			BaseEvent: ConstructEvent("ai16", func(receiver events.DataEventReceiver) {
				var safeArg []int16
				receiver.OnArray(events.ArrayTypeInt16, uint64(len(safeArg)), arrayInt16ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int16
	if v != nil {
		safeArg = v.([]int16)
	}

	return &EventArrayInt16{
		BaseEvent: ConstructEvent("ai16", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeInt16, uint64(len(safeArg)), arrayInt16ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayInt16) Expand() Events {
	begin := BAI16()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]int16)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADI16(elements)}
}

type EventArrayInt32 struct{ BaseEvent }

func AI32(elements []int32) Event {
	if len(elements) == 0 {
		return &EventArrayInt32{
			BaseEvent: ConstructEvent("ai32", func(receiver events.DataEventReceiver) {
				var safeArg []int32
				receiver.OnArray(events.ArrayTypeInt32, uint64(len(safeArg)), arrayInt32ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int32
	if v != nil {
		safeArg = v.([]int32)
	}

	return &EventArrayInt32{
		BaseEvent: ConstructEvent("ai32", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeInt32, uint64(len(safeArg)), arrayInt32ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayInt32) Expand() Events {
	begin := BAI32()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]int32)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADI32(elements)}
}

type EventArrayInt64 struct{ BaseEvent }

func AI64(elements []int64) Event {
	if len(elements) == 0 {
		return &EventArrayInt64{
			BaseEvent: ConstructEvent("ai64", func(receiver events.DataEventReceiver) {
				var safeArg []int64
				receiver.OnArray(events.ArrayTypeInt64, uint64(len(safeArg)), arrayInt64ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []int64
	if v != nil {
		safeArg = v.([]int64)
	}

	return &EventArrayInt64{
		BaseEvent: ConstructEvent("ai64", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeInt64, uint64(len(safeArg)), arrayInt64ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayInt64) Expand() Events {
	begin := BAI64()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]int64)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADI64(elements)}
}

type EventArrayFloat16 struct{ BaseEvent }

func AF16(elements []float32) Event {
	if len(elements) == 0 {
		return &EventArrayFloat16{
			BaseEvent: ConstructEvent("af16", func(receiver events.DataEventReceiver) {
				var safeArg []float32
				receiver.OnArray(events.ArrayTypeFloat16, uint64(len(safeArg)), arrayFloat16ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []float32
	if v != nil {
		safeArg = v.([]float32)
	}

	return &EventArrayFloat16{
		BaseEvent: ConstructEvent("af16", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeFloat16, uint64(len(safeArg)), arrayFloat16ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayFloat16) Expand() Events {
	begin := BAF16()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]float32)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADF16(elements)}
}

type EventArrayFloat32 struct{ BaseEvent }

func AF32(elements []float32) Event {
	if len(elements) == 0 {
		return &EventArrayFloat32{
			BaseEvent: ConstructEvent("af32", func(receiver events.DataEventReceiver) {
				var safeArg []float32
				receiver.OnArray(events.ArrayTypeFloat32, uint64(len(safeArg)), arrayFloat32ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []float32
	if v != nil {
		safeArg = v.([]float32)
	}

	return &EventArrayFloat32{
		BaseEvent: ConstructEvent("af32", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeFloat32, uint64(len(safeArg)), arrayFloat32ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayFloat32) Expand() Events {
	begin := BAF32()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]float32)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADF32(elements)}
}

type EventArrayFloat64 struct{ BaseEvent }

func AF64(elements []float64) Event {
	if len(elements) == 0 {
		return &EventArrayFloat64{
			BaseEvent: ConstructEvent("af64", func(receiver events.DataEventReceiver) {
				var safeArg []float64
				receiver.OnArray(events.ArrayTypeFloat64, uint64(len(safeArg)), arrayFloat64ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []float64
	if v != nil {
		safeArg = v.([]float64)
	}

	return &EventArrayFloat64{
		BaseEvent: ConstructEvent("af64", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeFloat64, uint64(len(safeArg)), arrayFloat64ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayFloat64) Expand() Events {
	begin := BAF64()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]float64)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADF64(elements)}
}

type EventArrayUint8 struct{ BaseEvent }

func AU8(elements []uint8) Event {
	if len(elements) == 0 {
		return &EventArrayUint8{
			BaseEvent: ConstructEvent("au8", func(receiver events.DataEventReceiver) {
				var safeArg []uint8
				receiver.OnArray(events.ArrayTypeUint8, uint64(len(safeArg)), arrayUint8ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint8
	if v != nil {
		safeArg = v.([]uint8)
	}

	return &EventArrayUint8{
		BaseEvent: ConstructEvent("au8", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeUint8, uint64(len(safeArg)), arrayUint8ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayUint8) Expand() Events {
	begin := BAU8()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]uint8)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADU8(elements)}
}

type EventArrayUint16 struct{ BaseEvent }

func AU16(elements []uint16) Event {
	if len(elements) == 0 {
		return &EventArrayUint16{
			BaseEvent: ConstructEvent("au16", func(receiver events.DataEventReceiver) {
				var safeArg []uint16
				receiver.OnArray(events.ArrayTypeUint16, uint64(len(safeArg)), arrayUint16ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint16
	if v != nil {
		safeArg = v.([]uint16)
	}

	return &EventArrayUint16{
		BaseEvent: ConstructEvent("au16", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeUint16, uint64(len(safeArg)), arrayUint16ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayUint16) Expand() Events {
	begin := BAU16()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]uint16)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADU16(elements)}
}

type EventArrayUint32 struct{ BaseEvent }

func AU32(elements []uint32) Event {
	if len(elements) == 0 {
		return &EventArrayUint32{
			BaseEvent: ConstructEvent("au32", func(receiver events.DataEventReceiver) {
				var safeArg []uint32
				receiver.OnArray(events.ArrayTypeUint32, uint64(len(safeArg)), arrayUint32ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint32
	if v != nil {
		safeArg = v.([]uint32)
	}

	return &EventArrayUint32{
		BaseEvent: ConstructEvent("au32", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeUint32, uint64(len(safeArg)), arrayUint32ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayUint32) Expand() Events {
	begin := BAU32()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]uint32)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADU32(elements)}
}

type EventArrayUint64 struct{ BaseEvent }

func AU64(elements []uint64) Event {
	if len(elements) == 0 {
		return &EventArrayUint64{
			BaseEvent: ConstructEvent("au64", func(receiver events.DataEventReceiver) {
				var safeArg []uint64
				receiver.OnArray(events.ArrayTypeUint64, uint64(len(safeArg)), arrayUint64ToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg []uint64
	if v != nil {
		safeArg = v.([]uint64)
	}

	return &EventArrayUint64{
		BaseEvent: ConstructEvent("au64", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeUint64, uint64(len(safeArg)), arrayUint64ToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayUint64) Expand() Events {
	begin := BAU64()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([]uint64)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADU64(elements)}
}

type EventArrayUID struct{ BaseEvent }

func AU(elements [][]byte) Event {
	if len(elements) == 0 {
		return &EventArrayUID{
			BaseEvent: ConstructEvent("au", func(receiver events.DataEventReceiver) {
				var safeArg [][]byte
				receiver.OnArray(events.ArrayTypeUID, uint64(len(safeArg)), arrayUIDToBytes(safeArg))
			}),
		}
	}
	v := copyOf(elements)
	var safeArg [][]byte
	if v != nil {
		safeArg = v.([][]byte)
	}

	return &EventArrayUID{
		BaseEvent: ConstructEvent("au", func(receiver events.DataEventReceiver) {
			receiver.OnArray(events.ArrayTypeUID, uint64(len(safeArg)), arrayUIDToBytes(safeArg))
		}, safeArg),
	}
}

func (_this *EventArrayUID) Expand() Events {
	begin := BAU()
	if len(_this.values) == 0 {
		return Events{begin, ACL(0)}
	}
	elements := _this.values[0].([][]byte)
	if len(elements) == 0 {
		return Events{begin, ACL(0)}
	}
	return Events{begin, ACL(uint64(len(elements))), ADU(elements)}
}

type EventBeginArrayBit struct{ BaseEvent }

func BAB() Event {
	return &EventBeginArrayBit{
		BaseEvent: ConstructEvent("bab", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeBit)
		}),
	}
}

type EventBeginArrayFloat16 struct{ BaseEvent }

func BAF16() Event {
	return &EventBeginArrayFloat16{
		BaseEvent: ConstructEvent("baf16", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeFloat16)
		}),
	}
}

type EventBeginArrayFloat32 struct{ BaseEvent }

func BAF32() Event {
	return &EventBeginArrayFloat32{
		BaseEvent: ConstructEvent("baf32", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeFloat32)
		}),
	}
}

type EventBeginArrayFloat64 struct{ BaseEvent }

func BAF64() Event {
	return &EventBeginArrayFloat64{
		BaseEvent: ConstructEvent("baf64", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeFloat64)
		}),
	}
}

type EventBeginArrayInt8 struct{ BaseEvent }

func BAI8() Event {
	return &EventBeginArrayInt8{
		BaseEvent: ConstructEvent("bai8", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeInt8)
		}),
	}
}

type EventBeginArrayInt16 struct{ BaseEvent }

func BAI16() Event {
	return &EventBeginArrayInt16{
		BaseEvent: ConstructEvent("bai16", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeInt16)
		}),
	}
}

type EventBeginArrayInt32 struct{ BaseEvent }

func BAI32() Event {
	return &EventBeginArrayInt32{
		BaseEvent: ConstructEvent("bai32", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeInt32)
		}),
	}
}

type EventBeginArrayInt64 struct{ BaseEvent }

func BAI64() Event {
	return &EventBeginArrayInt64{
		BaseEvent: ConstructEvent("bai64", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeInt64)
		}),
	}
}

type EventBeginArrayUID struct{ BaseEvent }

func BAU() Event {
	return &EventBeginArrayUID{
		BaseEvent: ConstructEvent("bau", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeUID)
		}),
	}
}

type EventBeginArrayUint8 struct{ BaseEvent }

func BAU8() Event {
	return &EventBeginArrayUint8{
		BaseEvent: ConstructEvent("bau8", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeUint8)
		}),
	}
}

type EventBeginArrayUint16 struct{ BaseEvent }

func BAU16() Event {
	return &EventBeginArrayUint16{
		BaseEvent: ConstructEvent("bau16", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeUint16)
		}),
	}
}

type EventBeginArrayUint32 struct{ BaseEvent }

func BAU32() Event {
	return &EventBeginArrayUint32{
		BaseEvent: ConstructEvent("bau32", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeUint32)
		}),
	}
}

type EventBeginArrayUint64 struct{ BaseEvent }

func BAU64() Event {
	return &EventBeginArrayUint64{
		BaseEvent: ConstructEvent("bau64", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeUint64)
		}),
	}
}

type EventBeginReferenceRemote struct{ BaseEvent }

func BREFR() Event {
	return &EventBeginReferenceRemote{
		BaseEvent: ConstructEvent("brefr", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeReferenceRemote)
		}),
	}
}

type EventBeginResourceID struct{ BaseEvent }

func BRID() Event {
	return &EventBeginResourceID{
		BaseEvent: ConstructEvent("brid", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeResourceID)
		}),
	}
}

type EventBeginString struct{ BaseEvent }

func BS() Event {
	return &EventBeginString{
		BaseEvent: ConstructEvent("bs", func(receiver events.DataEventReceiver) {
			receiver.OnArrayBegin(events.ArrayTypeString)
		}),
	}
}

type EventBeginCustomBinary struct{ BaseEvent }

func BCB(customType uint64) Event {
	v := customType
	safeArg := v

	return &EventBeginCustomBinary{
		BaseEvent: ConstructEvent("bcb", func(receiver events.DataEventReceiver) {
			receiver.OnCustomBegin(events.ArrayTypeCustomBinary, customType)
		}, safeArg),
	}
}

type EventBeginCustomText struct{ BaseEvent }

func BCT(customType uint64) Event {
	v := customType
	safeArg := v

	return &EventBeginCustomText{
		BaseEvent: ConstructEvent("bct", func(receiver events.DataEventReceiver) {
			receiver.OnCustomBegin(events.ArrayTypeCustomText, customType)
		}, safeArg),
	}
}

type EventBeginMedia struct{ BaseEvent }

func BMEDIA(mediaType string) Event {
	v := mediaType
	safeArg := v

	return &EventBeginMedia{
		BaseEvent: ConstructEvent("bmedia", func(receiver events.DataEventReceiver) {
			receiver.OnMediaBegin(mediaType)
		}, safeArg),
	}
}

type EventEdge struct{ BaseEvent }

func EDGE() Event {
	return &EventEdge{
		BaseEvent: ConstructEvent("edge", func(receiver events.DataEventReceiver) {
			receiver.OnEdge()
		}),
	}
}

type EventEndContainer struct{ BaseEvent }

func E() Event {
	return &EventEndContainer{
		BaseEvent: ConstructEvent("e", func(receiver events.DataEventReceiver) {
			receiver.OnEndContainer()
		}),
	}
}

type EventList struct{ BaseEvent }

func L() Event {
	return &EventList{
		BaseEvent: ConstructEvent("l", func(receiver events.DataEventReceiver) {
			receiver.OnList()
		}),
	}
}

type EventMap struct{ BaseEvent }

func M() Event {
	return &EventMap{
		BaseEvent: ConstructEvent("m", func(receiver events.DataEventReceiver) {
			receiver.OnMap()
		}),
	}
}

type EventNode struct{ BaseEvent }

func NODE() Event {
	return &EventNode{
		BaseEvent: ConstructEvent("node", func(receiver events.DataEventReceiver) {
			receiver.OnNode()
		}),
	}
}

type EventNull struct{ BaseEvent }

func NULL() Event {
	return &EventNull{
		BaseEvent: ConstructEvent("null", func(receiver events.DataEventReceiver) {
			receiver.OnNull()
		}),
	}
}

type EventPadding struct{ BaseEvent }

func PAD() Event {
	return &EventPadding{
		BaseEvent: ConstructEvent("pad", func(receiver events.DataEventReceiver) {
			receiver.OnPadding()
		}),
	}
}

type EventBeginDocument struct{ BaseEvent }

func BD() Event {
	return &EventBeginDocument{
		BaseEvent: ConstructEvent("bd", func(receiver events.DataEventReceiver) {
			receiver.OnBeginDocument()
		}),
	}
}

type EventEndDocument struct{ BaseEvent }

func ED() Event {
	return &EventEndDocument{
		BaseEvent: ConstructEvent("ed", func(receiver events.DataEventReceiver) {
			receiver.OnEndDocument()
		}),
	}
}

